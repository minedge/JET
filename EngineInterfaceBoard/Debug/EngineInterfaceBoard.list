
EngineInterfaceBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb24  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0800cd08  0800cd08  0001cd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d39c  0800d39c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d39c  0800d39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3a4  0800d3a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3a4  0800d3a4  0001d3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3a8  0800d3a8  0001d3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cd8  200001e4  0800d590  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ebc  0800d590  00022ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200c9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc8  00000000  00000000  000402dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  00045760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004bb0  00000000  00000000  00046ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adfd  00000000  00000000  0004ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d236b  00000000  00000000  0006686d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e4c  00000000  00000000  00138c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ccec 	.word	0x0800ccec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800ccec 	.word	0x0800ccec

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 fe0b 	bl	8001c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f886 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f000 fa6a 	bl	800152c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001058:	f000 fa1c 	bl	8001494 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800105c:	f000 f8cc 	bl	80011f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001060:	f000 f9cc 	bl	80013fc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001064:	f000 f978 	bl	8001358 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001068:	f004 fb08 	bl	800567c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Q_Sensors */
  Q_SensorsHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Sensors_attributes);
 800106c:	4a25      	ldr	r2, [pc, #148]	; (8001104 <main+0xbc>)
 800106e:	2120      	movs	r1, #32
 8001070:	2003      	movs	r0, #3
 8001072:	f004 fbfa 	bl	800586a <osMessageQueueNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <main+0xc0>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of Q_Commands */
  Q_CommandsHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Commands_attributes);
 800107c:	4a23      	ldr	r2, [pc, #140]	; (800110c <main+0xc4>)
 800107e:	2120      	movs	r1, #32
 8001080:	2003      	movs	r0, #3
 8001082:	f004 fbf2 	bl	800586a <osMessageQueueNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <main+0xc8>)
 800108a:	6013      	str	r3, [r2, #0]

  /* creation of Q_Output */
  Q_OutputHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Output_attributes);
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <main+0xcc>)
 800108e:	2120      	movs	r1, #32
 8001090:	2003      	movs	r0, #3
 8001092:	f004 fbea 	bl	800586a <osMessageQueueNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <main+0xd0>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of Q_Controller */
  Q_ControllerHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Controller_attributes);
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <main+0xd4>)
 800109e:	2120      	movs	r1, #32
 80010a0:	2003      	movs	r0, #3
 80010a2:	f004 fbe2 	bl	800586a <osMessageQueueNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <main+0xd8>)
 80010aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Commander */
  CommanderHandle = osThreadNew(StartCommander, NULL, &Commander_attributes);
 80010ac:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <main+0xdc>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	481d      	ldr	r0, [pc, #116]	; (8001128 <main+0xe0>)
 80010b2:	f004 fb2d 	bl	8005710 <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <main+0xe4>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of Controller */
  ControllerHandle = osThreadNew(StartController, NULL, &Controller_attributes);
 80010bc:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <main+0xe8>)
 80010be:	2100      	movs	r1, #0
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <main+0xec>)
 80010c2:	f004 fb25 	bl	8005710 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <main+0xf0>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* creation of SensorCollector */
  SensorCollectorHandle = osThreadNew(StartSensorCollector, NULL, &SensorCollector_attributes);
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <main+0xf4>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	481b      	ldr	r0, [pc, #108]	; (8001140 <main+0xf8>)
 80010d2:	f004 fb1d 	bl	8005710 <osThreadNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <main+0xfc>)
 80010da:	6013      	str	r3, [r2, #0]

  /* creation of Output */
  OutputHandle = osThreadNew(StartOutput, NULL, &Output_attributes);
 80010dc:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <main+0x100>)
 80010de:	2100      	movs	r1, #0
 80010e0:	481a      	ldr	r0, [pc, #104]	; (800114c <main+0x104>)
 80010e2:	f004 fb15 	bl	8005710 <osThreadNew>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <main+0x108>)
 80010ea:	6013      	str	r3, [r2, #0]

  /* creation of MessageManager */
  MessageManagerHandle = osThreadNew(StartMessageManager, NULL, &MessageManager_attributes);
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <main+0x10c>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <main+0x110>)
 80010f2:	f004 fb0d 	bl	8005710 <osThreadNew>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a18      	ldr	r2, [pc, #96]	; (800115c <main+0x114>)
 80010fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010fc:	f004 fae2 	bl	80056c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001100:	e7fe      	b.n	8001100 <main+0xb8>
 8001102:	bf00      	nop
 8001104:	0800ce54 	.word	0x0800ce54
 8001108:	20001178 	.word	0x20001178
 800110c:	0800ce6c 	.word	0x0800ce6c
 8001110:	2000122c 	.word	0x2000122c
 8001114:	0800ce84 	.word	0x0800ce84
 8001118:	200012e0 	.word	0x200012e0
 800111c:	0800ce9c 	.word	0x0800ce9c
 8001120:	20001394 	.word	0x20001394
 8001124:	0800cda0 	.word	0x0800cda0
 8001128:	080015c9 	.word	0x080015c9
 800112c:	200003b8 	.word	0x200003b8
 8001130:	0800cdc4 	.word	0x0800cdc4
 8001134:	080015d9 	.word	0x080015d9
 8001138:	20000678 	.word	0x20000678
 800113c:	0800cde8 	.word	0x0800cde8
 8001140:	080015e9 	.word	0x080015e9
 8001144:	20000938 	.word	0x20000938
 8001148:	0800ce0c 	.word	0x0800ce0c
 800114c:	0800166d 	.word	0x0800166d
 8001150:	20000bf8 	.word	0x20000bf8
 8001154:	0800ce30 	.word	0x0800ce30
 8001158:	0800168d 	.word	0x0800168d
 800115c:	20000eb8 	.word	0x20000eb8

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2238      	movs	r2, #56	; 0x38
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f007 f9dd 	bl	800852e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001182:	2000      	movs	r0, #0
 8001184:	f001 f838 	bl	80021f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800119e:	2304      	movs	r3, #4
 80011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011a2:	2355      	movs	r3, #85	; 0x55
 80011a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f8d2 	bl	8002360 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011c2:	f000 fa7d 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2104      	movs	r1, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fbd6 	bl	8002990 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ea:	f000 fa69 	bl	80016c0 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b09c      	sub	sp, #112	; 0x70
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2234      	movs	r2, #52	; 0x34
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f007 f97b 	bl	800852e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001238:	4b45      	ldr	r3, [pc, #276]	; (8001350 <MX_TIM1_Init+0x158>)
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <MX_TIM1_Init+0x15c>)
 800123c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <MX_TIM1_Init+0x158>)
 8001240:	22a9      	movs	r2, #169	; 0xa9
 8001242:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <MX_TIM1_Init+0x158>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <MX_TIM1_Init+0x158>)
 800124c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <MX_TIM1_Init+0x158>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_TIM1_Init+0x158>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <MX_TIM1_Init+0x158>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001264:	483a      	ldr	r0, [pc, #232]	; (8001350 <MX_TIM1_Init+0x158>)
 8001266:	f001 ffd1 	bl	800320c <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 fa26 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800127e:	4619      	mov	r1, r3
 8001280:	4833      	ldr	r0, [pc, #204]	; (8001350 <MX_TIM1_Init+0x158>)
 8001282:	f002 fc7b 	bl	8003b7c <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800128c:	f000 fa18 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001290:	482f      	ldr	r0, [pc, #188]	; (8001350 <MX_TIM1_Init+0x158>)
 8001292:	f002 f87d 	bl	8003390 <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800129c:	f000 fa10 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b0:	4619      	mov	r1, r3
 80012b2:	4827      	ldr	r0, [pc, #156]	; (8001350 <MX_TIM1_Init+0x158>)
 80012b4:	f003 f9cc 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012be:	f000 f9ff 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	481a      	ldr	r0, [pc, #104]	; (8001350 <MX_TIM1_Init+0x158>)
 80012e8:	f002 fb34 	bl	8003954 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012f2:	f000 f9e5 	bl	80016c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800131c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM1_Init+0x158>)
 8001334:	f003 fa0e 	bl	8004754 <HAL_TIMEx_ConfigBreakDeadTime>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800133e:	f000 f9bf 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM1_Init+0x158>)
 8001344:	f000 fa24 	bl	8001790 <HAL_TIM_MspPostInit>

}
 8001348:	bf00      	nop
 800134a:	3770      	adds	r7, #112	; 0x70
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000200 	.word	0x20000200
 8001354:	40012c00 	.word	0x40012c00

08001358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_TIM2_Init+0xa0>)
 8001378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_TIM2_Init+0xa0>)
 8001380:	2210      	movs	r2, #16
 8001382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_TIM2_Init+0xa0>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_TIM2_Init+0xa0>)
 800138c:	2263      	movs	r2, #99	; 0x63
 800138e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_TIM2_Init+0xa0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_TIM2_Init+0xa0>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139c:	4816      	ldr	r0, [pc, #88]	; (80013f8 <MX_TIM2_Init+0xa0>)
 800139e:	f001 ff35 	bl	800320c <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a8:	f000 f98a 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <MX_TIM2_Init+0xa0>)
 80013ba:	f002 fbdf 	bl	8003b7c <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 f97c 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <MX_TIM2_Init+0xa0>)
 80013d6:	f003 f93b 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 f96e 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_MspInit(&htim2);
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_TIM2_Init+0xa0>)
 80013e6:	f000 f99b 	bl	8001720 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM2_Init+0xa0>)
 80013ec:	f001 ff66 	bl	80032bc <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000024c 	.word	0x2000024c

080013fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <MX_USART1_UART_Init+0x94>)
 8001404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_USART1_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_USART1_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_USART1_UART_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001444:	4811      	ldr	r0, [pc, #68]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001446:	f003 fa6b 	bl	8004920 <HAL_UART_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001450:	f000 f936 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_USART1_UART_Init+0x90>)
 8001458:	f004 f802 	bl	8005460 <HAL_UARTEx_SetTxFifoThreshold>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001462:	f000 f92d 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <MX_USART1_UART_Init+0x90>)
 800146a:	f004 f837 	bl	80054dc <HAL_UARTEx_SetRxFifoThreshold>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001474:	f000 f924 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_USART1_UART_Init+0x90>)
 800147a:	f003 ffb8 	bl	80053ee <HAL_UARTEx_DisableFifoMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001484:	f000 f91c 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000298 	.word	0x20000298
 8001490:	40013800 	.word	0x40013800

08001494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <MX_USART2_UART_Init+0x90>)
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <MX_USART2_UART_Init+0x94>)
 800149c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014de:	f003 fa1f 	bl	8004920 <HAL_UART_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 f8ea 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_USART2_UART_Init+0x90>)
 80014f0:	f003 ffb6 	bl	8005460 <HAL_UARTEx_SetTxFifoThreshold>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f000 f8e1 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <MX_USART2_UART_Init+0x90>)
 8001502:	f003 ffeb 	bl	80054dc <HAL_UARTEx_SetRxFifoThreshold>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800150c:	f000 f8d8 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_USART2_UART_Init+0x90>)
 8001512:	f003 ff6c 	bl	80053ee <HAL_UARTEx_DisableFifoMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800151c:	f000 f8d0 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000328 	.word	0x20000328
 8001528:	40004400 	.word	0x40004400

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_GPIO_Init+0x94>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <MX_GPIO_Init+0x94>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_GPIO_Init+0x94>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_GPIO_Init+0x94>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <MX_GPIO_Init+0x94>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_GPIO_Init+0x94>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <MX_GPIO_Init+0x98>)
 800157a:	f000 fe25 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f000 fc7e 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4619      	mov	r1, r3
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_GPIO_Init+0x98>)
 80015b2:	f000 fc6f 	bl	8001e94 <HAL_GPIO_Init>

}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000400 	.word	0x48000400

080015c8 <StartCommander>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommander */
void StartCommander(void *argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f004 f92f 	bl	8005834 <osDelay>
 80015d6:	e7fb      	b.n	80015d0 <StartCommander+0x8>

080015d8 <StartController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartController */
void StartController(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartController */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f004 f927 	bl	8005834 <osDelay>
 80015e6:	e7fb      	b.n	80015e0 <StartController+0x8>

080015e8 <StartSensorCollector>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorCollector */
void StartSensorCollector(void *argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b090      	sub	sp, #64	; 0x40
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorCollector */
  float value = 0;
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
  int rpm_time = 0, real_count = 0, pre_count = 1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t buffer[30] = {0,};
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	831a      	strh	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800161a:	2101      	movs	r1, #1
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f000 fdba 	bl	8002198 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	//HAL_ADC_Start(&hadc1);
	//value = HAL_ADC_GetValue(&hadc1);//count * (6000000. / (gTick - rpm_time));
	//HAL_ADC_Stop(&hadc1);

	sprintf((char*)buffer, "%d | %f\r\n", real_count, value);
 8001632:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001634:	f7fe ffb0 	bl	8000598 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	f107 0008 	add.w	r0, r7, #8
 8001640:	e9cd 2300 	strd	r2, r3, [sp]
 8001644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001646:	4907      	ldr	r1, [pc, #28]	; (8001664 <StartSensorCollector+0x7c>)
 8001648:	f007 ff08 	bl	800945c <siprintf>
	HAL_UART_Transmit(&huart2, buffer, 30, HAL_TIMEOUT);
 800164c:	f107 0108 	add.w	r1, r7, #8
 8001650:	2303      	movs	r3, #3
 8001652:	221e      	movs	r2, #30
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <StartSensorCollector+0x80>)
 8001656:	f003 f9b3 	bl	80049c0 <HAL_UART_Transmit>

    osDelay(1);
 800165a:	2001      	movs	r0, #1
 800165c:	f004 f8ea 	bl	8005834 <osDelay>
	value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001660:	e7db      	b.n	800161a <StartSensorCollector+0x32>
 8001662:	bf00      	nop
 8001664:	0800cd7c 	.word	0x0800cd7c
 8001668:	20000328 	.word	0x20000328

0800166c <StartOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutput */
void StartOutput(void *argument)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutput */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001674:	2100      	movs	r1, #0
 8001676:	4804      	ldr	r0, [pc, #16]	; (8001688 <StartOutput+0x1c>)
 8001678:	f001 feec 	bl	8003454 <HAL_TIM_PWM_Start>
  htim1.Instance->CCR1 =  1000;
 800167c:	4b02      	ldr	r3, [pc, #8]	; (8001688 <StartOutput+0x1c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001684:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  for(;;)
 8001686:	e7fe      	b.n	8001686 <StartOutput+0x1a>
 8001688:	20000200 	.word	0x20000200

0800168c <StartMessageManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessageManager */
void StartMessageManager(void *argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMessageManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f004 f8cd 	bl	8005834 <osDelay>
 800169a:	e7fb      	b.n	8001694 <StartMessageManager+0x8>

0800169c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ae:	f000 faf3 	bl	8001c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40013400 	.word	0x40013400

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_MspInit+0x50>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_MspInit+0x50>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_MspInit+0x50>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_MspInit+0x50>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_MspInit+0x50>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x50>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	210f      	movs	r1, #15
 8001706:	f06f 0001 	mvn.w	r0, #1
 800170a:	f000 fb9b 	bl	8001e44 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800170e:	f000 fe17 	bl	8002340 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_TIM_Base_MspInit+0x68>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10c      	bne.n	800174c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_TIM_Base_MspInit+0x6c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_TIM_Base_MspInit+0x6c>)
 8001738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173c:	6613      	str	r3, [r2, #96]	; 0x60
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_TIM_Base_MspInit+0x6c>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174a:	e018      	b.n	800177e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d113      	bne.n	800177e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_TIM_Base_MspInit+0x6c>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a0c      	ldr	r2, [pc, #48]	; (800178c <HAL_TIM_Base_MspInit+0x6c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_TIM_Base_MspInit+0x6c>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	201c      	movs	r0, #28
 8001774:	f000 fb66 	bl	8001e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001778:	201c      	movs	r0, #28
 800177a:	f000 fb7d 	bl	8001e78 <HAL_NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_TIM_MspPostInit+0x68>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d11d      	bne.n	80017ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Start_Motor_Pin;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017dc:	2306      	movs	r3, #6
 80017de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Start_Motor_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f000 fb53 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b09c      	sub	sp, #112	; 0x70
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	2244      	movs	r2, #68	; 0x44
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f006 fe84 	bl	800852e <memset>
  if(huart->Instance==USART1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a3e      	ldr	r2, [pc, #248]	; (8001924 <HAL_UART_MspInit+0x124>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d138      	bne.n	80018a2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	4618      	mov	r0, r3
 800183e:	f001 faf5 	bl	8002e2c <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001848:	f7ff ff3a 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_UART_MspInit+0x128>)
 800184e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001850:	4a35      	ldr	r2, [pc, #212]	; (8001928 <HAL_UART_MspInit+0x128>)
 8001852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001856:	6613      	str	r3, [r2, #96]	; 0x60
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_UART_MspInit+0x128>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_UART_MspInit+0x128>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_UART_MspInit+0x128>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_UART_MspInit+0x128>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800187c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001880:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800188e:	2307      	movs	r3, #7
 8001890:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f000 fafa 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a0:	e03b      	b.n	800191a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <HAL_UART_MspInit+0x12c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d136      	bne.n	800191a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fab7 	bl	8002e2c <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80018c4:	f7ff fefc 	bl	80016c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_UART_MspInit+0x128>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_UART_MspInit+0x128>)
 80018ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d2:	6593      	str	r3, [r2, #88]	; 0x58
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_UART_MspInit+0x128>)
 80018d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_UART_MspInit+0x128>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_UART_MspInit+0x128>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_UART_MspInit+0x128>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80018f8:	230c      	movs	r3, #12
 80018fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001908:	2307      	movs	r3, #7
 800190a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f000 fabd 	bl	8001e94 <HAL_GPIO_Init>
}
 800191a:	bf00      	nop
 800191c:	3770      	adds	r7, #112	; 0x70
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40013800 	.word	0x40013800
 8001928:	40021000 	.word	0x40021000
 800192c:	40004400 	.word	0x40004400

08001930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_InitTick+0xcc>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_InitTick+0xcc>)
 800194c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_InitTick+0xcc>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800195e:	f107 020c 	add.w	r2, r7, #12
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f001 f9e7 	bl	8002d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800196e:	f001 f9cf 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8001972:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_InitTick+0xd0>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	3b01      	subs	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_InitTick+0xd4>)
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_InitTick+0xd8>)
 8001986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_InitTick+0xd4>)
 800198a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198e:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001990:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <HAL_InitTick+0xd4>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_InitTick+0xd4>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_InitTick+0xd4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 80019a2:	4818      	ldr	r0, [pc, #96]	; (8001a04 <HAL_InitTick+0xd4>)
 80019a4:	f001 fc32 	bl	800320c <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11b      	bne.n	80019ee <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 80019b6:	4813      	ldr	r0, [pc, #76]	; (8001a04 <HAL_InitTick+0xd4>)
 80019b8:	f001 fc80 	bl	80032bc <HAL_TIM_Base_Start_IT>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d111      	bne.n	80019ee <HAL_InitTick+0xbe>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80019ca:	202c      	movs	r0, #44	; 0x2c
 80019cc:	f000 fa54 	bl	8001e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	d808      	bhi.n	80019e8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 80019d6:	2200      	movs	r2, #0
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	202c      	movs	r0, #44	; 0x2c
 80019dc:	f000 fa32 	bl	8001e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_InitTick+0xdc>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e002      	b.n	80019ee <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80019ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3730      	adds	r7, #48	; 0x30
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	20001448 	.word	0x20001448
 8001a08:	40013400 	.word	0x40013400
 8001a0c:	20000004 	.word	0x20000004

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM2_IRQHandler+0x10>)
 8001a42:	f001 fe07 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000024c 	.word	0x2000024c

08001a50 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM8_UP_IRQHandler+0x10>)
 8001a56:	f001 fdfd 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20001448 	.word	0x20001448

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_kill>:

int _kill(int pid, int sig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a7e:	f006 fc25 	bl	80082cc <__errno>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2216      	movs	r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
	return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_exit>:

void _exit (int status)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffe7 	bl	8001a74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aa6:	e7fe      	b.n	8001aa6 <_exit+0x12>

08001aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
	}

return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
	}
	return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
	return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
	return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f006 fb8a 	bl	80082cc <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20008000 	.word	0x20008000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20001494 	.word	0x20001494
 8001bec:	20002ec0 	.word	0x20002ec0

08001bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopForever+0xe>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopForever+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3e:	f7ff ffd7 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f006 fc3f 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c46:	f7ff f9ff 	bl	8001048 <main>

08001c4a <LoopForever>:

LoopForever:
    b LoopForever
 8001c4a:	e7fe      	b.n	8001c4a <LoopForever>
  ldr   r0, =_estack
 8001c4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c58:	0800d3ac 	.word	0x0800d3ac
  ldr r2, =_sbss
 8001c5c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c60:	20002ebc 	.word	0x20002ebc

08001c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC1_2_IRQHandler>

08001c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f8dc 	bl	8001e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	200f      	movs	r0, #15
 8001c78:	f7ff fe5a 	bl	8001930 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e001      	b.n	8001c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c88:	f7ff fd20 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	20001498 	.word	0x20001498
 8001cb8:	20000008 	.word	0x20000008

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20001498 	.word	0x20001498

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ff4c 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e52:	f7ff ff63 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f7ff ffb3 	bl	8001dc8 <NVIC_EncodePriority>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff82 	bl	8001d74 <__NVIC_SetPriority>
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff56 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ea2:	e15a      	b.n	800215a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 814c 	beq.w	8002154 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d005      	beq.n	8001ed4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d130      	bne.n	8001f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 0201 	and.w	r2, r3, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d017      	beq.n	8001f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0203 	and.w	r2, r3, #3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80a6 	beq.w	8002154 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002008:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_GPIO_Init+0x2e4>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <HAL_GPIO_Init+0x2e4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6613      	str	r3, [r2, #96]	; 0x60
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_GPIO_Init+0x2e4>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002020:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_GPIO_Init+0x2e8>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204a:	d01f      	beq.n	800208c <HAL_GPIO_Init+0x1f8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_GPIO_Init+0x2ec>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d019      	beq.n	8002088 <HAL_GPIO_Init+0x1f4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a4b      	ldr	r2, [pc, #300]	; (8002184 <HAL_GPIO_Init+0x2f0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_GPIO_Init+0x1f0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_GPIO_Init+0x2f4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00d      	beq.n	8002080 <HAL_GPIO_Init+0x1ec>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_GPIO_Init+0x2f8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x1e8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a48      	ldr	r2, [pc, #288]	; (8002190 <HAL_GPIO_Init+0x2fc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_GPIO_Init+0x1e4>
 8002074:	2305      	movs	r3, #5
 8002076:	e00a      	b.n	800208e <HAL_GPIO_Init+0x1fa>
 8002078:	2306      	movs	r3, #6
 800207a:	e008      	b.n	800208e <HAL_GPIO_Init+0x1fa>
 800207c:	2304      	movs	r3, #4
 800207e:	e006      	b.n	800208e <HAL_GPIO_Init+0x1fa>
 8002080:	2303      	movs	r3, #3
 8002082:	e004      	b.n	800208e <HAL_GPIO_Init+0x1fa>
 8002084:	2302      	movs	r3, #2
 8002086:	e002      	b.n	800208e <HAL_GPIO_Init+0x1fa>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_GPIO_Init+0x1fa>
 800208c:	2300      	movs	r3, #0
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	4093      	lsls	r3, r2
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209e:	4937      	ldr	r1, [pc, #220]	; (800217c <HAL_GPIO_Init+0x2e8>)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_GPIO_Init+0x300>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d0:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_GPIO_Init+0x300>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_GPIO_Init+0x300>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020fa:	4a26      	ldr	r2, [pc, #152]	; (8002194 <HAL_GPIO_Init+0x300>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_GPIO_Init+0x300>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_GPIO_Init+0x300>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_GPIO_Init+0x300>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_GPIO_Init+0x300>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f ae9d 	bne.w	8001ea4 <HAL_GPIO_Init+0x10>
  }
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000
 800217c:	40010000 	.word	0x40010000
 8002180:	48000400 	.word	0x48000400
 8002184:	48000800 	.word	0x48000800
 8002188:	48000c00 	.word	0x48000c00
 800218c:	48001000 	.word	0x48001000
 8002190:	48001400 	.word	0x48001400
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d141      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002206:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d131      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002214:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221a:	4a46      	ldr	r2, [pc, #280]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002224:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800222c:	4a41      	ldr	r2, [pc, #260]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2232      	movs	r2, #50	; 0x32
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800224a:	e002      	b.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3b01      	subs	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d102      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f2      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d158      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e057      	b.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227e:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002288:	e04d      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002290:	d141      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d131      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a6:	4a23      	ldr	r2, [pc, #140]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2232      	movs	r2, #50	; 0x32
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9b      	lsrs	r3, r3, #18
 80022d2:	3301      	adds	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022d6:	e002      	b.n	80022de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3b01      	subs	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d102      	bne.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f2      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	d112      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e011      	b.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002314:	e007      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002324:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40007000 	.word	0x40007000
 8002338:	20000000 	.word	0x20000000
 800233c:	431bde83 	.word	0x431bde83

08002340 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800234a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234e:	6093      	str	r3, [r2, #8]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40007000 	.word	0x40007000

08002360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e306      	b.n	8002980 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d075      	beq.n	800246a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b97      	ldr	r3, [pc, #604]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4b94      	ldr	r3, [pc, #592]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d102      	bne.n	800239e <HAL_RCC_OscConfig+0x3e>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_OscConfig+0x44>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d10b      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	4b8d      	ldr	r3, [pc, #564]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05b      	beq.n	8002468 <HAL_RCC_OscConfig+0x108>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d157      	bne.n	8002468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e2e1      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x74>
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a84      	ldr	r2, [pc, #528]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7e      	ldr	r2, [pc, #504]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b7c      	ldr	r3, [pc, #496]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7b      	ldr	r2, [pc, #492]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023f8:	4b78      	ldr	r3, [pc, #480]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a77      	ldr	r2, [pc, #476]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a74      	ldr	r2, [pc, #464]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff fc50 	bl	8001cbc <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fc4c 	bl	8001cbc <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2a6      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xc0>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fc3c 	bl	8001cbc <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fc38 	bl	8001cbc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e292      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245a:	4b60      	ldr	r3, [pc, #384]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0xe8>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d075      	beq.n	8002562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002476:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b0c      	cmp	r3, #12
 800248e:	d102      	bne.n	8002496 <HAL_RCC_OscConfig+0x136>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d002      	beq.n	800249c <HAL_RCC_OscConfig+0x13c>
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d11f      	bne.n	80024dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x154>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e265      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b49      	ldr	r3, [pc, #292]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	4946      	ldr	r1, [pc, #280]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fa2f 	bl	8001930 <HAL_InitTick>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d043      	beq.n	8002560 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e251      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff fbe4 	bl	8001cbc <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f8:	f7ff fbe0 	bl	8001cbc <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e23a      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250a:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	492d      	ldr	r1, [pc, #180]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
 800252a:	e01a      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fbc0 	bl	8001cbc <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff fbbc 	bl	8001cbc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e216      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1e0>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d041      	beq.n	80025f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7ff fb99 	bl	8001cbc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258e:	f7ff fb95 	bl	8001cbc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1ef      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ef      	beq.n	800258e <HAL_RCC_OscConfig+0x22e>
 80025ae:	e020      	b.n	80025f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7ff fb7c 	bl	8001cbc <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c6:	e00d      	b.n	80025e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7ff fb78 	bl	8001cbc <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d906      	bls.n	80025e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1d2      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e4:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ea      	bne.n	80025c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a6 	beq.w	800274c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002604:	4b84      	ldr	r3, [pc, #528]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x2b4>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x2b6>
 8002614:	2300      	movs	r3, #0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
 8002626:	4b7c      	ldr	r3, [pc, #496]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_OscConfig+0x4bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x4bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4bc>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7ff fb35 	bl	8001cbc <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7ff fb31 	bl	8001cbc <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e18b      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x4bc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d108      	bne.n	800268e <HAL_RCC_OscConfig+0x32e>
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268c:	e024      	b.n	80026d8 <HAL_RCC_OscConfig+0x378>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d110      	bne.n	80026b8 <HAL_RCC_OscConfig+0x358>
 8002696:	4b60      	ldr	r3, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	4a5e      	ldr	r2, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a6:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b6:	e00f      	b.n	80026d8 <HAL_RCC_OscConfig+0x378>
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7ff faec 	bl	8001cbc <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7ff fae8 	bl	8001cbc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e140      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ed      	beq.n	80026e8 <HAL_RCC_OscConfig+0x388>
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7ff fad5 	bl	8001cbc <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7ff fad1 	bl	8001cbc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e129      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ed      	bne.n	8002716 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d03c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01c      	beq.n	800279a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002766:	4a2c      	ldr	r2, [pc, #176]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7ff faa4 	bl	8001cbc <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002778:	f7ff faa0 	bl	8001cbc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0fa      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 800278c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ef      	beq.n	8002778 <HAL_RCC_OscConfig+0x418>
 8002798:	e01b      	b.n	80027d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800279a:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 800279c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7ff fa87 	bl	8001cbc <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b2:	f7ff fa83 	bl	8001cbc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0dd      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80027c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ef      	bne.n	80027b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80d1 	beq.w	800297e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	f000 808b 	beq.w	8002900 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d15e      	bne.n	80028b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_RCC_OscConfig+0x4b8>)
 80027f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7ff fa5d 	bl	8001cbc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	e00c      	b.n	8002820 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff fa59 	bl	8001cbc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d905      	bls.n	8002820 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0b3      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ec      	bne.n	8002806 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282c:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCC_OscConfig+0x62c>)
 8002832:	4013      	ands	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6a11      	ldr	r1, [r2, #32]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800283c:	3a01      	subs	r2, #1
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002846:	0212      	lsls	r2, r2, #8
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800284e:	0852      	lsrs	r2, r2, #1
 8002850:	3a01      	subs	r2, #1
 8002852:	0552      	lsls	r2, r2, #21
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800285a:	0852      	lsrs	r2, r2, #1
 800285c:	3a01      	subs	r2, #1
 800285e:	0652      	lsls	r2, r2, #25
 8002860:	4311      	orrs	r1, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002866:	06d2      	lsls	r2, r2, #27
 8002868:	430a      	orrs	r2, r1
 800286a:	4947      	ldr	r1, [pc, #284]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a44      	ldr	r2, [pc, #272]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800287c:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a41      	ldr	r2, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7ff fa18 	bl	8001cbc <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7ff fa14 	bl	8001cbc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e06e      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x530>
 80028ae:	e066      	b.n	800297e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a34      	ldr	r2, [pc, #208]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028c8:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff f9f0 	bl	8001cbc <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f9ec 	bl	8001cbc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e046      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x580>
 80028fe:	e03e      	b.n	800297e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e039      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_OscConfig+0x628>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	429a      	cmp	r2, r3
 800291e:	d12c      	bne.n	800297a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	3b01      	subs	r3, #1
 800292c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d123      	bne.n	800297a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11b      	bne.n	800297a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d113      	bne.n	800297a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d109      	bne.n	800297a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	3b01      	subs	r3, #1
 8002974:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	019f800c 	.word	0x019f800c

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e11e      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b91      	ldr	r3, [pc, #580]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 020f 	bic.w	r2, r3, #15
 80029be:	498c      	ldr	r1, [pc, #560]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b8a      	ldr	r3, [pc, #552]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e106      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d073      	beq.n	8002acc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d129      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0f4      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029fc:	f000 f9d0 	bl	8002da0 <RCC_GetSysClockFreqFromPLLSource>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4a7c      	ldr	r2, [pc, #496]	; (8002bf8 <HAL_RCC_ClockConfig+0x268>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d93f      	bls.n	8002a8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d033      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d12f      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a2a:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a32:	4a70      	ldr	r2, [pc, #448]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e024      	b.n	8002a8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a48:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0c6      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0be      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a68:	f000 f8ce 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4a61      	ldr	r2, [pc, #388]	; (8002bf8 <HAL_RCC_ClockConfig+0x268>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d909      	bls.n	8002a8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	4a5d      	ldr	r2, [pc, #372]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4957      	ldr	r1, [pc, #348]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7ff f90e 	bl	8001cbc <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7ff f90a 	bl	8001cbc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e095      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002afc:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b04:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4936      	ldr	r1, [pc, #216]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b80      	cmp	r3, #128	; 0x80
 8002b24:	d105      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4a32      	ldr	r2, [pc, #200]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d21d      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 020f 	bic.w	r2, r3, #15
 8002b48:	4929      	ldr	r1, [pc, #164]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b50:	f7ff f8b4 	bl	8001cbc <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7ff f8b0 	bl	8001cbc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e03b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1ed      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4917      	ldr	r1, [pc, #92]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490f      	ldr	r1, [pc, #60]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bba:	f000 f825 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490c      	ldr	r1, [pc, #48]	; (8002bfc <HAL_RCC_ClockConfig+0x26c>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x270>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x274>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fea6 	bl	8001930 <HAL_InitTick>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	04c4b400 	.word	0x04c4b400
 8002bfc:	0800ceb4 	.word	0x0800ceb4
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e047      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c2c:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	e03e      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d136      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3301      	adds	r3, #1
 8002c54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c66:	68d2      	ldr	r2, [r2, #12]
 8002c68:	0a12      	lsrs	r2, r2, #8
 8002c6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
      break;
 8002c74:	e00c      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	0a12      	lsrs	r2, r2, #8
 8002c84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
      break;
 8002c8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0e5b      	lsrs	r3, r3, #25
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e001      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cb0:	693b      	ldr	r3, [r7, #16]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	007a1200 	.word	0x007a1200

08002ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000000 	.word	0x20000000

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce8:	f7ff fff0 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0800cec4 	.word	0x0800cec4

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d14:	f7ff ffda 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0adb      	lsrs	r3, r3, #11
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	0800cec4 	.word	0x0800cec4

08002d3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	220f      	movs	r2, #15
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_RCC_GetClockConfig+0x60>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40022000 	.word	0x40022000

08002da0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d10c      	bne.n	8002dde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dce:	68d2      	ldr	r2, [r2, #12]
 8002dd0:	0a12      	lsrs	r2, r2, #8
 8002dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	617b      	str	r3, [r7, #20]
    break;
 8002ddc:	e00c      	b.n	8002df8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	0a12      	lsrs	r2, r2, #8
 8002dec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    break;
 8002df6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0e5b      	lsrs	r3, r3, #25
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e12:	687b      	ldr	r3, [r7, #4]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40021000 	.word	0x40021000
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	00f42400 	.word	0x00f42400

08002e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e34:	2300      	movs	r3, #0
 8002e36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e38:	2300      	movs	r3, #0
 8002e3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8098 	beq.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	4a3f      	ldr	r2, [pc, #252]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e76:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a39      	ldr	r2, [pc, #228]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e82:	f7fe ff1b 	bl	8001cbc <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e88:	e009      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe ff17 	bl	8001cbc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d902      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	74fb      	strb	r3, [r7, #19]
        break;
 8002e9c:	e005      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ef      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d159      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01e      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d019      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fed7 	bl	8001cbc <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f10:	e00b      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fed3 	bl	8001cbc <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	74fb      	strb	r3, [r7, #19]
            break;
 8002f28:	e006      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ec      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f54:	e008      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	74bb      	strb	r3, [r7, #18]
 8002f5a:	e005      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f68:	7c7b      	ldrb	r3, [r7, #17]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4ba6      	ldr	r3, [pc, #664]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	4aa5      	ldr	r2, [pc, #660]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f86:	4ba0      	ldr	r3, [pc, #640]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	499c      	ldr	r1, [pc, #624]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa8:	4b97      	ldr	r3, [pc, #604]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 020c 	bic.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4994      	ldr	r1, [pc, #592]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fca:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	498b      	ldr	r1, [pc, #556]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fec:	4b86      	ldr	r3, [pc, #536]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	4983      	ldr	r1, [pc, #524]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300e:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	497a      	ldr	r1, [pc, #488]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003030:	4b75      	ldr	r3, [pc, #468]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4972      	ldr	r1, [pc, #456]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4969      	ldr	r1, [pc, #420]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003074:	4b64      	ldr	r3, [pc, #400]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4961      	ldr	r1, [pc, #388]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003096:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	4958      	ldr	r1, [pc, #352]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	4950      	ldr	r1, [pc, #320]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d6:	d105      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a4a      	ldr	r2, [pc, #296]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	4942      	ldr	r1, [pc, #264]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003110:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800311a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003152:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316e:	4926      	ldr	r1, [pc, #152]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317e:	d105      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	4918      	ldr	r1, [pc, #96]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b6:	d105      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a12      	ldr	r2, [pc, #72]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	490a      	ldr	r1, [pc, #40]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ee:	d105      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e049      	b.n	80032b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fa74 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fdb8 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04a      	b.n	800336a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a21      	ldr	r2, [pc, #132]	; (8003378 <HAL_TIM_Base_Start_IT+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d018      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x6c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d013      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x6c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_TIM_Base_Start_IT+0xc0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x6c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_TIM_Base_Start_IT+0xc4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x6c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_TIM_Base_Start_IT+0xc8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x6c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_TIM_Base_Start_IT+0xcc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d115      	bne.n	8003354 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_TIM_Base_Start_IT+0xd0>)
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d015      	beq.n	8003366 <HAL_TIM_Base_Start_IT+0xaa>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d011      	beq.n	8003366 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e008      	b.n	8003366 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e000      	b.n	8003368 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40013400 	.word	0x40013400
 8003388:	40014000 	.word	0x40014000
 800338c:	00010007 	.word	0x00010007

08003390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e049      	b.n	8003436 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f841 	bl	800343e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 fcf6 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start+0x24>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e03c      	b.n	80034f2 <HAL_TIM_PWM_Start+0x9e>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d109      	bne.n	8003492 <HAL_TIM_PWM_Start+0x3e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e02f      	b.n	80034f2 <HAL_TIM_PWM_Start+0x9e>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x58>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_PWM_Start+0x9e>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x72>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_PWM_Start+0x9e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start+0x8c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_PWM_Start+0x9e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e097      	b.n	800362a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xb6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	e023      	b.n	8003552 <HAL_TIM_PWM_Start+0xfe>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0xc6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	e01b      	b.n	8003552 <HAL_TIM_PWM_Start+0xfe>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xd6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003528:	e013      	b.n	8003552 <HAL_TIM_PWM_Start+0xfe>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xe6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003538:	e00b      	b.n	8003552 <HAL_TIM_PWM_Start+0xfe>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d104      	bne.n	800354a <HAL_TIM_PWM_Start+0xf6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003548:	e003      	b.n	8003552 <HAL_TIM_PWM_Start+0xfe>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f001 f852 	bl	8004604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a33      	ldr	r2, [pc, #204]	; (8003634 <HAL_TIM_PWM_Start+0x1e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_TIM_PWM_Start+0x13e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a32      	ldr	r2, [pc, #200]	; (8003638 <HAL_TIM_PWM_Start+0x1e4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIM_PWM_Start+0x13e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_TIM_PWM_Start+0x1e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_TIM_PWM_Start+0x13e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_TIM_PWM_Start+0x1ec>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIM_PWM_Start+0x13e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_TIM_PWM_Start+0x1f0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_Start+0x142>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_TIM_PWM_Start+0x144>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a20      	ldr	r2, [pc, #128]	; (8003634 <HAL_TIM_PWM_Start+0x1e0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <HAL_TIM_PWM_Start+0x194>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d013      	beq.n	80035e8 <HAL_TIM_PWM_Start+0x194>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_TIM_PWM_Start+0x1f4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_TIM_PWM_Start+0x194>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_TIM_PWM_Start+0x1f8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_TIM_PWM_Start+0x194>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a17      	ldr	r2, [pc, #92]	; (8003638 <HAL_TIM_PWM_Start+0x1e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_TIM_PWM_Start+0x194>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <HAL_TIM_PWM_Start+0x1e8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d115      	bne.n	8003614 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	4b18      	ldr	r3, [pc, #96]	; (8003650 <HAL_TIM_PWM_Start+0x1fc>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d015      	beq.n	8003626 <HAL_TIM_PWM_Start+0x1d2>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d011      	beq.n	8003626 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	e008      	b.n	8003626 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e000      	b.n	8003628 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	00010007 	.word	0x00010007

08003654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0202 	mvn.w	r2, #2
 8003680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb74 	bl	8003d84 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fb66 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fb77 	bl	8003d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0204 	mvn.w	r2, #4
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fb4a 	bl	8003d84 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb3c 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fb4d 	bl	8003d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fb20 	bl	8003d84 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fb12 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fb23 	bl	8003d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b10      	cmp	r3, #16
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0210 	mvn.w	r2, #16
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2208      	movs	r2, #8
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 faf6 	bl	8003d84 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fae8 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 faf9 	bl	8003d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd ff62 	bl	800169c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f001 f852 	bl	80048a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003812:	d10e      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d107      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 f845 	bl	80048bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d10e      	bne.n	800385e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d107      	bne.n	800385e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 faa7 	bl	8003dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b20      	cmp	r3, #32
 800386a:	d10e      	bne.n	800388a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b20      	cmp	r3, #32
 8003878:	d107      	bne.n	800388a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0220 	mvn.w	r2, #32
 8003882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f001 f805 	bl	8004894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003898:	d10f      	bne.n	80038ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f001 f80b 	bl	80048d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c8:	d10f      	bne.n	80038ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d8:	d107      	bne.n	80038ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fffd 	bl	80048e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f8:	d10f      	bne.n	800391a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003908:	d107      	bne.n	800391a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 ffef 	bl	80048f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003928:	d10f      	bne.n	800394a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003938:	d107      	bne.n	800394a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 ffe1 	bl	800490c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800396e:	2302      	movs	r3, #2
 8003970:	e0ff      	b.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b14      	cmp	r3, #20
 800397e:	f200 80f0 	bhi.w	8003b62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039dd 	.word	0x080039dd
 800398c:	08003b63 	.word	0x08003b63
 8003990:	08003b63 	.word	0x08003b63
 8003994:	08003b63 	.word	0x08003b63
 8003998:	08003a1d 	.word	0x08003a1d
 800399c:	08003b63 	.word	0x08003b63
 80039a0:	08003b63 	.word	0x08003b63
 80039a4:	08003b63 	.word	0x08003b63
 80039a8:	08003a5f 	.word	0x08003a5f
 80039ac:	08003b63 	.word	0x08003b63
 80039b0:	08003b63 	.word	0x08003b63
 80039b4:	08003b63 	.word	0x08003b63
 80039b8:	08003a9f 	.word	0x08003a9f
 80039bc:	08003b63 	.word	0x08003b63
 80039c0:	08003b63 	.word	0x08003b63
 80039c4:	08003b63 	.word	0x08003b63
 80039c8:	08003ae1 	.word	0x08003ae1
 80039cc:	08003b63 	.word	0x08003b63
 80039d0:	08003b63 	.word	0x08003b63
 80039d4:	08003b63 	.word	0x08003b63
 80039d8:	08003b21 	.word	0x08003b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fa7c 	bl	8003ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0204 	bic.w	r2, r2, #4
 8003a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6999      	ldr	r1, [r3, #24]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	619a      	str	r2, [r3, #24]
      break;
 8003a1a:	e0a5      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 faec 	bl	8004000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	619a      	str	r2, [r3, #24]
      break;
 8003a5c:	e084      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fb55 	bl	8004114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0208 	orr.w	r2, r2, #8
 8003a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0204 	bic.w	r2, r2, #4
 8003a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69d9      	ldr	r1, [r3, #28]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	61da      	str	r2, [r3, #28]
      break;
 8003a9c:	e064      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fbbd 	bl	8004224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69d9      	ldr	r1, [r3, #28]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	021a      	lsls	r2, r3, #8
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	61da      	str	r2, [r3, #28]
      break;
 8003ade:	e043      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fc26 	bl	8004338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0208 	orr.w	r2, r2, #8
 8003afa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b1e:	e023      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fc6a 	bl	8004400 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	021a      	lsls	r2, r3, #8
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b60:	e002      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
      break;
 8003b66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop

08003b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_TIM_ConfigClockSource+0x1c>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e0de      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x1da>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a63      	ldr	r2, [pc, #396]	; (8003d60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f000 80a9 	beq.w	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003bd8:	4a61      	ldr	r2, [pc, #388]	; (8003d60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f200 80ae 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003be0:	4a60      	ldr	r2, [pc, #384]	; (8003d64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f000 80a1 	beq.w	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003be8:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f200 80a6 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003bf0:	4a5d      	ldr	r2, [pc, #372]	; (8003d68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	f000 8099 	beq.w	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003bf8:	4a5b      	ldr	r2, [pc, #364]	; (8003d68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	f200 809e 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c00:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f000 8091 	beq.w	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003c08:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f200 8096 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c14:	f000 8089 	beq.w	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003c18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c1c:	f200 808e 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c24:	d03e      	beq.n	8003ca4 <HAL_TIM_ConfigClockSource+0x128>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	f200 8087 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c32:	f000 8086 	beq.w	8003d42 <HAL_TIM_ConfigClockSource+0x1c6>
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d87f      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d01a      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0xfa>
 8003c40:	2b70      	cmp	r3, #112	; 0x70
 8003c42:	d87b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c44:	2b60      	cmp	r3, #96	; 0x60
 8003c46:	d050      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x16e>
 8003c48:	2b60      	cmp	r3, #96	; 0x60
 8003c4a:	d877      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c4c:	2b50      	cmp	r3, #80	; 0x50
 8003c4e:	d03c      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x14e>
 8003c50:	2b50      	cmp	r3, #80	; 0x50
 8003c52:	d873      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d058      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x18e>
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d86f      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d064      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d86b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d060      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d867      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d05c      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d05a      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003c74:	e062      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f000 fc9d 	bl	80045c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	609a      	str	r2, [r3, #8]
      break;
 8003ca2:	e04f      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f000 fc86 	bl	80045c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc6:	609a      	str	r2, [r3, #8]
      break;
 8003cc8:	e03c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fbf8 	bl	80044cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2150      	movs	r1, #80	; 0x50
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fc51 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e02c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f000 fc17 	bl	800452a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2160      	movs	r1, #96	; 0x60
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fc41 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003d08:	e01c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f000 fbd8 	bl	80044cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fc31 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003d28:	e00c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 fc28 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003d3a:	e003      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d40:	e000      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	00100070 	.word	0x00100070
 8003d64:	00100040 	.word	0x00100040
 8003d68:	00100030 	.word	0x00100030
 8003d6c:	00100020 	.word	0x00100020

08003d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3c      	ldr	r2, [pc, #240]	; (8003ec4 <TIM_Base_SetConfig+0x104>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <TIM_Base_SetConfig+0x108>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a38      	ldr	r2, [pc, #224]	; (8003ecc <TIM_Base_SetConfig+0x10c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <TIM_Base_SetConfig+0x110>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <TIM_Base_SetConfig+0x104>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d017      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ec8 <TIM_Base_SetConfig+0x108>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a29      	ldr	r2, [pc, #164]	; (8003ecc <TIM_Base_SetConfig+0x10c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <TIM_Base_SetConfig+0x110>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <TIM_Base_SetConfig+0x114>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <TIM_Base_SetConfig+0x118>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a25      	ldr	r2, [pc, #148]	; (8003edc <TIM_Base_SetConfig+0x11c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <TIM_Base_SetConfig+0x104>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00f      	beq.n	8003ea8 <TIM_Base_SetConfig+0xe8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <TIM_Base_SetConfig+0x110>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_Base_SetConfig+0xe8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <TIM_Base_SetConfig+0x114>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_Base_SetConfig+0xe8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <TIM_Base_SetConfig+0x118>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_Base_SetConfig+0xe8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0e      	ldr	r2, [pc, #56]	; (8003edc <TIM_Base_SetConfig+0x11c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	615a      	str	r2, [r3, #20]
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800

08003ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0201 	bic.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 0302 	bic.w	r3, r3, #2
 8003f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <TIM_OC1_SetConfig+0x10c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00f      	beq.n	8003f60 <TIM_OC1_SetConfig+0x80>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <TIM_OC1_SetConfig+0x110>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_OC1_SetConfig+0x80>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <TIM_OC1_SetConfig+0x114>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_OC1_SetConfig+0x80>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <TIM_OC1_SetConfig+0x118>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_OC1_SetConfig+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <TIM_OC1_SetConfig+0x11c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10c      	bne.n	8003f7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0308 	bic.w	r3, r3, #8
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f023 0304 	bic.w	r3, r3, #4
 8003f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <TIM_OC1_SetConfig+0x10c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_OC1_SetConfig+0xc2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1a      	ldr	r2, [pc, #104]	; (8003ff0 <TIM_OC1_SetConfig+0x110>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_OC1_SetConfig+0xc2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <TIM_OC1_SetConfig+0x114>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_OC1_SetConfig+0xc2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <TIM_OC1_SetConfig+0x118>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC1_SetConfig+0xc2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <TIM_OC1_SetConfig+0x11c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d111      	bne.n	8003fc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	621a      	str	r2, [r3, #32]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0210 	bic.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0320 	bic.w	r3, r3, #32
 800404e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <TIM_OC2_SetConfig+0x100>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC2_SetConfig+0x6c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a27      	ldr	r2, [pc, #156]	; (8004104 <TIM_OC2_SetConfig+0x104>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10d      	bne.n	8004088 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <TIM_OC2_SetConfig+0x100>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00f      	beq.n	80040b0 <TIM_OC2_SetConfig+0xb0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <TIM_OC2_SetConfig+0x104>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_OC2_SetConfig+0xb0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <TIM_OC2_SetConfig+0x108>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_OC2_SetConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1a      	ldr	r2, [pc, #104]	; (800410c <TIM_OC2_SetConfig+0x10c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC2_SetConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <TIM_OC2_SetConfig+0x110>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d113      	bne.n	80040d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40013400 	.word	0x40013400
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800

08004114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a27      	ldr	r2, [pc, #156]	; (8004210 <TIM_OC3_SetConfig+0xfc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_OC3_SetConfig+0x6a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <TIM_OC3_SetConfig+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10d      	bne.n	800419a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <TIM_OC3_SetConfig+0xfc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00f      	beq.n	80041c2 <TIM_OC3_SetConfig+0xae>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <TIM_OC3_SetConfig+0x100>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_OC3_SetConfig+0xae>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <TIM_OC3_SetConfig+0x104>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_OC3_SetConfig+0xae>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <TIM_OC3_SetConfig+0x108>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_OC3_SetConfig+0xae>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <TIM_OC3_SetConfig+0x10c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d113      	bne.n	80041ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40013400 	.word	0x40013400
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800

08004224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a28      	ldr	r2, [pc, #160]	; (8004324 <TIM_OC4_SetConfig+0x100>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_OC4_SetConfig+0x6c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a27      	ldr	r2, [pc, #156]	; (8004328 <TIM_OC4_SetConfig+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10d      	bne.n	80042ac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	031b      	lsls	r3, r3, #12
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <TIM_OC4_SetConfig+0x100>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_OC4_SetConfig+0xb0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <TIM_OC4_SetConfig+0x104>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_OC4_SetConfig+0xb0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <TIM_OC4_SetConfig+0x108>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_OC4_SetConfig+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <TIM_OC4_SetConfig+0x10c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC4_SetConfig+0xb0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a19      	ldr	r2, [pc, #100]	; (8004334 <TIM_OC4_SetConfig+0x110>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d113      	bne.n	80042fc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800437c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <TIM_OC5_SetConfig+0xb4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <TIM_OC5_SetConfig+0xb8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <TIM_OC5_SetConfig+0xbc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <TIM_OC5_SetConfig+0xc0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_OC5_SetConfig+0x7a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a13      	ldr	r2, [pc, #76]	; (80043fc <TIM_OC5_SetConfig+0xc4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d109      	bne.n	80043c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40013400 	.word	0x40013400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	051b      	lsls	r3, r3, #20
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <TIM_OC6_SetConfig+0xb8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00f      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a17      	ldr	r2, [pc, #92]	; (80044bc <TIM_OC6_SetConfig+0xbc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <TIM_OC6_SetConfig+0xc0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <TIM_OC6_SetConfig+0xc4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC6_SetConfig+0x7c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <TIM_OC6_SetConfig+0xc8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d109      	bne.n	8004490 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 030a 	bic.w	r3, r3, #10
 8004508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452a:	b480      	push	{r7}
 800452c:	b087      	sub	sp, #28
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0210 	bic.w	r2, r3, #16
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	031b      	lsls	r3, r3, #12
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f043 0307 	orr.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	021a      	lsls	r2, r3, #8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1a      	ldr	r2, [r3, #32]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004664:	2302      	movs	r3, #2
 8004666:	e065      	b.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d108      	bne.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d013      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a12      	ldr	r2, [pc, #72]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10c      	bne.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40013400 	.word	0x40013400
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40014000 	.word	0x40014000

08004754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e087      	b.n	8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a25      	ldr	r2, [pc, #148]	; (8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d106      	bne.n	800480c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1e      	ldr	r2, [pc, #120]	; (800488c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d126      	bne.n	800486e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	051b      	lsls	r3, r3, #20
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0e      	ldr	r2, [pc, #56]	; (800488c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d106      	bne.n	800486e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40013400 	.word	0x40013400

08004894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e042      	b.n	80049b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7fc ff5b 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2224      	movs	r2, #36	; 0x24
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8c2 	bl	8004aec <UART_SetConfig>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fb82 	bl	8005084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fc09 	bl	80051c8 <UART_CheckIdleState>
 80049b6:	4603      	mov	r3, r0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	f040 8083 	bne.w	8004ae2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_UART_Transmit+0x28>
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e07b      	b.n	8004ae4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Transmit+0x3a>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e074      	b.n	8004ae4 <HAL_UART_Transmit+0x124>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2221      	movs	r2, #33	; 0x21
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a12:	f7fd f953 	bl	8001cbc <HAL_GetTick>
 8004a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d108      	bne.n	8004a44 <HAL_UART_Transmit+0x84>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e003      	b.n	8004a4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004a54:	e02c      	b.n	8004ab0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fbfc 	bl	800525e <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e039      	b.n	8004ae4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e007      	b.n	8004a9e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1cc      	bne.n	8004a56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fbc9 	bl	800525e <UART_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e006      	b.n	8004ae4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e000      	b.n	8004ae4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af0:	b08c      	sub	sp, #48	; 0x30
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4bab      	ldr	r3, [pc, #684]	; (8004dc8 <UART_SetConfig+0x2dc>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4aa0      	ldr	r2, [pc, #640]	; (8004dcc <UART_SetConfig+0x2e0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b54:	4313      	orrs	r3, r2
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f023 010f 	bic.w	r1, r3, #15
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a91      	ldr	r2, [pc, #580]	; (8004dd0 <UART_SetConfig+0x2e4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d125      	bne.n	8004bdc <UART_SetConfig+0xf0>
 8004b90:	4b90      	ldr	r3, [pc, #576]	; (8004dd4 <UART_SetConfig+0x2e8>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d81a      	bhi.n	8004bd4 <UART_SetConfig+0xe8>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0xb8>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcd 	.word	0x08004bcd
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bba:	e0d6      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc2:	e0d2      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bca:	e0ce      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	e0ca      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bda:	e0c6      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7d      	ldr	r2, [pc, #500]	; (8004dd8 <UART_SetConfig+0x2ec>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d138      	bne.n	8004c58 <UART_SetConfig+0x16c>
 8004be6:	4b7b      	ldr	r3, [pc, #492]	; (8004dd4 <UART_SetConfig+0x2e8>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d82d      	bhi.n	8004c50 <UART_SetConfig+0x164>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x110>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004c51 	.word	0x08004c51
 8004c08:	08004c51 	.word	0x08004c51
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c51 	.word	0x08004c51
 8004c14:	08004c51 	.word	0x08004c51
 8004c18:	08004c51 	.word	0x08004c51
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	08004c51 	.word	0x08004c51
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c36:	e098      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3e:	e094      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e090      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e08c      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e088      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a5f      	ldr	r2, [pc, #380]	; (8004ddc <UART_SetConfig+0x2f0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d125      	bne.n	8004cae <UART_SetConfig+0x1c2>
 8004c62:	4b5c      	ldr	r3, [pc, #368]	; (8004dd4 <UART_SetConfig+0x2e8>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d016      	beq.n	8004c9e <UART_SetConfig+0x1b2>
 8004c70:	2b30      	cmp	r3, #48	; 0x30
 8004c72:	d818      	bhi.n	8004ca6 <UART_SetConfig+0x1ba>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d00a      	beq.n	8004c8e <UART_SetConfig+0x1a2>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d814      	bhi.n	8004ca6 <UART_SetConfig+0x1ba>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <UART_SetConfig+0x19a>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d008      	beq.n	8004c96 <UART_SetConfig+0x1aa>
 8004c84:	e00f      	b.n	8004ca6 <UART_SetConfig+0x1ba>
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8c:	e06d      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c94:	e069      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c96:	2304      	movs	r3, #4
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9c:	e065      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca4:	e061      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cac:	e05d      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a4b      	ldr	r2, [pc, #300]	; (8004de0 <UART_SetConfig+0x2f4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d125      	bne.n	8004d04 <UART_SetConfig+0x218>
 8004cb8:	4b46      	ldr	r3, [pc, #280]	; (8004dd4 <UART_SetConfig+0x2e8>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc4:	d016      	beq.n	8004cf4 <UART_SetConfig+0x208>
 8004cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc8:	d818      	bhi.n	8004cfc <UART_SetConfig+0x210>
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d00a      	beq.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d814      	bhi.n	8004cfc <UART_SetConfig+0x210>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <UART_SetConfig+0x1f0>
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d008      	beq.n	8004cec <UART_SetConfig+0x200>
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x210>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce2:	e042      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cea:	e03e      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf2:	e03a      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e036      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d02:	e032      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a30      	ldr	r2, [pc, #192]	; (8004dcc <UART_SetConfig+0x2e0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d12a      	bne.n	8004d64 <UART_SetConfig+0x278>
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <UART_SetConfig+0x2e8>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1c:	d01a      	beq.n	8004d54 <UART_SetConfig+0x268>
 8004d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d22:	d81b      	bhi.n	8004d5c <UART_SetConfig+0x270>
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d00c      	beq.n	8004d44 <UART_SetConfig+0x258>
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d815      	bhi.n	8004d5c <UART_SetConfig+0x270>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <UART_SetConfig+0x250>
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d008      	beq.n	8004d4c <UART_SetConfig+0x260>
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x270>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d42:	e012      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004d44:	2302      	movs	r3, #2
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	e00e      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d52:	e00a      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004d54:	2308      	movs	r3, #8
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5a:	e006      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d62:	e002      	b.n	8004d6a <UART_SetConfig+0x27e>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <UART_SetConfig+0x2e0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f040 80a8 	bne.w	8004ec6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d834      	bhi.n	8004de8 <UART_SetConfig+0x2fc>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x298>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004de9 	.word	0x08004de9
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004db7 	.word	0x08004db7
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fd ff9c 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8004dac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dae:	e021      	b.n	8004df4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <UART_SetConfig+0x2f8>)
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004db4:	e01e      	b.n	8004df4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fd ff27 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dbc:	e01a      	b.n	8004df4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dc4:	e016      	b.n	8004df4 <UART_SetConfig+0x308>
 8004dc6:	bf00      	nop
 8004dc8:	cfff69f3 	.word	0xcfff69f3
 8004dcc:	40008000 	.word	0x40008000
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	40004800 	.word	0x40004800
 8004de0:	40004c00 	.word	0x40004c00
 8004de4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004df2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 812a 	beq.w	8005050 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	4a9e      	ldr	r2, [pc, #632]	; (800507c <UART_SetConfig+0x590>)
 8004e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	4413      	add	r3, r2
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d305      	bcc.n	8004e2c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d903      	bls.n	8004e34 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e32:	e10d      	b.n	8005050 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	2200      	movs	r2, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	60fa      	str	r2, [r7, #12]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	4a8e      	ldr	r2, [pc, #568]	; (800507c <UART_SetConfig+0x590>)
 8004e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2200      	movs	r2, #0
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e56:	f7fb ff3f 	bl	8000cd8 <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	020b      	lsls	r3, r1, #8
 8004e6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e70:	0202      	lsls	r2, r0, #8
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	6849      	ldr	r1, [r1, #4]
 8004e76:	0849      	lsrs	r1, r1, #1
 8004e78:	2000      	movs	r0, #0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	eb12 0804 	adds.w	r8, r2, r4
 8004e82:	eb43 0905 	adc.w	r9, r3, r5
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	469a      	mov	sl, r3
 8004e8e:	4693      	mov	fp, r2
 8004e90:	4652      	mov	r2, sl
 8004e92:	465b      	mov	r3, fp
 8004e94:	4640      	mov	r0, r8
 8004e96:	4649      	mov	r1, r9
 8004e98:	f7fb ff1e 	bl	8000cd8 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d308      	bcc.n	8004ebe <UART_SetConfig+0x3d2>
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb2:	d204      	bcs.n	8004ebe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a3a      	ldr	r2, [r7, #32]
 8004eba:	60da      	str	r2, [r3, #12]
 8004ebc:	e0c8      	b.n	8005050 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ec4:	e0c4      	b.n	8005050 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ece:	d167      	bne.n	8004fa0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d828      	bhi.n	8004f2a <UART_SetConfig+0x43e>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0x3f4>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	08004f2b 	.word	0x08004f2b
 8004ef0:	08004f1b 	.word	0x08004f1b
 8004ef4:	08004f2b 	.word	0x08004f2b
 8004ef8:	08004f2b 	.word	0x08004f2b
 8004efc:	08004f2b 	.word	0x08004f2b
 8004f00:	08004f23 	.word	0x08004f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f04:	f7fd feee 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f0a:	e014      	b.n	8004f36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7fd ff00 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f12:	e010      	b.n	8004f36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f14:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <UART_SetConfig+0x594>)
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f18:	e00d      	b.n	8004f36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1a:	f7fd fe75 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8004f1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f20:	e009      	b.n	8004f36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f28:	e005      	b.n	8004f36 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8089 	beq.w	8005050 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	4a4e      	ldr	r2, [pc, #312]	; (800507c <UART_SetConfig+0x590>)
 8004f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f50:	005a      	lsls	r2, r3, #1
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	441a      	add	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d916      	bls.n	8004f98 <UART_SetConfig+0x4ac>
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d212      	bcs.n	8004f98 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f023 030f 	bic.w	r3, r3, #15
 8004f7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	8bfb      	ldrh	r3, [r7, #30]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	8bfa      	ldrh	r2, [r7, #30]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e05b      	b.n	8005050 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f9e:	e057      	b.n	8005050 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d828      	bhi.n	8004ffa <UART_SetConfig+0x50e>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x4c4>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fd fe86 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fda:	e014      	b.n	8005006 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fd fe98 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fe2:	e010      	b.n	8005006 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b26      	ldr	r3, [pc, #152]	; (8005080 <UART_SetConfig+0x594>)
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fd fe0d 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005004:	bf00      	nop
    }

    if (pclk != 0U)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d021      	beq.n	8005050 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	4a1a      	ldr	r2, [pc, #104]	; (800507c <UART_SetConfig+0x590>)
 8005012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005016:	461a      	mov	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	fbb3 f2f2 	udiv	r2, r3, r2
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	441a      	add	r2, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b0f      	cmp	r3, #15
 8005034:	d909      	bls.n	800504a <UART_SetConfig+0x55e>
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503c:	d205      	bcs.n	800504a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	b29a      	uxth	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60da      	str	r2, [r3, #12]
 8005048:	e002      	b.n	8005050 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2201      	movs	r2, #1
 8005054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2201      	movs	r2, #1
 800505c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800506c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005070:	4618      	mov	r0, r3
 8005072:	3730      	adds	r7, #48	; 0x30
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	0800cecc 	.word	0x0800cecc
 8005080:	00f42400 	.word	0x00f42400

08005084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005182:	d10a      	bne.n	800519a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051d8:	f7fc fd70 	bl	8001cbc <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d10e      	bne.n	800520a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f82f 	bl	800525e <UART_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e025      	b.n	8005256 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b04      	cmp	r3, #4
 8005216:	d10e      	bne.n	8005236 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f819 	bl	800525e <UART_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e00f      	b.n	8005256 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b09c      	sub	sp, #112	; 0x70
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526e:	e0a9      	b.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	f000 80a5 	beq.w	80053c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fc fd1f 	bl	8001cbc <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <UART_WaitOnFlagUntilTimeout+0x32>
 800528a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528c:	2b00      	cmp	r3, #0
 800528e:	d140      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800529e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052a4:	667b      	str	r3, [r7, #100]	; 0x64
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e6      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	663b      	str	r3, [r7, #96]	; 0x60
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80052e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e069      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d051      	beq.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532e:	d149      	bne.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800534e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
 800535a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800535e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e6      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3308      	adds	r3, #8
 8005372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	613b      	str	r3, [r7, #16]
   return(result);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	66bb      	str	r3, [r7, #104]	; 0x68
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800538c:	623a      	str	r2, [r7, #32]
 800538e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	61bb      	str	r3, [r7, #24]
   return(result);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e5      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e010      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	429a      	cmp	r2, r3
 80053e0:	f43f af46 	beq.w	8005270 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3770      	adds	r7, #112	; 0x70
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_UARTEx_DisableFifoMode+0x16>
 8005400:	2302      	movs	r3, #2
 8005402:	e027      	b.n	8005454 <HAL_UARTEx_DisableFifoMode+0x66>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005432:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005474:	2302      	movs	r3, #2
 8005476:	e02d      	b.n	80054d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f84f 	bl	8005558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e02d      	b.n	8005550 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2224      	movs	r2, #36	; 0x24
 8005500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f811 	bl	8005558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005578:	e031      	b.n	80055de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800557a:	2308      	movs	r3, #8
 800557c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800557e:	2308      	movs	r3, #8
 8005580:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	0e5b      	lsrs	r3, r3, #25
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	0f5b      	lsrs	r3, r3, #29
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	7b3a      	ldrb	r2, [r7, #12]
 80055a6:	4911      	ldr	r1, [pc, #68]	; (80055ec <UARTEx_SetNbDataToProcess+0x94>)
 80055a8:	5c8a      	ldrb	r2, [r1, r2]
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055ae:	7b3a      	ldrb	r2, [r7, #12]
 80055b0:	490f      	ldr	r1, [pc, #60]	; (80055f0 <UARTEx_SetNbDataToProcess+0x98>)
 80055b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	7b7a      	ldrb	r2, [r7, #13]
 80055c4:	4909      	ldr	r1, [pc, #36]	; (80055ec <UARTEx_SetNbDataToProcess+0x94>)
 80055c6:	5c8a      	ldrb	r2, [r1, r2]
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055cc:	7b7a      	ldrb	r2, [r7, #13]
 80055ce:	4908      	ldr	r1, [pc, #32]	; (80055f0 <UARTEx_SetNbDataToProcess+0x98>)
 80055d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	0800cee4 	.word	0x0800cee4
 80055f0:	0800ceec 	.word	0x0800ceec

080055f4 <__NVIC_SetPriority>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	6039      	str	r1, [r7, #0]
 80055fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005604:	2b00      	cmp	r3, #0
 8005606:	db0a      	blt.n	800561e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	490c      	ldr	r1, [pc, #48]	; (8005640 <__NVIC_SetPriority+0x4c>)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	0112      	lsls	r2, r2, #4
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	440b      	add	r3, r1
 8005618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800561c:	e00a      	b.n	8005634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	4908      	ldr	r1, [pc, #32]	; (8005644 <__NVIC_SetPriority+0x50>)
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	3b04      	subs	r3, #4
 800562c:	0112      	lsls	r2, r2, #4
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	440b      	add	r3, r1
 8005632:	761a      	strb	r2, [r3, #24]
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	e000e100 	.word	0xe000e100
 8005644:	e000ed00 	.word	0xe000ed00

08005648 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <SysTick_Handler+0x1c>)
 800564e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005650:	f001 fdd4 	bl	80071fc <xTaskGetSchedulerState>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800565a:	f002 fbbd 	bl	8007dd8 <xPortSysTickHandler>
  }
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	e000e010 	.word	0xe000e010

08005668 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800566c:	2100      	movs	r1, #0
 800566e:	f06f 0004 	mvn.w	r0, #4
 8005672:	f7ff ffbf 	bl	80055f4 <__NVIC_SetPriority>
#endif
}
 8005676:	bf00      	nop
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005682:	f3ef 8305 	mrs	r3, IPSR
 8005686:	603b      	str	r3, [r7, #0]
  return(result);
 8005688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800568e:	f06f 0305 	mvn.w	r3, #5
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	e00c      	b.n	80056b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <osKernelInitialize+0x44>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <osKernelInitialize+0x44>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	e002      	b.n	80056b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b0:	687b      	ldr	r3, [r7, #4]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	2000149c 	.word	0x2000149c

080056c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ca:	f3ef 8305 	mrs	r3, IPSR
 80056ce:	603b      	str	r3, [r7, #0]
  return(result);
 80056d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <osKernelStart+0x1a>
    stat = osErrorISR;
 80056d6:	f06f 0305 	mvn.w	r3, #5
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e010      	b.n	8005700 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <osKernelStart+0x48>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d109      	bne.n	80056fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056e6:	f7ff ffbf 	bl	8005668 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056ea:	4b08      	ldr	r3, [pc, #32]	; (800570c <osKernelStart+0x48>)
 80056ec:	2202      	movs	r2, #2
 80056ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056f0:	f001 f928 	bl	8006944 <vTaskStartScheduler>
      stat = osOK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	e002      	b.n	8005700 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056fa:	f04f 33ff 	mov.w	r3, #4294967295
 80056fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005700:	687b      	ldr	r3, [r7, #4]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2000149c 	.word	0x2000149c

08005710 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b08e      	sub	sp, #56	; 0x38
 8005714:	af04      	add	r7, sp, #16
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005720:	f3ef 8305 	mrs	r3, IPSR
 8005724:	617b      	str	r3, [r7, #20]
  return(result);
 8005726:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005728:	2b00      	cmp	r3, #0
 800572a:	d17e      	bne.n	800582a <osThreadNew+0x11a>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d07b      	beq.n	800582a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005736:	2318      	movs	r3, #24
 8005738:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d045      	beq.n	80057d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <osThreadNew+0x48>
        name = attr->name;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <osThreadNew+0x6e>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b38      	cmp	r3, #56	; 0x38
 8005770:	d805      	bhi.n	800577e <osThreadNew+0x6e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <osThreadNew+0x72>
        return (NULL);
 800577e:	2300      	movs	r3, #0
 8005780:	e054      	b.n	800582c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00e      	beq.n	80057b8 <osThreadNew+0xa8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2bbb      	cmp	r3, #187	; 0xbb
 80057a0:	d90a      	bls.n	80057b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <osThreadNew+0xa8>
        mem = 1;
 80057b2:	2301      	movs	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e010      	b.n	80057da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10c      	bne.n	80057da <osThreadNew+0xca>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d108      	bne.n	80057da <osThreadNew+0xca>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <osThreadNew+0xca>
          mem = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	e001      	b.n	80057da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d110      	bne.n	8005802 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057e8:	9202      	str	r2, [sp, #8]
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 feb8 	bl	800656c <xTaskCreateStatic>
 80057fc:	4603      	mov	r3, r0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	e013      	b.n	800582a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d110      	bne.n	800582a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	b29a      	uxth	r2, r3
 800580c:	f107 0310 	add.w	r3, r7, #16
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 ff03 	bl	8006626 <xTaskCreate>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <osThreadNew+0x11a>
            hTask = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800582a:	693b      	ldr	r3, [r7, #16]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3728      	adds	r7, #40	; 0x28
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583c:	f3ef 8305 	mrs	r3, IPSR
 8005840:	60bb      	str	r3, [r7, #8]
  return(result);
 8005842:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <osDelay+0x1c>
    stat = osErrorISR;
 8005848:	f06f 0305 	mvn.w	r3, #5
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e007      	b.n	8005860 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <osDelay+0x2c>
      vTaskDelay(ticks);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 f83e 	bl	80068dc <vTaskDelay>
    }
  }

  return (stat);
 8005860:	68fb      	ldr	r3, [r7, #12]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800586a:	b580      	push	{r7, lr}
 800586c:	b08a      	sub	sp, #40	; 0x28
 800586e:	af02      	add	r7, sp, #8
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800587a:	f3ef 8305 	mrs	r3, IPSR
 800587e:	613b      	str	r3, [r7, #16]
  return(result);
 8005880:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005882:	2b00      	cmp	r3, #0
 8005884:	d15f      	bne.n	8005946 <osMessageQueueNew+0xdc>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05c      	beq.n	8005946 <osMessageQueueNew+0xdc>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d059      	beq.n	8005946 <osMessageQueueNew+0xdc>
    mem = -1;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d029      	beq.n	80058f2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <osMessageQueueNew+0x62>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b4f      	cmp	r3, #79	; 0x4f
 80058ac:	d90e      	bls.n	80058cc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	fb01 f303 	mul.w	r3, r1, r3
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <osMessageQueueNew+0x62>
        mem = 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e014      	b.n	80058f6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d110      	bne.n	80058f6 <osMessageQueueNew+0x8c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10c      	bne.n	80058f6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <osMessageQueueNew+0x8c>
          mem = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e001      	b.n	80058f6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10b      	bne.n	8005914 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2100      	movs	r1, #0
 8005906:	9100      	str	r1, [sp, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f970 	bl	8005bf0 <xQueueGenericCreateStatic>
 8005910:	61f8      	str	r0, [r7, #28]
 8005912:	e008      	b.n	8005926 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800591a:	2200      	movs	r2, #0
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f9de 	bl	8005ce0 <xQueueGenericCreate>
 8005924:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e001      	b.n	800593e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800593e:	6979      	ldr	r1, [r7, #20]
 8005940:	69f8      	ldr	r0, [r7, #28]
 8005942:	f000 fdb5 	bl	80064b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a07      	ldr	r2, [pc, #28]	; (800597c <vApplicationGetIdleTaskMemory+0x2c>)
 8005960:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4a06      	ldr	r2, [pc, #24]	; (8005980 <vApplicationGetIdleTaskMemory+0x30>)
 8005966:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	601a      	str	r2, [r3, #0]
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	200014a0 	.word	0x200014a0
 8005980:	2000155c 	.word	0x2000155c

08005984 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005994:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4a06      	ldr	r2, [pc, #24]	; (80059b4 <vApplicationGetTimerTaskMemory+0x30>)
 800599a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a2:	601a      	str	r2, [r3, #0]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	2000175c 	.word	0x2000175c
 80059b4:	20001818 	.word	0x20001818

080059b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f103 0208 	add.w	r2, r3, #8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f103 0208 	add.w	r2, r3, #8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f103 0208 	add.w	r2, r3, #8
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d103      	bne.n	8005a7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e00c      	b.n	8005a94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e002      	b.n	8005a88 <vListInsert+0x2e>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d2f6      	bcs.n	8005a82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6892      	ldr	r2, [r2, #8]
 8005ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6852      	ldr	r2, [r2, #4]
 8005aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d103      	bne.n	8005b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	1e5a      	subs	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b4a:	f002 f8b3 	bl	8007cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	441a      	add	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	68f9      	ldr	r1, [r7, #12]
 8005b7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	441a      	add	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	22ff      	movs	r2, #255	; 0xff
 8005b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d114      	bne.n	8005bca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01a      	beq.n	8005bde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3310      	adds	r3, #16
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f963 	bl	8006e78 <xTaskRemoveFromEventList>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <xQueueGenericReset+0xcc>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	e009      	b.n	8005bde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3310      	adds	r3, #16
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fef2 	bl	80059b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff feed 	bl	80059b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bde:	f002 f899 	bl	8007d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005be2:	2301      	movs	r3, #1
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	; 0x38
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <xQueueGenericCreateStatic+0x52>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <xQueueGenericCreateStatic+0x56>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xQueueGenericCreateStatic+0x58>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	623b      	str	r3, [r7, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <xQueueGenericCreateStatic+0x7e>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <xQueueGenericCreateStatic+0x82>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <xQueueGenericCreateStatic+0x84>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	61fb      	str	r3, [r7, #28]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c8e:	2350      	movs	r3, #80	; 0x50
 8005c90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b50      	cmp	r3, #80	; 0x50
 8005c96:	d00a      	beq.n	8005cae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	61bb      	str	r3, [r7, #24]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f83f 	bl	8005d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3730      	adds	r7, #48	; 0x30
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	3350      	adds	r3, #80	; 0x50
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f002 f8ed 	bl	8007ef8 <pvPortMalloc>
 8005d1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3350      	adds	r3, #80	; 0x50
 8005d2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d38:	79fa      	ldrb	r2, [r7, #7]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f805 	bl	8005d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d82:	2101      	movs	r1, #1
 8005d84:	69b8      	ldr	r0, [r7, #24]
 8005d86:	f7ff fecb 	bl	8005b20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005daa:	2300      	movs	r3, #0
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericSend+0x32>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <xQueueGenericSend+0x40>
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <xQueueGenericSend+0x44>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <xQueueGenericSend+0x46>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <xQueueGenericSend+0x60>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d103      	bne.n	8005e0a <xQueueGenericSend+0x6e>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <xQueueGenericSend+0x72>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueGenericSend+0x74>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericSend+0x8e>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2a:	f001 f9e7 	bl	80071fc <xTaskGetSchedulerState>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <xQueueGenericSend+0x9e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <xQueueGenericSend+0xa2>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueGenericSend+0xa4>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61fb      	str	r3, [r7, #28]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e5a:	f001 ff2b 	bl	8007cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <xQueueGenericSend+0xd4>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d129      	bne.n	8005ec4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e76:	f000 fa0b 	bl	8006290 <prvCopyDataToQueue>
 8005e7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fff5 	bl	8006e78 <xTaskRemoveFromEventList>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e94:	4b3f      	ldr	r3, [pc, #252]	; (8005f94 <xQueueGenericSend+0x1f8>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	e00a      	b.n	8005ebc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005eac:	4b39      	ldr	r3, [pc, #228]	; (8005f94 <xQueueGenericSend+0x1f8>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ebc:	f001 ff2a 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e063      	b.n	8005f8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eca:	f001 ff23 	bl	8007d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e05c      	b.n	8005f8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 f82f 	bl	8006f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ee6:	f001 ff15 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eea:	f000 fd9b 	bl	8006a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eee:	f001 fee1 	bl	8007cb4 <vPortEnterCritical>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef8:	b25b      	sxtb	r3, r3
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d103      	bne.n	8005f08 <xQueueGenericSend+0x16c>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSend+0x182>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f1e:	f001 fef9 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f22:	1d3a      	adds	r2, r7, #4
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f81e 	bl	8006f6c <xTaskCheckForTimeOut>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d124      	bne.n	8005f80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f38:	f000 faa2 	bl	8006480 <prvIsQueueFull>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	3310      	adds	r3, #16
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 ff44 	bl	8006dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f52:	f000 fa2d 	bl	80063b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f56:	f000 fd73 	bl	8006a40 <xTaskResumeAll>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f47f af7c 	bne.w	8005e5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <xQueueGenericSend+0x1f8>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	e772      	b.n	8005e5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f76:	f000 fa1b 	bl	80063b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f7a:	f000 fd61 	bl	8006a40 <xTaskResumeAll>
 8005f7e:	e76c      	b.n	8005e5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f82:	f000 fa15 	bl	80063b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f86:	f000 fd5b 	bl	8006a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3738      	adds	r7, #56	; 0x38
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b090      	sub	sp, #64	; 0x40
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d103      	bne.n	8005fd4 <xQueueGenericSendFromISR+0x3c>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <xQueueGenericSendFromISR+0x40>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <xQueueGenericSendFromISR+0x42>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d103      	bne.n	8006002 <xQueueGenericSendFromISR+0x6a>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <xQueueGenericSendFromISR+0x6e>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <xQueueGenericSendFromISR+0x70>
 8006006:	2300      	movs	r3, #0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10a      	bne.n	8006022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	623b      	str	r3, [r7, #32]
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006022:	f001 ff29 	bl	8007e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006026:	f3ef 8211 	mrs	r2, BASEPRI
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	61fa      	str	r2, [r7, #28]
 800603c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800603e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <xQueueGenericSendFromISR+0xbc>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d12f      	bne.n	80060b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800606a:	f000 f911 	bl	8006290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800606e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d112      	bne.n	800609e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	d016      	beq.n	80060ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	3324      	adds	r3, #36	; 0x24
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fef7 	bl	8006e78 <xTaskRemoveFromEventList>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00e      	beq.n	80060ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e007      	b.n	80060ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800609e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060a2:	3301      	adds	r3, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	b25a      	sxtb	r2, r3
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060ae:	2301      	movs	r3, #1
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060b2:	e001      	b.n	80060b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3740      	adds	r7, #64	; 0x40
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	; 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060dc:	2300      	movs	r3, #0
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <xQueueReceive+0x30>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	623b      	str	r3, [r7, #32]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <xQueueReceive+0x3e>
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <xQueueReceive+0x42>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <xQueueReceive+0x44>
 8006112:	2300      	movs	r3, #0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <xQueueReceive+0x5e>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	61fb      	str	r3, [r7, #28]
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800612e:	f001 f865 	bl	80071fc <xTaskGetSchedulerState>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <xQueueReceive+0x6e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <xQueueReceive+0x72>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueReceive+0x74>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueReceive+0x8e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61bb      	str	r3, [r7, #24]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800615e:	f001 fda9 	bl	8007cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01f      	beq.n	80061ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006172:	f000 f8f7 	bl	8006364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	1e5a      	subs	r2, r3, #1
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00f      	beq.n	80061a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	3310      	adds	r3, #16
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fe74 	bl	8006e78 <xTaskRemoveFromEventList>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006196:	4b3d      	ldr	r3, [pc, #244]	; (800628c <xQueueReceive+0x1bc>)
 8006198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061a6:	f001 fdb5 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e069      	b.n	8006282 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061b4:	f001 fdae 	bl	8007d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e062      	b.n	8006282 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061c2:	f107 0310 	add.w	r3, r7, #16
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 feba 	bl	8006f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061d0:	f001 fda0 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061d4:	f000 fc26 	bl	8006a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061d8:	f001 fd6c 	bl	8007cb4 <vPortEnterCritical>
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e2:	b25b      	sxtb	r3, r3
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d103      	bne.n	80061f2 <xQueueReceive+0x122>
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d103      	bne.n	8006208 <xQueueReceive+0x138>
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006208:	f001 fd84 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800620c:	1d3a      	adds	r2, r7, #4
 800620e:	f107 0310 	add.w	r3, r7, #16
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fea9 	bl	8006f6c <xTaskCheckForTimeOut>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d123      	bne.n	8006268 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006222:	f000 f917 	bl	8006454 <prvIsQueueEmpty>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d017      	beq.n	800625c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4611      	mov	r1, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fdcf 	bl	8006dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800623a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623c:	f000 f8b8 	bl	80063b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006240:	f000 fbfe 	bl	8006a40 <xTaskResumeAll>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d189      	bne.n	800615e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800624a:	4b10      	ldr	r3, [pc, #64]	; (800628c <xQueueReceive+0x1bc>)
 800624c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	e780      	b.n	800615e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800625c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625e:	f000 f8a7 	bl	80063b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006262:	f000 fbed 	bl	8006a40 <xTaskResumeAll>
 8006266:	e77a      	b.n	800615e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626a:	f000 f8a1 	bl	80063b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800626e:	f000 fbe7 	bl	8006a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	f000 f8ee 	bl	8006454 <prvIsQueueEmpty>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	f43f af6f 	beq.w	800615e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006280:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006282:	4618      	mov	r0, r3
 8006284:	3730      	adds	r7, #48	; 0x30
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	e000ed04 	.word	0xe000ed04

08006290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d14d      	bne.n	8006352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 ffbc 	bl	8007238 <xTaskPriorityDisinherit>
 80062c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	e043      	b.n	8006352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d119      	bne.n	8006304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6858      	ldr	r0, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	461a      	mov	r2, r3
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	f002 f919 	bl	8008512 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d32b      	bcc.n	8006352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	e026      	b.n	8006352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68d8      	ldr	r0, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	461a      	mov	r2, r3
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	f002 f8ff 	bl	8008512 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	425b      	negs	r3, r3
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d207      	bcs.n	8006340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	425b      	negs	r3, r3
 800633a:	441a      	add	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d105      	bne.n	8006352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3b01      	subs	r3, #1
 8006350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	441a      	add	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	d303      	bcc.n	8006398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68d9      	ldr	r1, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	461a      	mov	r2, r3
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f002 f8b5 	bl	8008512 <memcpy>
	}
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063b8:	f001 fc7c 	bl	8007cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063c4:	e011      	b.n	80063ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d012      	beq.n	80063f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3324      	adds	r3, #36	; 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fd50 	bl	8006e78 <xTaskRemoveFromEventList>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063de:	f000 fe27 	bl	8007030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dce9      	bgt.n	80063c6 <prvUnlockQueue+0x16>
 80063f2:	e000      	b.n	80063f6 <prvUnlockQueue+0x46>
					break;
 80063f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	22ff      	movs	r2, #255	; 0xff
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063fe:	f001 fc89 	bl	8007d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006402:	f001 fc57 	bl	8007cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800640c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800640e:	e011      	b.n	8006434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d012      	beq.n	800643e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3310      	adds	r3, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fd2b 	bl	8006e78 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006428:	f000 fe02 	bl	8007030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	3b01      	subs	r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dce9      	bgt.n	8006410 <prvUnlockQueue+0x60>
 800643c:	e000      	b.n	8006440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800643e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006448:	f001 fc64 	bl	8007d14 <vPortExitCritical>
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800645c:	f001 fc2a 	bl	8007cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006468:	2301      	movs	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e001      	b.n	8006472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006472:	f001 fc4f 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006488:	f001 fc14 	bl	8007cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	429a      	cmp	r2, r3
 8006496:	d102      	bne.n	800649e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e001      	b.n	80064a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064a2:	f001 fc37 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e014      	b.n	80064ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064c0:	4a0f      	ldr	r2, [pc, #60]	; (8006500 <vQueueAddToRegistry+0x50>)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064cc:	490c      	ldr	r1, [pc, #48]	; (8006500 <vQueueAddToRegistry+0x50>)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <vQueueAddToRegistry+0x50>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064e2:	e006      	b.n	80064f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b07      	cmp	r3, #7
 80064ee:	d9e7      	bls.n	80064c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20001c18 	.word	0x20001c18

08006504 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006514:	f001 fbce 	bl	8007cb4 <vPortEnterCritical>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800651e:	b25b      	sxtb	r3, r3
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d103      	bne.n	800652e <vQueueWaitForMessageRestricted+0x2a>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006534:	b25b      	sxtb	r3, r3
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d103      	bne.n	8006544 <vQueueWaitForMessageRestricted+0x40>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006544:	f001 fbe6 	bl	8007d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fc61 	bl	8006e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800655e:	6978      	ldr	r0, [r7, #20]
 8006560:	f7ff ff26 	bl	80063b0 <prvUnlockQueue>
	}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08e      	sub	sp, #56	; 0x38
 8006570:	af04      	add	r7, sp, #16
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800657a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	623b      	str	r3, [r7, #32]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	61fb      	str	r3, [r7, #28]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065b2:	23bc      	movs	r3, #188	; 0xbc
 80065b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2bbc      	cmp	r3, #188	; 0xbc
 80065ba:	d00a      	beq.n	80065d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	61bb      	str	r3, [r7, #24]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01e      	beq.n	8006618 <xTaskCreateStatic+0xac>
 80065da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065f2:	2300      	movs	r3, #0
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	f107 0314 	add.w	r3, r7, #20
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f850 	bl	80066b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006612:	f000 f8f3 	bl	80067fc <prvAddNewTaskToReadyList>
 8006616:	e001      	b.n	800661c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800661c:	697b      	ldr	r3, [r7, #20]
	}
 800661e:	4618      	mov	r0, r3
 8006620:	3728      	adds	r7, #40	; 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08c      	sub	sp, #48	; 0x30
 800662a:	af04      	add	r7, sp, #16
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fc5c 	bl	8007ef8 <pvPortMalloc>
 8006640:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00e      	beq.n	8006666 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006648:	20bc      	movs	r0, #188	; 0xbc
 800664a:	f001 fc55 	bl	8007ef8 <pvPortMalloc>
 800664e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
 800665c:	e005      	b.n	800666a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800665e:	6978      	ldr	r0, [r7, #20]
 8006660:	f001 fd16 	bl	8008090 <vPortFree>
 8006664:	e001      	b.n	800666a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	2300      	movs	r3, #0
 800667c:	9303      	str	r3, [sp, #12]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	9302      	str	r3, [sp, #8]
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f80e 	bl	80066b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006694:	69f8      	ldr	r0, [r7, #28]
 8006696:	f000 f8b1 	bl	80067fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800669a:	2301      	movs	r3, #1
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e002      	b.n	80066a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066a0:	f04f 33ff 	mov.w	r3, #4294967295
 80066a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066a6:	69bb      	ldr	r3, [r7, #24]
	}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	461a      	mov	r2, r3
 80066c8:	21a5      	movs	r1, #165	; 0xa5
 80066ca:	f001 ff30 	bl	800852e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066d8:	3b01      	subs	r3, #1
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f023 0307 	bic.w	r3, r3, #7
 80066e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <prvInitialiseNewTask+0x58>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	617b      	str	r3, [r7, #20]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01f      	beq.n	800674e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	e012      	b.n	800673a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	7819      	ldrb	r1, [r3, #0]
 800671c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	3334      	adds	r3, #52	; 0x34
 8006724:	460a      	mov	r2, r1
 8006726:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b0f      	cmp	r3, #15
 800673e:	d9e9      	bls.n	8006714 <prvInitialiseNewTask+0x64>
 8006740:	e000      	b.n	8006744 <prvInitialiseNewTask+0x94>
			{
				break;
 8006742:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800674c:	e003      	b.n	8006756 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	2b37      	cmp	r3, #55	; 0x37
 800675a:	d901      	bls.n	8006760 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800675c:	2337      	movs	r3, #55	; 0x37
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2200      	movs	r2, #0
 8006770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	3304      	adds	r3, #4
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff f93e 	bl	80059f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	3318      	adds	r3, #24
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff f939 	bl	80059f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	3354      	adds	r3, #84	; 0x54
 80067b0:	2260      	movs	r2, #96	; 0x60
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 feba 	bl	800852e <memset>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	4a0c      	ldr	r2, [pc, #48]	; (80067f0 <prvInitialiseNewTask+0x140>)
 80067be:	659a      	str	r2, [r3, #88]	; 0x58
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <prvInitialiseNewTask+0x144>)
 80067c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	4a0b      	ldr	r2, [pc, #44]	; (80067f8 <prvInitialiseNewTask+0x148>)
 80067ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	69b8      	ldr	r0, [r7, #24]
 80067d2:	f001 f941 	bl	8007a58 <pxPortInitialiseStack>
 80067d6:	4602      	mov	r2, r0
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e8:	bf00      	nop
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	0800cf14 	.word	0x0800cf14
 80067f4:	0800cf34 	.word	0x0800cf34
 80067f8:	0800cef4 	.word	0x0800cef4

080067fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006804:	f001 fa56 	bl	8007cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006808:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <prvAddNewTaskToReadyList+0xc4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	4a2c      	ldr	r2, [pc, #176]	; (80068c0 <prvAddNewTaskToReadyList+0xc4>)
 8006810:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006812:	4b2c      	ldr	r3, [pc, #176]	; (80068c4 <prvAddNewTaskToReadyList+0xc8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d109      	bne.n	800682e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800681a:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <prvAddNewTaskToReadyList+0xc8>)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006820:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <prvAddNewTaskToReadyList+0xc4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d110      	bne.n	800684a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006828:	f000 fc26 	bl	8007078 <prvInitialiseTaskLists>
 800682c:	e00d      	b.n	800684a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800682e:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <prvAddNewTaskToReadyList+0xcc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006836:	4b23      	ldr	r3, [pc, #140]	; (80068c4 <prvAddNewTaskToReadyList+0xc8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d802      	bhi.n	800684a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006844:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <prvAddNewTaskToReadyList+0xc8>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800684a:	4b20      	ldr	r3, [pc, #128]	; (80068cc <prvAddNewTaskToReadyList+0xd0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3301      	adds	r3, #1
 8006850:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <prvAddNewTaskToReadyList+0xd0>)
 8006852:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006854:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <prvAddNewTaskToReadyList+0xd0>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <prvAddNewTaskToReadyList+0xd4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d903      	bls.n	8006870 <prvAddNewTaskToReadyList+0x74>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <prvAddNewTaskToReadyList+0xd4>)
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <prvAddNewTaskToReadyList+0xd8>)
 800687e:	441a      	add	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7ff f8c3 	bl	8005a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800688c:	f001 fa42 	bl	8007d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <prvAddNewTaskToReadyList+0xcc>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00e      	beq.n	80068b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <prvAddNewTaskToReadyList+0xc8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d207      	bcs.n	80068b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <prvAddNewTaskToReadyList+0xdc>)
 80068a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	2000212c 	.word	0x2000212c
 80068c4:	20001c58 	.word	0x20001c58
 80068c8:	20002138 	.word	0x20002138
 80068cc:	20002148 	.word	0x20002148
 80068d0:	20002134 	.word	0x20002134
 80068d4:	20001c5c 	.word	0x20001c5c
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d017      	beq.n	800691e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <vTaskDelay+0x60>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <vTaskDelay+0x30>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60bb      	str	r3, [r7, #8]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800690c:	f000 f88a 	bl	8006a24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006910:	2100      	movs	r1, #0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fcfe 	bl	8007314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006918:	f000 f892 	bl	8006a40 <xTaskResumeAll>
 800691c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d107      	bne.n	8006934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <vTaskDelay+0x64>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20002154 	.word	0x20002154
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	; 0x28
 8006948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006952:	463a      	mov	r2, r7
 8006954:	1d39      	adds	r1, r7, #4
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fff8 	bl	8005950 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	9202      	str	r2, [sp, #8]
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	2300      	movs	r3, #0
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	460a      	mov	r2, r1
 8006972:	4924      	ldr	r1, [pc, #144]	; (8006a04 <vTaskStartScheduler+0xc0>)
 8006974:	4824      	ldr	r0, [pc, #144]	; (8006a08 <vTaskStartScheduler+0xc4>)
 8006976:	f7ff fdf9 	bl	800656c <xTaskCreateStatic>
 800697a:	4603      	mov	r3, r0
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <vTaskStartScheduler+0xc8>)
 800697e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006980:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <vTaskStartScheduler+0xc8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006988:	2301      	movs	r3, #1
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e001      	b.n	8006992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d102      	bne.n	800699e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006998:	f000 fd10 	bl	80073bc <xTimerCreateTimerTask>
 800699c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d11b      	bne.n	80069dc <vTaskStartScheduler+0x98>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	613b      	str	r3, [r7, #16]
}
 80069b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <vTaskStartScheduler+0xcc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3354      	adds	r3, #84	; 0x54
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <vTaskStartScheduler+0xd0>)
 80069c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <vTaskStartScheduler+0xd4>)
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <vTaskStartScheduler+0xd8>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069d0:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <vTaskStartScheduler+0xdc>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069d6:	f001 f8cb 	bl	8007b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069da:	e00e      	b.n	80069fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d10a      	bne.n	80069fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <vTaskStartScheduler+0xb4>
}
 80069fa:	bf00      	nop
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	0800cd88 	.word	0x0800cd88
 8006a08:	08007049 	.word	0x08007049
 8006a0c:	20002150 	.word	0x20002150
 8006a10:	20001c58 	.word	0x20001c58
 8006a14:	20000010 	.word	0x20000010
 8006a18:	2000214c 	.word	0x2000214c
 8006a1c:	20002138 	.word	0x20002138
 8006a20:	20002130 	.word	0x20002130

08006a24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a28:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <vTaskSuspendAll+0x18>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	4a03      	ldr	r2, [pc, #12]	; (8006a3c <vTaskSuspendAll+0x18>)
 8006a30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	20002154 	.word	0x20002154

08006a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a4e:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <xTaskResumeAll+0x118>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <xTaskResumeAll+0x2c>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	603b      	str	r3, [r7, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a6c:	f001 f922 	bl	8007cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a70:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <xTaskResumeAll+0x118>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4a38      	ldr	r2, [pc, #224]	; (8006b58 <xTaskResumeAll+0x118>)
 8006a78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a7a:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <xTaskResumeAll+0x118>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d162      	bne.n	8006b48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a82:	4b36      	ldr	r3, [pc, #216]	; (8006b5c <xTaskResumeAll+0x11c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d05e      	beq.n	8006b48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a8a:	e02f      	b.n	8006aec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <xTaskResumeAll+0x120>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3318      	adds	r3, #24
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff f817 	bl	8005acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f812 	bl	8005acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <xTaskResumeAll+0x124>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d903      	bls.n	8006abc <xTaskResumeAll+0x7c>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <xTaskResumeAll+0x124>)
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4a27      	ldr	r2, [pc, #156]	; (8006b68 <xTaskResumeAll+0x128>)
 8006aca:	441a      	add	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f7fe ff9d 	bl	8005a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4b23      	ldr	r3, [pc, #140]	; (8006b6c <xTaskResumeAll+0x12c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ae6:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <xTaskResumeAll+0x130>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aec:	4b1c      	ldr	r3, [pc, #112]	; (8006b60 <xTaskResumeAll+0x120>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1cb      	bne.n	8006a8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006afa:	f000 fb5f 	bl	80071bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006afe:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <xTaskResumeAll+0x134>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d010      	beq.n	8006b2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b0a:	f000 f847 	bl	8006b9c <xTaskIncrementTick>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b14:	4b16      	ldr	r3, [pc, #88]	; (8006b70 <xTaskResumeAll+0x130>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f1      	bne.n	8006b0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <xTaskResumeAll+0x134>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b2c:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <xTaskResumeAll+0x130>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <xTaskResumeAll+0x138>)
 8006b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b48:	f001 f8e4 	bl	8007d14 <vPortExitCritical>

	return xAlreadyYielded;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20002154 	.word	0x20002154
 8006b5c:	2000212c 	.word	0x2000212c
 8006b60:	200020ec 	.word	0x200020ec
 8006b64:	20002134 	.word	0x20002134
 8006b68:	20001c5c 	.word	0x20001c5c
 8006b6c:	20001c58 	.word	0x20001c58
 8006b70:	20002140 	.word	0x20002140
 8006b74:	2000213c 	.word	0x2000213c
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <xTaskGetTickCount+0x1c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b88:	687b      	ldr	r3, [r7, #4]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20002130 	.word	0x20002130

08006b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba6:	4b4f      	ldr	r3, [pc, #316]	; (8006ce4 <xTaskIncrementTick+0x148>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 808f 	bne.w	8006cce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bb0:	4b4d      	ldr	r3, [pc, #308]	; (8006ce8 <xTaskIncrementTick+0x14c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bb8:	4a4b      	ldr	r2, [pc, #300]	; (8006ce8 <xTaskIncrementTick+0x14c>)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d120      	bne.n	8006c06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bc4:	4b49      	ldr	r3, [pc, #292]	; (8006cec <xTaskIncrementTick+0x150>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <xTaskIncrementTick+0x46>
 8006be4:	4b41      	ldr	r3, [pc, #260]	; (8006cec <xTaskIncrementTick+0x150>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <xTaskIncrementTick+0x154>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a3f      	ldr	r2, [pc, #252]	; (8006cec <xTaskIncrementTick+0x150>)
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4a3f      	ldr	r2, [pc, #252]	; (8006cf0 <xTaskIncrementTick+0x154>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	4b3e      	ldr	r3, [pc, #248]	; (8006cf4 <xTaskIncrementTick+0x158>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a3d      	ldr	r2, [pc, #244]	; (8006cf4 <xTaskIncrementTick+0x158>)
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	f000 fadb 	bl	80071bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c06:	4b3c      	ldr	r3, [pc, #240]	; (8006cf8 <xTaskIncrementTick+0x15c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d349      	bcc.n	8006ca4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c10:	4b36      	ldr	r3, [pc, #216]	; (8006cec <xTaskIncrementTick+0x150>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <xTaskIncrementTick+0x15c>)
 8006c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c20:	601a      	str	r2, [r3, #0]
					break;
 8006c22:	e03f      	b.n	8006ca4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c24:	4b31      	ldr	r3, [pc, #196]	; (8006cec <xTaskIncrementTick+0x150>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d203      	bcs.n	8006c44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c3c:	4a2e      	ldr	r2, [pc, #184]	; (8006cf8 <xTaskIncrementTick+0x15c>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c42:	e02f      	b.n	8006ca4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe ff3f 	bl	8005acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	3318      	adds	r3, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe ff36 	bl	8005acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <xTaskIncrementTick+0x160>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d903      	bls.n	8006c74 <xTaskIncrementTick+0xd8>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <xTaskIncrementTick+0x160>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a1f      	ldr	r2, [pc, #124]	; (8006d00 <xTaskIncrementTick+0x164>)
 8006c82:	441a      	add	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fec1 	bl	8005a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <xTaskIncrementTick+0x168>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d3b8      	bcc.n	8006c10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca2:	e7b5      	b.n	8006c10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ca4:	4b17      	ldr	r3, [pc, #92]	; (8006d04 <xTaskIncrementTick+0x168>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	4915      	ldr	r1, [pc, #84]	; (8006d00 <xTaskIncrementTick+0x164>)
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d901      	bls.n	8006cc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cc0:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <xTaskIncrementTick+0x16c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e004      	b.n	8006cd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <xTaskIncrementTick+0x170>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <xTaskIncrementTick+0x170>)
 8006cd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cd8:	697b      	ldr	r3, [r7, #20]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20002154 	.word	0x20002154
 8006ce8:	20002130 	.word	0x20002130
 8006cec:	200020e4 	.word	0x200020e4
 8006cf0:	200020e8 	.word	0x200020e8
 8006cf4:	20002144 	.word	0x20002144
 8006cf8:	2000214c 	.word	0x2000214c
 8006cfc:	20002134 	.word	0x20002134
 8006d00:	20001c5c 	.word	0x20001c5c
 8006d04:	20001c58 	.word	0x20001c58
 8006d08:	20002140 	.word	0x20002140
 8006d0c:	2000213c 	.word	0x2000213c

08006d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <vTaskSwitchContext+0xb0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d1e:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <vTaskSwitchContext+0xb4>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d24:	e046      	b.n	8006db4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <vTaskSwitchContext+0xb4>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2c:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <vTaskSwitchContext+0xb8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e010      	b.n	8006d56 <vTaskSwitchContext+0x46>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <vTaskSwitchContext+0x40>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	607b      	str	r3, [r7, #4]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskSwitchContext+0x3e>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	491d      	ldr	r1, [pc, #116]	; (8006dcc <vTaskSwitchContext+0xbc>)
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0e4      	beq.n	8006d34 <vTaskSwitchContext+0x24>
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <vTaskSwitchContext+0xbc>)
 8006d76:	4413      	add	r3, r2
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	605a      	str	r2, [r3, #4]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d104      	bne.n	8006d9a <vTaskSwitchContext+0x8a>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4a0b      	ldr	r2, [pc, #44]	; (8006dd0 <vTaskSwitchContext+0xc0>)
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <vTaskSwitchContext+0xb8>)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <vTaskSwitchContext+0xc0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3354      	adds	r3, #84	; 0x54
 8006db0:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <vTaskSwitchContext+0xc4>)
 8006db2:	6013      	str	r3, [r2, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20002154 	.word	0x20002154
 8006dc4:	20002140 	.word	0x20002140
 8006dc8:	20002134 	.word	0x20002134
 8006dcc:	20001c5c 	.word	0x20001c5c
 8006dd0:	20001c58 	.word	0x20001c58
 8006dd4:	20000010 	.word	0x20000010

08006dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <vTaskPlaceOnEventList+0x44>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3318      	adds	r3, #24
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe fe27 	bl	8005a5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f000 fa80 	bl	8007314 <prvAddCurrentTaskToDelayedList>
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20001c58 	.word	0x20001c58

08006e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7fe fdde 	bl	8005a12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f000 fa55 	bl	8007314 <prvAddCurrentTaskToDelayedList>
	}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20001c58 	.word	0x20001c58

08006e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fe0f 	bl	8005acc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eae:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <xTaskRemoveFromEventList+0xb0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11d      	bne.n	8006ef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fe06 	bl	8005acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <xTaskRemoveFromEventList+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d903      	bls.n	8006ed4 <xTaskRemoveFromEventList+0x5c>
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <xTaskRemoveFromEventList+0xb4>)
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <xTaskRemoveFromEventList+0xb8>)
 8006ee2:	441a      	add	r2, r3
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f7fe fd91 	bl	8005a12 <vListInsertEnd>
 8006ef0:	e005      	b.n	8006efe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3318      	adds	r3, #24
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	480e      	ldr	r0, [pc, #56]	; (8006f34 <xTaskRemoveFromEventList+0xbc>)
 8006efa:	f7fe fd8a 	bl	8005a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <xTaskRemoveFromEventList+0xc0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d905      	bls.n	8006f18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <xTaskRemoveFromEventList+0xc4>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e001      	b.n	8006f1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f1c:	697b      	ldr	r3, [r7, #20]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20002154 	.word	0x20002154
 8006f2c:	20002134 	.word	0x20002134
 8006f30:	20001c5c 	.word	0x20001c5c
 8006f34:	200020ec 	.word	0x200020ec
 8006f38:	20001c58 	.word	0x20001c58
 8006f3c:	20002140 	.word	0x20002140

08006f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <vTaskInternalSetTimeOutState+0x24>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <vTaskInternalSetTimeOutState+0x28>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20002144 	.word	0x20002144
 8006f68:	20002130 	.word	0x20002130

08006f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	613b      	str	r3, [r7, #16]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	60fb      	str	r3, [r7, #12]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fae:	f000 fe81 	bl	8007cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <xTaskCheckForTimeOut+0xbc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d102      	bne.n	8006fd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	e023      	b.n	800701a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b15      	ldr	r3, [pc, #84]	; (800702c <xTaskCheckForTimeOut+0xc0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d007      	beq.n	8006fee <xTaskCheckForTimeOut+0x82>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d302      	bcc.n	8006fee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	e015      	b.n	800701a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d20b      	bcs.n	8007010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ff9b 	bl	8006f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	e004      	b.n	800701a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007016:	2301      	movs	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800701a:	f000 fe7b 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 800701e:	69fb      	ldr	r3, [r7, #28]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20002130 	.word	0x20002130
 800702c:	20002144 	.word	0x20002144

08007030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007034:	4b03      	ldr	r3, [pc, #12]	; (8007044 <vTaskMissedYield+0x14>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20002140 	.word	0x20002140

08007048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007050:	f000 f852 	bl	80070f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <prvIdleTask+0x28>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d9f9      	bls.n	8007050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <prvIdleTask+0x2c>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800706c:	e7f0      	b.n	8007050 <prvIdleTask+0x8>
 800706e:	bf00      	nop
 8007070:	20001c5c 	.word	0x20001c5c
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
 8007082:	e00c      	b.n	800709e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <prvInitialiseTaskLists+0x60>)
 8007090:	4413      	add	r3, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fc90 	bl	80059b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3301      	adds	r3, #1
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b37      	cmp	r3, #55	; 0x37
 80070a2:	d9ef      	bls.n	8007084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070a4:	480d      	ldr	r0, [pc, #52]	; (80070dc <prvInitialiseTaskLists+0x64>)
 80070a6:	f7fe fc87 	bl	80059b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <prvInitialiseTaskLists+0x68>)
 80070ac:	f7fe fc84 	bl	80059b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070b0:	480c      	ldr	r0, [pc, #48]	; (80070e4 <prvInitialiseTaskLists+0x6c>)
 80070b2:	f7fe fc81 	bl	80059b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070b6:	480c      	ldr	r0, [pc, #48]	; (80070e8 <prvInitialiseTaskLists+0x70>)
 80070b8:	f7fe fc7e 	bl	80059b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070bc:	480b      	ldr	r0, [pc, #44]	; (80070ec <prvInitialiseTaskLists+0x74>)
 80070be:	f7fe fc7b 	bl	80059b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <prvInitialiseTaskLists+0x78>)
 80070c4:	4a05      	ldr	r2, [pc, #20]	; (80070dc <prvInitialiseTaskLists+0x64>)
 80070c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <prvInitialiseTaskLists+0x7c>)
 80070ca:	4a05      	ldr	r2, [pc, #20]	; (80070e0 <prvInitialiseTaskLists+0x68>)
 80070cc:	601a      	str	r2, [r3, #0]
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20001c5c 	.word	0x20001c5c
 80070dc:	200020bc 	.word	0x200020bc
 80070e0:	200020d0 	.word	0x200020d0
 80070e4:	200020ec 	.word	0x200020ec
 80070e8:	20002100 	.word	0x20002100
 80070ec:	20002118 	.word	0x20002118
 80070f0:	200020e4 	.word	0x200020e4
 80070f4:	200020e8 	.word	0x200020e8

080070f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070fe:	e019      	b.n	8007134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007100:	f000 fdd8 	bl	8007cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007104:	4b10      	ldr	r3, [pc, #64]	; (8007148 <prvCheckTasksWaitingTermination+0x50>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fcdb 	bl	8005acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007116:	4b0d      	ldr	r3, [pc, #52]	; (800714c <prvCheckTasksWaitingTermination+0x54>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3b01      	subs	r3, #1
 800711c:	4a0b      	ldr	r2, [pc, #44]	; (800714c <prvCheckTasksWaitingTermination+0x54>)
 800711e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <prvCheckTasksWaitingTermination+0x58>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3b01      	subs	r3, #1
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <prvCheckTasksWaitingTermination+0x58>)
 8007128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800712a:	f000 fdf3 	bl	8007d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f810 	bl	8007154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <prvCheckTasksWaitingTermination+0x58>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e1      	bne.n	8007100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20002100 	.word	0x20002100
 800714c:	2000212c 	.word	0x2000212c
 8007150:	20002114 	.word	0x20002114

08007154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3354      	adds	r3, #84	; 0x54
 8007160:	4618      	mov	r0, r3
 8007162:	f002 f909 	bl	8009378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007174:	4618      	mov	r0, r3
 8007176:	f000 ff8b 	bl	8008090 <vPortFree>
				vPortFree( pxTCB );
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 ff88 	bl	8008090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007180:	e018      	b.n	80071b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007188:	2b01      	cmp	r3, #1
 800718a:	d103      	bne.n	8007194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 ff7f 	bl	8008090 <vPortFree>
	}
 8007192:	e00f      	b.n	80071b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800719a:	2b02      	cmp	r3, #2
 800719c:	d00a      	beq.n	80071b4 <prvDeleteTCB+0x60>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60fb      	str	r3, [r7, #12]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <prvDeleteTCB+0x5e>
	}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c2:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <prvResetNextTaskUnblockTime+0x38>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <prvResetNextTaskUnblockTime+0x3c>)
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295
 80071d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071d4:	e008      	b.n	80071e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <prvResetNextTaskUnblockTime+0x38>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <prvResetNextTaskUnblockTime+0x3c>)
 80071e6:	6013      	str	r3, [r2, #0]
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	200020e4 	.word	0x200020e4
 80071f8:	2000214c 	.word	0x2000214c

080071fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <xTaskGetSchedulerState+0x34>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d102      	bne.n	8007210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800720a:	2301      	movs	r3, #1
 800720c:	607b      	str	r3, [r7, #4]
 800720e:	e008      	b.n	8007222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007210:	4b08      	ldr	r3, [pc, #32]	; (8007234 <xTaskGetSchedulerState+0x38>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007218:	2302      	movs	r3, #2
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	e001      	b.n	8007222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007222:	687b      	ldr	r3, [r7, #4]
	}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	20002138 	.word	0x20002138
 8007234:	20002154 	.word	0x20002154

08007238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d056      	beq.n	80072fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800724e:	4b2e      	ldr	r3, [pc, #184]	; (8007308 <xTaskPriorityDisinherit+0xd0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	429a      	cmp	r2, r3
 8007256:	d00a      	beq.n	800726e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fb      	str	r3, [r7, #12]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60bb      	str	r3, [r7, #8]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007290:	1e5a      	subs	r2, r3, #1
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729e:	429a      	cmp	r2, r3
 80072a0:	d02c      	beq.n	80072fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d128      	bne.n	80072fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fc0c 	bl	8005acc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <xTaskPriorityDisinherit+0xd4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d903      	bls.n	80072dc <xTaskPriorityDisinherit+0xa4>
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4a0c      	ldr	r2, [pc, #48]	; (800730c <xTaskPriorityDisinherit+0xd4>)
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4a09      	ldr	r2, [pc, #36]	; (8007310 <xTaskPriorityDisinherit+0xd8>)
 80072ea:	441a      	add	r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7fe fb8d 	bl	8005a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072fc:	697b      	ldr	r3, [r7, #20]
	}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001c58 	.word	0x20001c58
 800730c:	20002134 	.word	0x20002134
 8007310:	20001c5c 	.word	0x20001c5c

08007314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800731e:	4b21      	ldr	r3, [pc, #132]	; (80073a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007324:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3304      	adds	r3, #4
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fbce 	bl	8005acc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d10a      	bne.n	800734e <prvAddCurrentTaskToDelayedList+0x3a>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800733e:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4819      	ldr	r0, [pc, #100]	; (80073ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007348:	f7fe fb63 	bl	8005a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800734c:	e026      	b.n	800739c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4413      	add	r3, r2
 8007354:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	429a      	cmp	r2, r3
 8007364:	d209      	bcs.n	800737a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007366:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fe fb71 	bl	8005a5a <vListInsert>
}
 8007378:	e010      	b.n	800739c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737a:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7fe fb67 	bl	8005a5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d202      	bcs.n	800739c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20002130 	.word	0x20002130
 80073a8:	20001c58 	.word	0x20001c58
 80073ac:	20002118 	.word	0x20002118
 80073b0:	200020e8 	.word	0x200020e8
 80073b4:	200020e4 	.word	0x200020e4
 80073b8:	2000214c 	.word	0x2000214c

080073bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073c6:	f000 fb07 	bl	80079d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073ca:	4b1c      	ldr	r3, [pc, #112]	; (800743c <xTimerCreateTimerTask+0x80>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d021      	beq.n	8007416 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073da:	1d3a      	adds	r2, r7, #4
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe facd 	bl	8005984 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	9202      	str	r2, [sp, #8]
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	2302      	movs	r3, #2
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	460a      	mov	r2, r1
 80073fc:	4910      	ldr	r1, [pc, #64]	; (8007440 <xTimerCreateTimerTask+0x84>)
 80073fe:	4811      	ldr	r0, [pc, #68]	; (8007444 <xTimerCreateTimerTask+0x88>)
 8007400:	f7ff f8b4 	bl	800656c <xTaskCreateStatic>
 8007404:	4603      	mov	r3, r0
 8007406:	4a10      	ldr	r2, [pc, #64]	; (8007448 <xTimerCreateTimerTask+0x8c>)
 8007408:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <xTimerCreateTimerTask+0x8c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007412:	2301      	movs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	613b      	str	r3, [r7, #16]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20002188 	.word	0x20002188
 8007440:	0800cd90 	.word	0x0800cd90
 8007444:	08007581 	.word	0x08007581
 8007448:	2000218c 	.word	0x2000218c

0800744c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	623b      	str	r3, [r7, #32]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800747a:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <xTimerGenericCommand+0x98>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d02a      	beq.n	80074d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b05      	cmp	r3, #5
 8007492:	dc18      	bgt.n	80074c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007494:	f7ff feb2 	bl	80071fc <xTaskGetSchedulerState>
 8007498:	4603      	mov	r3, r0
 800749a:	2b02      	cmp	r3, #2
 800749c:	d109      	bne.n	80074b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800749e:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <xTimerGenericCommand+0x98>)
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	f107 0110 	add.w	r1, r7, #16
 80074a6:	2300      	movs	r3, #0
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	f7fe fc77 	bl	8005d9c <xQueueGenericSend>
 80074ae:	6278      	str	r0, [r7, #36]	; 0x24
 80074b0:	e012      	b.n	80074d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <xTimerGenericCommand+0x98>)
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f107 0110 	add.w	r1, r7, #16
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	f7fe fc6d 	bl	8005d9c <xQueueGenericSend>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
 80074c4:	e008      	b.n	80074d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <xTimerGenericCommand+0x98>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f107 0110 	add.w	r1, r7, #16
 80074ce:	2300      	movs	r3, #0
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	f7fe fd61 	bl	8005f98 <xQueueGenericSendFromISR>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3728      	adds	r7, #40	; 0x28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20002188 	.word	0x20002188

080074e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <prvProcessExpiredTimer+0x94>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fae3 	bl	8005acc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d022      	beq.n	800755a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	18d1      	adds	r1, r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f000 f8d1 	bl	80076c8 <prvInsertTimerInActiveList>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01f      	beq.n	800756c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800752c:	2300      	movs	r3, #0
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	2100      	movs	r1, #0
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	f7ff ff88 	bl	800744c <xTimerGenericCommand>
 800753c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d113      	bne.n	800756c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	6978      	ldr	r0, [r7, #20]
 8007572:	4798      	blx	r3
}
 8007574:	bf00      	nop
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20002180 	.word	0x20002180

08007580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f857 	bl	8007640 <prvGetNextExpireTime>
 8007592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f803 	bl	80075a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800759e:	f000 f8d5 	bl	800774c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a2:	e7f1      	b.n	8007588 <prvTimerTask+0x8>

080075a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075ae:	f7ff fa39 	bl	8006a24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f866 	bl	8007688 <prvSampleTimeNow>
 80075bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d130      	bne.n	8007626 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <prvProcessTimerOrBlockTask+0x3c>
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d806      	bhi.n	80075e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075d2:	f7ff fa35 	bl	8006a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ff85 	bl	80074e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075de:	e024      	b.n	800762a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <prvProcessTimerOrBlockTask+0x90>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <prvProcessTimerOrBlockTask+0x50>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <prvProcessTimerOrBlockTask+0x52>
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <prvProcessTimerOrBlockTask+0x94>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4619      	mov	r1, r3
 8007606:	f7fe ff7d 	bl	8006504 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800760a:	f7ff fa19 	bl	8006a40 <xTaskResumeAll>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <prvProcessTimerOrBlockTask+0x98>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
}
 8007624:	e001      	b.n	800762a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007626:	f7ff fa0b 	bl	8006a40 <xTaskResumeAll>
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20002184 	.word	0x20002184
 8007638:	20002188 	.word	0x20002188
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <prvGetNextExpireTime+0x44>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <prvGetNextExpireTime+0x16>
 8007652:	2201      	movs	r2, #1
 8007654:	e000      	b.n	8007658 <prvGetNextExpireTime+0x18>
 8007656:	2200      	movs	r2, #0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <prvGetNextExpireTime+0x44>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e001      	b.n	8007674 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20002180 	.word	0x20002180

08007688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007690:	f7ff fa74 	bl	8006b7c <xTaskGetTickCount>
 8007694:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <prvSampleTimeNow+0x3c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	429a      	cmp	r2, r3
 800769e:	d205      	bcs.n	80076ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076a0:	f000 f936 	bl	8007910 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e002      	b.n	80076b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076b2:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <prvSampleTimeNow+0x3c>)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20002190 	.word	0x20002190

080076c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d812      	bhi.n	8007714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d302      	bcc.n	8007702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e01b      	b.n	800773a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <prvInsertTimerInActiveList+0x7c>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7fe f9a4 	bl	8005a5a <vListInsert>
 8007712:	e012      	b.n	800773a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d206      	bcs.n	800772a <prvInsertTimerInActiveList+0x62>
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d302      	bcc.n	800772a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e007      	b.n	800773a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800772a:	4b07      	ldr	r3, [pc, #28]	; (8007748 <prvInsertTimerInActiveList+0x80>)
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7fe f990 	bl	8005a5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20002184 	.word	0x20002184
 8007748:	20002180 	.word	0x20002180

0800774c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	; 0x38
 8007750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007752:	e0ca      	b.n	80078ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da18      	bge.n	800778c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	3304      	adds	r3, #4
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	61fb      	str	r3, [r7, #28]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007782:	6850      	ldr	r0, [r2, #4]
 8007784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007786:	6892      	ldr	r2, [r2, #8]
 8007788:	4611      	mov	r1, r2
 800778a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f2c0 80aa 	blt.w	80078e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d004      	beq.n	80077aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	3304      	adds	r3, #4
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fe f991 	bl	8005acc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077aa:	463b      	mov	r3, r7
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff ff6b 	bl	8007688 <prvSampleTimeNow>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	f200 8097 	bhi.w	80078ea <prvProcessReceivedCommands+0x19e>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <prvProcessReceivedCommands+0x78>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077ed 	.word	0x080077ed
 80077d0:	08007861 	.word	0x08007861
 80077d4:	08007875 	.word	0x08007875
 80077d8:	080078bf 	.word	0x080078bf
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077ed 	.word	0x080077ed
 80077e4:	08007861 	.word	0x08007861
 80077e8:	08007875 	.word	0x08007875
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	18d1      	adds	r1, r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780c:	f7ff ff5c 	bl	80076c8 <prvInsertTimerInActiveList>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d069      	beq.n	80078ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d05e      	beq.n	80078ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	441a      	add	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	2100      	movs	r1, #0
 800783c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783e:	f7ff fe05 	bl	800744c <xTimerGenericCommand>
 8007842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d14f      	bne.n	80078ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	61bb      	str	r3, [r7, #24]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007872:	e03a      	b.n	80078ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	617b      	str	r3, [r7, #20]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	18d1      	adds	r1, r2, r3
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b8:	f7ff ff06 	bl	80076c8 <prvInsertTimerInActiveList>
					break;
 80078bc:	e015      	b.n	80078ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80078cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ce:	f000 fbdf 	bl	8008090 <vPortFree>
 80078d2:	e00a      	b.n	80078ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078e6:	e000      	b.n	80078ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <prvProcessReceivedCommands+0x1c0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	1d39      	adds	r1, r7, #4
 80078f0:	2200      	movs	r2, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fbec 	bl	80060d0 <xQueueReceive>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f47f af2a 	bne.w	8007754 <prvProcessReceivedCommands+0x8>
	}
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3730      	adds	r7, #48	; 0x30
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20002188 	.word	0x20002188

08007910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007916:	e048      	b.n	80079aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007918:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007922:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe f8cb 	bl	8005acc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d02e      	beq.n	80079aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4413      	add	r3, r2
 8007954:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	429a      	cmp	r2, r3
 800795c:	d90e      	bls.n	800797c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800796a:	4b19      	ldr	r3, [pc, #100]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7fe f870 	bl	8005a5a <vListInsert>
 800797a:	e016      	b.n	80079aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff fd60 	bl	800744c <xTimerGenericCommand>
 800798c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	603b      	str	r3, [r7, #0]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1b1      	bne.n	8007918 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <prvSwitchTimerLists+0xc4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 80079c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079c2:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <prvSwitchTimerLists+0xc4>)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20002180 	.word	0x20002180
 80079d4:	20002184 	.word	0x20002184

080079d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079de:	f000 f969 	bl	8007cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d120      	bne.n	8007a2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079ea:	4814      	ldr	r0, [pc, #80]	; (8007a3c <prvCheckForValidListAndQueue+0x64>)
 80079ec:	f7fd ffe4 	bl	80059b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079f0:	4813      	ldr	r0, [pc, #76]	; (8007a40 <prvCheckForValidListAndQueue+0x68>)
 80079f2:	f7fd ffe1 	bl	80059b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <prvCheckForValidListAndQueue+0x6c>)
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <prvCheckForValidListAndQueue+0x64>)
 80079fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvCheckForValidListAndQueue+0x70>)
 80079fe:	4a10      	ldr	r2, [pc, #64]	; (8007a40 <prvCheckForValidListAndQueue+0x68>)
 8007a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <prvCheckForValidListAndQueue+0x74>)
 8007a08:	4a11      	ldr	r2, [pc, #68]	; (8007a50 <prvCheckForValidListAndQueue+0x78>)
 8007a0a:	2110      	movs	r1, #16
 8007a0c:	200a      	movs	r0, #10
 8007a0e:	f7fe f8ef 	bl	8005bf0 <xQueueGenericCreateStatic>
 8007a12:	4603      	mov	r3, r0
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 8007a16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a20:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	490b      	ldr	r1, [pc, #44]	; (8007a54 <prvCheckForValidListAndQueue+0x7c>)
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fd42 	bl	80064b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a2c:	f000 f972 	bl	8007d14 <vPortExitCritical>
}
 8007a30:	bf00      	nop
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20002188 	.word	0x20002188
 8007a3c:	20002158 	.word	0x20002158
 8007a40:	2000216c 	.word	0x2000216c
 8007a44:	20002180 	.word	0x20002180
 8007a48:	20002184 	.word	0x20002184
 8007a4c:	20002234 	.word	0x20002234
 8007a50:	20002194 	.word	0x20002194
 8007a54:	0800cd98 	.word	0x0800cd98

08007a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3b04      	subs	r3, #4
 8007a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b04      	subs	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a88:	4a0c      	ldr	r2, [pc, #48]	; (8007abc <pxPortInitialiseStack+0x64>)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3b14      	subs	r3, #20
 8007a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f06f 0202 	mvn.w	r2, #2
 8007aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3b20      	subs	r3, #32
 8007aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aae:	68fb      	ldr	r3, [r7, #12]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	08007ac1 	.word	0x08007ac1

08007ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <prvTaskExitError+0x54>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d00a      	beq.n	8007aea <prvTaskExitError+0x2a>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60fb      	str	r3, [r7, #12]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <prvTaskExitError+0x28>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	60bb      	str	r3, [r7, #8]
}
 8007afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007afe:	bf00      	nop
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0fc      	beq.n	8007b00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	2000000c 	.word	0x2000000c
	...

08007b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <pxCurrentTCBConst2>)
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	6808      	ldr	r0, [r1, #0]
 8007b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	f380 8809 	msr	PSP, r0
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	4770      	bx	lr
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst2>:
 8007b40:	20001c58 	.word	0x20001c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b48:	4808      	ldr	r0, [pc, #32]	; (8007b6c <prvPortStartFirstTask+0x24>)
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f380 8808 	msr	MSP, r0
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8814 	msr	CONTROL, r0
 8007b5a:	b662      	cpsie	i
 8007b5c:	b661      	cpsie	f
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	df00      	svc	0
 8007b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b6a:	bf00      	nop
 8007b6c:	e000ed08 	.word	0xe000ed08

08007b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b76:	4b46      	ldr	r3, [pc, #280]	; (8007c90 <xPortStartScheduler+0x120>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a46      	ldr	r2, [pc, #280]	; (8007c94 <xPortStartScheduler+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10a      	bne.n	8007b96 <xPortStartScheduler+0x26>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	613b      	str	r3, [r7, #16]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b96:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <xPortStartScheduler+0x120>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a3f      	ldr	r2, [pc, #252]	; (8007c98 <xPortStartScheduler+0x128>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d10a      	bne.n	8007bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bb6:	4b39      	ldr	r3, [pc, #228]	; (8007c9c <xPortStartScheduler+0x12c>)
 8007bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b31      	ldr	r3, [pc, #196]	; (8007ca0 <xPortStartScheduler+0x130>)
 8007bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bde:	4b31      	ldr	r3, [pc, #196]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007be4:	e009      	b.n	8007bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007be6:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4a2d      	ldr	r2, [pc, #180]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d0ef      	beq.n	8007be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c06:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1c3 0307 	rsb	r3, r3, #7
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d00a      	beq.n	8007c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60bb      	str	r3, [r7, #8]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c46:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c5e:	f000 f8dd 	bl	8007e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c62:	4b12      	ldr	r3, [pc, #72]	; (8007cac <xPortStartScheduler+0x13c>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c68:	f000 f8fc 	bl	8007e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <xPortStartScheduler+0x140>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0f      	ldr	r2, [pc, #60]	; (8007cb0 <xPortStartScheduler+0x140>)
 8007c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c78:	f7ff ff66 	bl	8007b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c7c:	f7ff f848 	bl	8006d10 <vTaskSwitchContext>
	prvTaskExitError();
 8007c80:	f7ff ff1e 	bl	8007ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	e000ed00 	.word	0xe000ed00
 8007c94:	410fc271 	.word	0x410fc271
 8007c98:	410fc270 	.word	0x410fc270
 8007c9c:	e000e400 	.word	0xe000e400
 8007ca0:	20002284 	.word	0x20002284
 8007ca4:	20002288 	.word	0x20002288
 8007ca8:	e000ed20 	.word	0xe000ed20
 8007cac:	2000000c 	.word	0x2000000c
 8007cb0:	e000ef34 	.word	0xe000ef34

08007cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	607b      	str	r3, [r7, #4]
}
 8007ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <vPortEnterCritical+0x58>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <vPortEnterCritical+0x58>)
 8007cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <vPortEnterCritical+0x58>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10f      	bne.n	8007d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vPortEnterCritical+0x5c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	603b      	str	r3, [r7, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vPortEnterCritical+0x4a>
	}
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	2000000c 	.word	0x2000000c
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <vPortExitCritical+0x50>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <vPortExitCritical+0x24>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	607b      	str	r3, [r7, #4]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <vPortExitCritical+0x50>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <vPortExitCritical+0x50>)
 8007d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d42:	4b08      	ldr	r3, [pc, #32]	; (8007d64 <vPortExitCritical+0x50>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <vPortExitCritical+0x42>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	f383 8811 	msr	BASEPRI, r3
}
 8007d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000000c 	.word	0x2000000c
	...

08007d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d70:	f3ef 8009 	mrs	r0, PSP
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <pxCurrentTCBConst>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f01e 0f10 	tst.w	lr, #16
 8007d80:	bf08      	it	eq
 8007d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d94:	f380 8811 	msr	BASEPRI, r0
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f7fe ffb6 	bl	8006d10 <vTaskSwitchContext>
 8007da4:	f04f 0000 	mov.w	r0, #0
 8007da8:	f380 8811 	msr	BASEPRI, r0
 8007dac:	bc09      	pop	{r0, r3}
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	6808      	ldr	r0, [r1, #0]
 8007db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db6:	f01e 0f10 	tst.w	lr, #16
 8007dba:	bf08      	it	eq
 8007dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007dc0:	f380 8809 	msr	PSP, r0
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w

08007dd0 <pxCurrentTCBConst>:
 8007dd0:	20001c58 	.word	0x20001c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop

08007dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007df2:	f7fe fed3 	bl	8006b9c <xTaskIncrementTick>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dfc:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <xPortSysTickHandler+0x40>)
 8007dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	2300      	movs	r3, #0
 8007e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f383 8811 	msr	BASEPRI, r3
}
 8007e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <vPortSetupTimerInterrupt+0x34>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e26:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <vPortSetupTimerInterrupt+0x38>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <vPortSetupTimerInterrupt+0x3c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0a      	ldr	r2, [pc, #40]	; (8007e5c <vPortSetupTimerInterrupt+0x40>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	099b      	lsrs	r3, r3, #6
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <vPortSetupTimerInterrupt+0x44>)
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e3e:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <vPortSetupTimerInterrupt+0x34>)
 8007e40:	2207      	movs	r2, #7
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	e000e010 	.word	0xe000e010
 8007e54:	e000e018 	.word	0xe000e018
 8007e58:	20000000 	.word	0x20000000
 8007e5c:	10624dd3 	.word	0x10624dd3
 8007e60:	e000e014 	.word	0xe000e014

08007e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e74 <vPortEnableVFP+0x10>
 8007e68:	6801      	ldr	r1, [r0, #0]
 8007e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e6e:	6001      	str	r1, [r0, #0]
 8007e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e72:	bf00      	nop
 8007e74:	e000ed88 	.word	0xe000ed88

08007e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e7e:	f3ef 8305 	mrs	r3, IPSR
 8007e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d914      	bls.n	8007eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e8a:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <vPortValidateInterruptPriority+0x70>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <vPortValidateInterruptPriority+0x74>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	7afa      	ldrb	r2, [r7, #11]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d20a      	bcs.n	8007eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <vPortValidateInterruptPriority+0x78>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <vPortValidateInterruptPriority+0x7c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d90a      	bls.n	8007eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	603b      	str	r3, [r7, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <vPortValidateInterruptPriority+0x60>
	}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000e3f0 	.word	0xe000e3f0
 8007eec:	20002284 	.word	0x20002284
 8007ef0:	e000ed0c 	.word	0xe000ed0c
 8007ef4:	20002288 	.word	0x20002288

08007ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f04:	f7fe fd8e 	bl	8006a24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f08:	4b5b      	ldr	r3, [pc, #364]	; (8008078 <pvPortMalloc+0x180>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f10:	f000 f920 	bl	8008154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f14:	4b59      	ldr	r3, [pc, #356]	; (800807c <pvPortMalloc+0x184>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 8093 	bne.w	8008048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01d      	beq.n	8007f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f28:	2208      	movs	r2, #8
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <pvPortMalloc+0x6c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	617b      	str	r3, [r7, #20]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d06e      	beq.n	8008048 <pvPortMalloc+0x150>
 8007f6a:	4b45      	ldr	r3, [pc, #276]	; (8008080 <pvPortMalloc+0x188>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d869      	bhi.n	8008048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f74:	4b43      	ldr	r3, [pc, #268]	; (8008084 <pvPortMalloc+0x18c>)
 8007f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f78:	4b42      	ldr	r3, [pc, #264]	; (8008084 <pvPortMalloc+0x18c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7e:	e004      	b.n	8007f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d903      	bls.n	8007f9c <pvPortMalloc+0xa4>
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f1      	bne.n	8007f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f9c:	4b36      	ldr	r3, [pc, #216]	; (8008078 <pvPortMalloc+0x180>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d050      	beq.n	8008048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2208      	movs	r2, #8
 8007fac:	4413      	add	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d91f      	bls.n	8008008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	613b      	str	r3, [r7, #16]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f000 f908 	bl	8008218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008008:	4b1d      	ldr	r3, [pc, #116]	; (8008080 <pvPortMalloc+0x188>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <pvPortMalloc+0x188>)
 8008014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008016:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <pvPortMalloc+0x188>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <pvPortMalloc+0x190>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d203      	bcs.n	800802a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008022:	4b17      	ldr	r3, [pc, #92]	; (8008080 <pvPortMalloc+0x188>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <pvPortMalloc+0x190>)
 8008028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <pvPortMalloc+0x184>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	431a      	orrs	r2, r3
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800803e:	4b13      	ldr	r3, [pc, #76]	; (800808c <pvPortMalloc+0x194>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	4a11      	ldr	r2, [pc, #68]	; (800808c <pvPortMalloc+0x194>)
 8008046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008048:	f7fe fcfa 	bl	8006a40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <pvPortMalloc+0x174>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <pvPortMalloc+0x172>
	return pvReturn;
 800806c:	69fb      	ldr	r3, [r7, #28]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3728      	adds	r7, #40	; 0x28
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20002e94 	.word	0x20002e94
 800807c:	20002ea8 	.word	0x20002ea8
 8008080:	20002e98 	.word	0x20002e98
 8008084:	20002e8c 	.word	0x20002e8c
 8008088:	20002e9c 	.word	0x20002e9c
 800808c:	20002ea0 	.word	0x20002ea0

08008090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d04d      	beq.n	800813e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080a2:	2308      	movs	r3, #8
 80080a4:	425b      	negs	r3, r3
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	4b24      	ldr	r3, [pc, #144]	; (8008148 <vPortFree+0xb8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <vPortFree+0x44>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60fb      	str	r3, [r7, #12]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <vPortFree+0x62>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	60bb      	str	r3, [r7, #8]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <vPortFree+0xb8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d11a      	bne.n	800813e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <vPortFree+0xb8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	43db      	mvns	r3, r3
 8008112:	401a      	ands	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008118:	f7fe fc84 	bl	8006a24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <vPortFree+0xbc>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4413      	add	r3, r2
 8008126:	4a09      	ldr	r2, [pc, #36]	; (800814c <vPortFree+0xbc>)
 8008128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800812a:	6938      	ldr	r0, [r7, #16]
 800812c:	f000 f874 	bl	8008218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <vPortFree+0xc0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	4a06      	ldr	r2, [pc, #24]	; (8008150 <vPortFree+0xc0>)
 8008138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800813a:	f7fe fc81 	bl	8006a40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800813e:	bf00      	nop
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20002ea8 	.word	0x20002ea8
 800814c:	20002e98 	.word	0x20002e98
 8008150:	20002ea4 	.word	0x20002ea4

08008154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800815a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800815e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <prvHeapInit+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	4a1f      	ldr	r2, [pc, #124]	; (8008200 <prvHeapInit+0xac>)
 8008184:	4413      	add	r3, r2
 8008186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <prvHeapInit+0xb0>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <prvHeapInit+0xb0>)
 8008194:	2200      	movs	r2, #0
 8008196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081a0:	2208      	movs	r2, #8
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a15      	ldr	r2, [pc, #84]	; (8008208 <prvHeapInit+0xb4>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <prvHeapInit+0xb4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <prvHeapInit+0xb4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvHeapInit+0xb4>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <prvHeapInit+0xb8>)
 80081e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <prvHeapInit+0xbc>)
 80081ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <prvHeapInit+0xc0>)
 80081ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	2000228c 	.word	0x2000228c
 8008204:	20002e8c 	.word	0x20002e8c
 8008208:	20002e94 	.word	0x20002e94
 800820c:	20002e9c 	.word	0x20002e9c
 8008210:	20002e98 	.word	0x20002e98
 8008214:	20002ea8 	.word	0x20002ea8

08008218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <prvInsertBlockIntoFreeList+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <prvInsertBlockIntoFreeList+0x14>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8f7      	bhi.n	8008226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d108      	bne.n	800825a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	441a      	add	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d118      	bne.n	80082a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d00d      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	441a      	add	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e008      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e003      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d002      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20002e8c 	.word	0x20002e8c
 80082c8:	20002e94 	.word	0x20002e94

080082cc <__errno>:
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <__errno+0x8>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000010 	.word	0x20000010

080082d8 <std>:
 80082d8:	2300      	movs	r3, #0
 80082da:	b510      	push	{r4, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	e9c0 3300 	strd	r3, r3, [r0]
 80082e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e6:	6083      	str	r3, [r0, #8]
 80082e8:	8181      	strh	r1, [r0, #12]
 80082ea:	6643      	str	r3, [r0, #100]	; 0x64
 80082ec:	81c2      	strh	r2, [r0, #14]
 80082ee:	6183      	str	r3, [r0, #24]
 80082f0:	4619      	mov	r1, r3
 80082f2:	2208      	movs	r2, #8
 80082f4:	305c      	adds	r0, #92	; 0x5c
 80082f6:	f000 f91a 	bl	800852e <memset>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x38>)
 80082fc:	6263      	str	r3, [r4, #36]	; 0x24
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x3c>)
 8008300:	62a3      	str	r3, [r4, #40]	; 0x28
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x40>)
 8008304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x44>)
 8008308:	6224      	str	r4, [r4, #32]
 800830a:	6323      	str	r3, [r4, #48]	; 0x30
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	0800949d 	.word	0x0800949d
 8008314:	080094bf 	.word	0x080094bf
 8008318:	080094f7 	.word	0x080094f7
 800831c:	0800951b 	.word	0x0800951b

08008320 <_cleanup_r>:
 8008320:	4901      	ldr	r1, [pc, #4]	; (8008328 <_cleanup_r+0x8>)
 8008322:	f000 b8af 	b.w	8008484 <_fwalk_reent>
 8008326:	bf00      	nop
 8008328:	0800b0c9 	.word	0x0800b0c9

0800832c <__sfmoreglue>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	2268      	movs	r2, #104	; 0x68
 8008330:	1e4d      	subs	r5, r1, #1
 8008332:	4355      	muls	r5, r2
 8008334:	460e      	mov	r6, r1
 8008336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833a:	f000 f921 	bl	8008580 <_malloc_r>
 800833e:	4604      	mov	r4, r0
 8008340:	b140      	cbz	r0, 8008354 <__sfmoreglue+0x28>
 8008342:	2100      	movs	r1, #0
 8008344:	e9c0 1600 	strd	r1, r6, [r0]
 8008348:	300c      	adds	r0, #12
 800834a:	60a0      	str	r0, [r4, #8]
 800834c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008350:	f000 f8ed 	bl	800852e <memset>
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__sfp_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_acquire+0x8>)
 800835a:	f000 b8d8 	b.w	800850e <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20002ead 	.word	0x20002ead

08008364 <__sfp_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_release+0x8>)
 8008366:	f000 b8d3 	b.w	8008510 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20002ead 	.word	0x20002ead

08008370 <__sinit_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sinit_lock_acquire+0x8>)
 8008372:	f000 b8cc 	b.w	800850e <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20002eae 	.word	0x20002eae

0800837c <__sinit_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sinit_lock_release+0x8>)
 800837e:	f000 b8c7 	b.w	8008510 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20002eae 	.word	0x20002eae

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sinit_lock_acquire>
 8008390:	69a3      	ldr	r3, [r4, #24]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sinit_lock_release>
 800839c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a0:	6523      	str	r3, [r4, #80]	; 0x50
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <__sinit+0x68>)
 80083a4:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <__sinit+0x6c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	bf04      	itt	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	61a3      	streq	r3, [r4, #24]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f820 	bl	80083f8 <__sfp>
 80083b8:	6060      	str	r0, [r4, #4]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f81c 	bl	80083f8 <__sfp>
 80083c0:	60a0      	str	r0, [r4, #8]
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f818 	bl	80083f8 <__sfp>
 80083c8:	2200      	movs	r2, #0
 80083ca:	60e0      	str	r0, [r4, #12]
 80083cc:	2104      	movs	r1, #4
 80083ce:	6860      	ldr	r0, [r4, #4]
 80083d0:	f7ff ff82 	bl	80082d8 <std>
 80083d4:	68a0      	ldr	r0, [r4, #8]
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	f7ff ff7d 	bl	80082d8 <std>
 80083de:	68e0      	ldr	r0, [r4, #12]
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	f7ff ff78 	bl	80082d8 <std>
 80083e8:	2301      	movs	r3, #1
 80083ea:	61a3      	str	r3, [r4, #24]
 80083ec:	e7d2      	b.n	8008394 <__sinit+0xc>
 80083ee:	bf00      	nop
 80083f0:	0800cf54 	.word	0x0800cf54
 80083f4:	08008321 	.word	0x08008321

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4607      	mov	r7, r0
 80083fc:	f7ff ffac 	bl	8008358 <__sfp_lock_acquire>
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <__sfp+0x84>)
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	69b3      	ldr	r3, [r6, #24]
 8008406:	b913      	cbnz	r3, 800840e <__sfp+0x16>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbd 	bl	8008388 <__sinit>
 800840e:	3648      	adds	r6, #72	; 0x48
 8008410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	d503      	bpl.n	8008420 <__sfp+0x28>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	b30b      	cbz	r3, 8008460 <__sfp+0x68>
 800841c:	6836      	ldr	r6, [r6, #0]
 800841e:	e7f7      	b.n	8008410 <__sfp+0x18>
 8008420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008424:	b9d5      	cbnz	r5, 800845c <__sfp+0x64>
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <__sfp+0x88>)
 8008428:	60e3      	str	r3, [r4, #12]
 800842a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842e:	6665      	str	r5, [r4, #100]	; 0x64
 8008430:	f000 f86c 	bl	800850c <__retarget_lock_init_recursive>
 8008434:	f7ff ff96 	bl	8008364 <__sfp_lock_release>
 8008438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800843c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008440:	6025      	str	r5, [r4, #0]
 8008442:	61a5      	str	r5, [r4, #24]
 8008444:	2208      	movs	r2, #8
 8008446:	4629      	mov	r1, r5
 8008448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800844c:	f000 f86f 	bl	800852e <memset>
 8008450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008458:	4620      	mov	r0, r4
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	3468      	adds	r4, #104	; 0x68
 800845e:	e7d9      	b.n	8008414 <__sfp+0x1c>
 8008460:	2104      	movs	r1, #4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff62 	bl	800832c <__sfmoreglue>
 8008468:	4604      	mov	r4, r0
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1d5      	bne.n	800841c <__sfp+0x24>
 8008470:	f7ff ff78 	bl	8008364 <__sfp_lock_release>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7ee      	b.n	8008458 <__sfp+0x60>
 800847a:	bf00      	nop
 800847c:	0800cf54 	.word	0x0800cf54
 8008480:	ffff0001 	.word	0xffff0001

08008484 <_fwalk_reent>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	4688      	mov	r8, r1
 800848c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008490:	2700      	movs	r7, #0
 8008492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008496:	f1b9 0901 	subs.w	r9, r9, #1
 800849a:	d505      	bpl.n	80084a8 <_fwalk_reent+0x24>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d1f7      	bne.n	8008492 <_fwalk_reent+0xe>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d907      	bls.n	80084be <_fwalk_reent+0x3a>
 80084ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b2:	3301      	adds	r3, #1
 80084b4:	d003      	beq.n	80084be <_fwalk_reent+0x3a>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	4307      	orrs	r7, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7e9      	b.n	8008496 <_fwalk_reent+0x12>
	...

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	; (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	; (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	; (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	; (8008508 <__libc_init_array+0x44>)
 80084d8:	f004 fc08 	bl	800ccec <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	0800d3a4 	.word	0x0800d3a4
 8008500:	0800d3a4 	.word	0x0800d3a4
 8008504:	0800d3a4 	.word	0x0800d3a4
 8008508:	0800d3a8 	.word	0x0800d3a8

0800850c <__retarget_lock_init_recursive>:
 800850c:	4770      	bx	lr

0800850e <__retarget_lock_acquire_recursive>:
 800850e:	4770      	bx	lr

08008510 <__retarget_lock_release_recursive>:
 8008510:	4770      	bx	lr

08008512 <memcpy>:
 8008512:	440a      	add	r2, r1
 8008514:	4291      	cmp	r1, r2
 8008516:	f100 33ff 	add.w	r3, r0, #4294967295
 800851a:	d100      	bne.n	800851e <memcpy+0xc>
 800851c:	4770      	bx	lr
 800851e:	b510      	push	{r4, lr}
 8008520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008528:	4291      	cmp	r1, r2
 800852a:	d1f9      	bne.n	8008520 <memcpy+0xe>
 800852c:	bd10      	pop	{r4, pc}

0800852e <memset>:
 800852e:	4402      	add	r2, r0
 8008530:	4603      	mov	r3, r0
 8008532:	4293      	cmp	r3, r2
 8008534:	d100      	bne.n	8008538 <memset+0xa>
 8008536:	4770      	bx	lr
 8008538:	f803 1b01 	strb.w	r1, [r3], #1
 800853c:	e7f9      	b.n	8008532 <memset+0x4>
	...

08008540 <sbrk_aligned>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4e0e      	ldr	r6, [pc, #56]	; (800857c <sbrk_aligned+0x3c>)
 8008544:	460c      	mov	r4, r1
 8008546:	6831      	ldr	r1, [r6, #0]
 8008548:	4605      	mov	r5, r0
 800854a:	b911      	cbnz	r1, 8008552 <sbrk_aligned+0x12>
 800854c:	f000 ff70 	bl	8009430 <_sbrk_r>
 8008550:	6030      	str	r0, [r6, #0]
 8008552:	4621      	mov	r1, r4
 8008554:	4628      	mov	r0, r5
 8008556:	f000 ff6b 	bl	8009430 <_sbrk_r>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d00a      	beq.n	8008574 <sbrk_aligned+0x34>
 800855e:	1cc4      	adds	r4, r0, #3
 8008560:	f024 0403 	bic.w	r4, r4, #3
 8008564:	42a0      	cmp	r0, r4
 8008566:	d007      	beq.n	8008578 <sbrk_aligned+0x38>
 8008568:	1a21      	subs	r1, r4, r0
 800856a:	4628      	mov	r0, r5
 800856c:	f000 ff60 	bl	8009430 <_sbrk_r>
 8008570:	3001      	adds	r0, #1
 8008572:	d101      	bne.n	8008578 <sbrk_aligned+0x38>
 8008574:	f04f 34ff 	mov.w	r4, #4294967295
 8008578:	4620      	mov	r0, r4
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	20002eb4 	.word	0x20002eb4

08008580 <_malloc_r>:
 8008580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008584:	1ccd      	adds	r5, r1, #3
 8008586:	f025 0503 	bic.w	r5, r5, #3
 800858a:	3508      	adds	r5, #8
 800858c:	2d0c      	cmp	r5, #12
 800858e:	bf38      	it	cc
 8008590:	250c      	movcc	r5, #12
 8008592:	2d00      	cmp	r5, #0
 8008594:	4607      	mov	r7, r0
 8008596:	db01      	blt.n	800859c <_malloc_r+0x1c>
 8008598:	42a9      	cmp	r1, r5
 800859a:	d905      	bls.n	80085a8 <_malloc_r+0x28>
 800859c:	230c      	movs	r3, #12
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	2600      	movs	r6, #0
 80085a2:	4630      	mov	r0, r6
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	4e2e      	ldr	r6, [pc, #184]	; (8008664 <_malloc_r+0xe4>)
 80085aa:	f003 f969 	bl	800b880 <__malloc_lock>
 80085ae:	6833      	ldr	r3, [r6, #0]
 80085b0:	461c      	mov	r4, r3
 80085b2:	bb34      	cbnz	r4, 8008602 <_malloc_r+0x82>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4638      	mov	r0, r7
 80085b8:	f7ff ffc2 	bl	8008540 <sbrk_aligned>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	4604      	mov	r4, r0
 80085c0:	d14d      	bne.n	800865e <_malloc_r+0xde>
 80085c2:	6834      	ldr	r4, [r6, #0]
 80085c4:	4626      	mov	r6, r4
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d140      	bne.n	800864c <_malloc_r+0xcc>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	4631      	mov	r1, r6
 80085ce:	4638      	mov	r0, r7
 80085d0:	eb04 0803 	add.w	r8, r4, r3
 80085d4:	f000 ff2c 	bl	8009430 <_sbrk_r>
 80085d8:	4580      	cmp	r8, r0
 80085da:	d13a      	bne.n	8008652 <_malloc_r+0xd2>
 80085dc:	6821      	ldr	r1, [r4, #0]
 80085de:	3503      	adds	r5, #3
 80085e0:	1a6d      	subs	r5, r5, r1
 80085e2:	f025 0503 	bic.w	r5, r5, #3
 80085e6:	3508      	adds	r5, #8
 80085e8:	2d0c      	cmp	r5, #12
 80085ea:	bf38      	it	cc
 80085ec:	250c      	movcc	r5, #12
 80085ee:	4629      	mov	r1, r5
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ffa5 	bl	8008540 <sbrk_aligned>
 80085f6:	3001      	adds	r0, #1
 80085f8:	d02b      	beq.n	8008652 <_malloc_r+0xd2>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	442b      	add	r3, r5
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	e00e      	b.n	8008620 <_malloc_r+0xa0>
 8008602:	6822      	ldr	r2, [r4, #0]
 8008604:	1b52      	subs	r2, r2, r5
 8008606:	d41e      	bmi.n	8008646 <_malloc_r+0xc6>
 8008608:	2a0b      	cmp	r2, #11
 800860a:	d916      	bls.n	800863a <_malloc_r+0xba>
 800860c:	1961      	adds	r1, r4, r5
 800860e:	42a3      	cmp	r3, r4
 8008610:	6025      	str	r5, [r4, #0]
 8008612:	bf18      	it	ne
 8008614:	6059      	strne	r1, [r3, #4]
 8008616:	6863      	ldr	r3, [r4, #4]
 8008618:	bf08      	it	eq
 800861a:	6031      	streq	r1, [r6, #0]
 800861c:	5162      	str	r2, [r4, r5]
 800861e:	604b      	str	r3, [r1, #4]
 8008620:	4638      	mov	r0, r7
 8008622:	f104 060b 	add.w	r6, r4, #11
 8008626:	f003 f931 	bl	800b88c <__malloc_unlock>
 800862a:	f026 0607 	bic.w	r6, r6, #7
 800862e:	1d23      	adds	r3, r4, #4
 8008630:	1af2      	subs	r2, r6, r3
 8008632:	d0b6      	beq.n	80085a2 <_malloc_r+0x22>
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	50a3      	str	r3, [r4, r2]
 8008638:	e7b3      	b.n	80085a2 <_malloc_r+0x22>
 800863a:	6862      	ldr	r2, [r4, #4]
 800863c:	42a3      	cmp	r3, r4
 800863e:	bf0c      	ite	eq
 8008640:	6032      	streq	r2, [r6, #0]
 8008642:	605a      	strne	r2, [r3, #4]
 8008644:	e7ec      	b.n	8008620 <_malloc_r+0xa0>
 8008646:	4623      	mov	r3, r4
 8008648:	6864      	ldr	r4, [r4, #4]
 800864a:	e7b2      	b.n	80085b2 <_malloc_r+0x32>
 800864c:	4634      	mov	r4, r6
 800864e:	6876      	ldr	r6, [r6, #4]
 8008650:	e7b9      	b.n	80085c6 <_malloc_r+0x46>
 8008652:	230c      	movs	r3, #12
 8008654:	603b      	str	r3, [r7, #0]
 8008656:	4638      	mov	r0, r7
 8008658:	f003 f918 	bl	800b88c <__malloc_unlock>
 800865c:	e7a1      	b.n	80085a2 <_malloc_r+0x22>
 800865e:	6025      	str	r5, [r4, #0]
 8008660:	e7de      	b.n	8008620 <_malloc_r+0xa0>
 8008662:	bf00      	nop
 8008664:	20002eb0 	.word	0x20002eb0

08008668 <__cvt>:
 8008668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	ec55 4b10 	vmov	r4, r5, d0
 8008670:	2d00      	cmp	r5, #0
 8008672:	460e      	mov	r6, r1
 8008674:	4619      	mov	r1, r3
 8008676:	462b      	mov	r3, r5
 8008678:	bfbb      	ittet	lt
 800867a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800867e:	461d      	movlt	r5, r3
 8008680:	2300      	movge	r3, #0
 8008682:	232d      	movlt	r3, #45	; 0x2d
 8008684:	700b      	strb	r3, [r1, #0]
 8008686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800868c:	4691      	mov	r9, r2
 800868e:	f023 0820 	bic.w	r8, r3, #32
 8008692:	bfbc      	itt	lt
 8008694:	4622      	movlt	r2, r4
 8008696:	4614      	movlt	r4, r2
 8008698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800869c:	d005      	beq.n	80086aa <__cvt+0x42>
 800869e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086a2:	d100      	bne.n	80086a6 <__cvt+0x3e>
 80086a4:	3601      	adds	r6, #1
 80086a6:	2102      	movs	r1, #2
 80086a8:	e000      	b.n	80086ac <__cvt+0x44>
 80086aa:	2103      	movs	r1, #3
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	ab02      	add	r3, sp, #8
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	ec45 4b10 	vmov	d0, r4, r5
 80086b8:	4653      	mov	r3, sl
 80086ba:	4632      	mov	r2, r6
 80086bc:	f001 fe90 	bl	800a3e0 <_dtoa_r>
 80086c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086c4:	4607      	mov	r7, r0
 80086c6:	d102      	bne.n	80086ce <__cvt+0x66>
 80086c8:	f019 0f01 	tst.w	r9, #1
 80086cc:	d022      	beq.n	8008714 <__cvt+0xac>
 80086ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086d2:	eb07 0906 	add.w	r9, r7, r6
 80086d6:	d110      	bne.n	80086fa <__cvt+0x92>
 80086d8:	783b      	ldrb	r3, [r7, #0]
 80086da:	2b30      	cmp	r3, #48	; 0x30
 80086dc:	d10a      	bne.n	80086f4 <__cvt+0x8c>
 80086de:	2200      	movs	r2, #0
 80086e0:	2300      	movs	r3, #0
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	f7f8 fa17 	bl	8000b18 <__aeabi_dcmpeq>
 80086ea:	b918      	cbnz	r0, 80086f4 <__cvt+0x8c>
 80086ec:	f1c6 0601 	rsb	r6, r6, #1
 80086f0:	f8ca 6000 	str.w	r6, [sl]
 80086f4:	f8da 3000 	ldr.w	r3, [sl]
 80086f8:	4499      	add	r9, r3
 80086fa:	2200      	movs	r2, #0
 80086fc:	2300      	movs	r3, #0
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f8 fa09 	bl	8000b18 <__aeabi_dcmpeq>
 8008706:	b108      	cbz	r0, 800870c <__cvt+0xa4>
 8008708:	f8cd 900c 	str.w	r9, [sp, #12]
 800870c:	2230      	movs	r2, #48	; 0x30
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	454b      	cmp	r3, r9
 8008712:	d307      	bcc.n	8008724 <__cvt+0xbc>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008718:	1bdb      	subs	r3, r3, r7
 800871a:	4638      	mov	r0, r7
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	b004      	add	sp, #16
 8008720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008724:	1c59      	adds	r1, r3, #1
 8008726:	9103      	str	r1, [sp, #12]
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	e7f0      	b.n	800870e <__cvt+0xa6>

0800872c <__exponent>:
 800872c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800872e:	4603      	mov	r3, r0
 8008730:	2900      	cmp	r1, #0
 8008732:	bfb8      	it	lt
 8008734:	4249      	neglt	r1, r1
 8008736:	f803 2b02 	strb.w	r2, [r3], #2
 800873a:	bfb4      	ite	lt
 800873c:	222d      	movlt	r2, #45	; 0x2d
 800873e:	222b      	movge	r2, #43	; 0x2b
 8008740:	2909      	cmp	r1, #9
 8008742:	7042      	strb	r2, [r0, #1]
 8008744:	dd2a      	ble.n	800879c <__exponent+0x70>
 8008746:	f10d 0407 	add.w	r4, sp, #7
 800874a:	46a4      	mov	ip, r4
 800874c:	270a      	movs	r7, #10
 800874e:	46a6      	mov	lr, r4
 8008750:	460a      	mov	r2, r1
 8008752:	fb91 f6f7 	sdiv	r6, r1, r7
 8008756:	fb07 1516 	mls	r5, r7, r6, r1
 800875a:	3530      	adds	r5, #48	; 0x30
 800875c:	2a63      	cmp	r2, #99	; 0x63
 800875e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008762:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008766:	4631      	mov	r1, r6
 8008768:	dcf1      	bgt.n	800874e <__exponent+0x22>
 800876a:	3130      	adds	r1, #48	; 0x30
 800876c:	f1ae 0502 	sub.w	r5, lr, #2
 8008770:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008774:	1c44      	adds	r4, r0, #1
 8008776:	4629      	mov	r1, r5
 8008778:	4561      	cmp	r1, ip
 800877a:	d30a      	bcc.n	8008792 <__exponent+0x66>
 800877c:	f10d 0209 	add.w	r2, sp, #9
 8008780:	eba2 020e 	sub.w	r2, r2, lr
 8008784:	4565      	cmp	r5, ip
 8008786:	bf88      	it	hi
 8008788:	2200      	movhi	r2, #0
 800878a:	4413      	add	r3, r2
 800878c:	1a18      	subs	r0, r3, r0
 800878e:	b003      	add	sp, #12
 8008790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008796:	f804 2f01 	strb.w	r2, [r4, #1]!
 800879a:	e7ed      	b.n	8008778 <__exponent+0x4c>
 800879c:	2330      	movs	r3, #48	; 0x30
 800879e:	3130      	adds	r1, #48	; 0x30
 80087a0:	7083      	strb	r3, [r0, #2]
 80087a2:	70c1      	strb	r1, [r0, #3]
 80087a4:	1d03      	adds	r3, r0, #4
 80087a6:	e7f1      	b.n	800878c <__exponent+0x60>

080087a8 <_printf_float>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	ed2d 8b02 	vpush	{d8}
 80087b0:	b08d      	sub	sp, #52	; 0x34
 80087b2:	460c      	mov	r4, r1
 80087b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087b8:	4616      	mov	r6, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	4605      	mov	r5, r0
 80087be:	f003 f82f 	bl	800b820 <_localeconv_r>
 80087c2:	f8d0 a000 	ldr.w	sl, [r0]
 80087c6:	4650      	mov	r0, sl
 80087c8:	f7f7 fd2a 	bl	8000220 <strlen>
 80087cc:	2300      	movs	r3, #0
 80087ce:	930a      	str	r3, [sp, #40]	; 0x28
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	f8d8 3000 	ldr.w	r3, [r8]
 80087d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087dc:	3307      	adds	r3, #7
 80087de:	f023 0307 	bic.w	r3, r3, #7
 80087e2:	f103 0208 	add.w	r2, r3, #8
 80087e6:	f8c8 2000 	str.w	r2, [r8]
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087fa:	9307      	str	r3, [sp, #28]
 80087fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008800:	ee08 0a10 	vmov	s16, r0
 8008804:	4b9f      	ldr	r3, [pc, #636]	; (8008a84 <_printf_float+0x2dc>)
 8008806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800880a:	f04f 32ff 	mov.w	r2, #4294967295
 800880e:	f7f8 f9b5 	bl	8000b7c <__aeabi_dcmpun>
 8008812:	bb88      	cbnz	r0, 8008878 <_printf_float+0xd0>
 8008814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008818:	4b9a      	ldr	r3, [pc, #616]	; (8008a84 <_printf_float+0x2dc>)
 800881a:	f04f 32ff 	mov.w	r2, #4294967295
 800881e:	f7f8 f98f 	bl	8000b40 <__aeabi_dcmple>
 8008822:	bb48      	cbnz	r0, 8008878 <_printf_float+0xd0>
 8008824:	2200      	movs	r2, #0
 8008826:	2300      	movs	r3, #0
 8008828:	4640      	mov	r0, r8
 800882a:	4649      	mov	r1, r9
 800882c:	f7f8 f97e 	bl	8000b2c <__aeabi_dcmplt>
 8008830:	b110      	cbz	r0, 8008838 <_printf_float+0x90>
 8008832:	232d      	movs	r3, #45	; 0x2d
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	4b93      	ldr	r3, [pc, #588]	; (8008a88 <_printf_float+0x2e0>)
 800883a:	4894      	ldr	r0, [pc, #592]	; (8008a8c <_printf_float+0x2e4>)
 800883c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008840:	bf94      	ite	ls
 8008842:	4698      	movls	r8, r3
 8008844:	4680      	movhi	r8, r0
 8008846:	2303      	movs	r3, #3
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	9b05      	ldr	r3, [sp, #20]
 800884c:	f023 0204 	bic.w	r2, r3, #4
 8008850:	6022      	str	r2, [r4, #0]
 8008852:	f04f 0900 	mov.w	r9, #0
 8008856:	9700      	str	r7, [sp, #0]
 8008858:	4633      	mov	r3, r6
 800885a:	aa0b      	add	r2, sp, #44	; 0x2c
 800885c:	4621      	mov	r1, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f9d8 	bl	8008c14 <_printf_common>
 8008864:	3001      	adds	r0, #1
 8008866:	f040 8090 	bne.w	800898a <_printf_float+0x1e2>
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	b00d      	add	sp, #52	; 0x34
 8008870:	ecbd 8b02 	vpop	{d8}
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008878:	4642      	mov	r2, r8
 800887a:	464b      	mov	r3, r9
 800887c:	4640      	mov	r0, r8
 800887e:	4649      	mov	r1, r9
 8008880:	f7f8 f97c 	bl	8000b7c <__aeabi_dcmpun>
 8008884:	b140      	cbz	r0, 8008898 <_printf_float+0xf0>
 8008886:	464b      	mov	r3, r9
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfbc      	itt	lt
 800888c:	232d      	movlt	r3, #45	; 0x2d
 800888e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008892:	487f      	ldr	r0, [pc, #508]	; (8008a90 <_printf_float+0x2e8>)
 8008894:	4b7f      	ldr	r3, [pc, #508]	; (8008a94 <_printf_float+0x2ec>)
 8008896:	e7d1      	b.n	800883c <_printf_float+0x94>
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800889e:	9206      	str	r2, [sp, #24]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	d13f      	bne.n	8008924 <_printf_float+0x17c>
 80088a4:	2306      	movs	r3, #6
 80088a6:	6063      	str	r3, [r4, #4]
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	6861      	ldr	r1, [r4, #4]
 80088ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088b0:	2300      	movs	r3, #0
 80088b2:	9303      	str	r3, [sp, #12]
 80088b4:	ab0a      	add	r3, sp, #40	; 0x28
 80088b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088ba:	ab09      	add	r3, sp, #36	; 0x24
 80088bc:	ec49 8b10 	vmov	d0, r8, r9
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	6022      	str	r2, [r4, #0]
 80088c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7ff fecd 	bl	8008668 <__cvt>
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d2:	2b47      	cmp	r3, #71	; 0x47
 80088d4:	4680      	mov	r8, r0
 80088d6:	d108      	bne.n	80088ea <_printf_float+0x142>
 80088d8:	1cc8      	adds	r0, r1, #3
 80088da:	db02      	blt.n	80088e2 <_printf_float+0x13a>
 80088dc:	6863      	ldr	r3, [r4, #4]
 80088de:	4299      	cmp	r1, r3
 80088e0:	dd41      	ble.n	8008966 <_printf_float+0x1be>
 80088e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80088e6:	fa5f fb8b 	uxtb.w	fp, fp
 80088ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088ee:	d820      	bhi.n	8008932 <_printf_float+0x18a>
 80088f0:	3901      	subs	r1, #1
 80088f2:	465a      	mov	r2, fp
 80088f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088f8:	9109      	str	r1, [sp, #36]	; 0x24
 80088fa:	f7ff ff17 	bl	800872c <__exponent>
 80088fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008900:	1813      	adds	r3, r2, r0
 8008902:	2a01      	cmp	r2, #1
 8008904:	4681      	mov	r9, r0
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	dc02      	bgt.n	8008910 <_printf_float+0x168>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	07d2      	lsls	r2, r2, #31
 800890e:	d501      	bpl.n	8008914 <_printf_float+0x16c>
 8008910:	3301      	adds	r3, #1
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008918:	2b00      	cmp	r3, #0
 800891a:	d09c      	beq.n	8008856 <_printf_float+0xae>
 800891c:	232d      	movs	r3, #45	; 0x2d
 800891e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008922:	e798      	b.n	8008856 <_printf_float+0xae>
 8008924:	9a06      	ldr	r2, [sp, #24]
 8008926:	2a47      	cmp	r2, #71	; 0x47
 8008928:	d1be      	bne.n	80088a8 <_printf_float+0x100>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1bc      	bne.n	80088a8 <_printf_float+0x100>
 800892e:	2301      	movs	r3, #1
 8008930:	e7b9      	b.n	80088a6 <_printf_float+0xfe>
 8008932:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008936:	d118      	bne.n	800896a <_printf_float+0x1c2>
 8008938:	2900      	cmp	r1, #0
 800893a:	6863      	ldr	r3, [r4, #4]
 800893c:	dd0b      	ble.n	8008956 <_printf_float+0x1ae>
 800893e:	6121      	str	r1, [r4, #16]
 8008940:	b913      	cbnz	r3, 8008948 <_printf_float+0x1a0>
 8008942:	6822      	ldr	r2, [r4, #0]
 8008944:	07d0      	lsls	r0, r2, #31
 8008946:	d502      	bpl.n	800894e <_printf_float+0x1a6>
 8008948:	3301      	adds	r3, #1
 800894a:	440b      	add	r3, r1
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008950:	f04f 0900 	mov.w	r9, #0
 8008954:	e7de      	b.n	8008914 <_printf_float+0x16c>
 8008956:	b913      	cbnz	r3, 800895e <_printf_float+0x1b6>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	07d2      	lsls	r2, r2, #31
 800895c:	d501      	bpl.n	8008962 <_printf_float+0x1ba>
 800895e:	3302      	adds	r3, #2
 8008960:	e7f4      	b.n	800894c <_printf_float+0x1a4>
 8008962:	2301      	movs	r3, #1
 8008964:	e7f2      	b.n	800894c <_printf_float+0x1a4>
 8008966:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800896a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896c:	4299      	cmp	r1, r3
 800896e:	db05      	blt.n	800897c <_printf_float+0x1d4>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	6121      	str	r1, [r4, #16]
 8008974:	07d8      	lsls	r0, r3, #31
 8008976:	d5ea      	bpl.n	800894e <_printf_float+0x1a6>
 8008978:	1c4b      	adds	r3, r1, #1
 800897a:	e7e7      	b.n	800894c <_printf_float+0x1a4>
 800897c:	2900      	cmp	r1, #0
 800897e:	bfd4      	ite	le
 8008980:	f1c1 0202 	rsble	r2, r1, #2
 8008984:	2201      	movgt	r2, #1
 8008986:	4413      	add	r3, r2
 8008988:	e7e0      	b.n	800894c <_printf_float+0x1a4>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	055a      	lsls	r2, r3, #21
 800898e:	d407      	bmi.n	80089a0 <_printf_float+0x1f8>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	4642      	mov	r2, r8
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	d12c      	bne.n	80089f8 <_printf_float+0x250>
 800899e:	e764      	b.n	800886a <_printf_float+0xc2>
 80089a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089a4:	f240 80e0 	bls.w	8008b68 <_printf_float+0x3c0>
 80089a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089ac:	2200      	movs	r2, #0
 80089ae:	2300      	movs	r3, #0
 80089b0:	f7f8 f8b2 	bl	8000b18 <__aeabi_dcmpeq>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d034      	beq.n	8008a22 <_printf_float+0x27a>
 80089b8:	4a37      	ldr	r2, [pc, #220]	; (8008a98 <_printf_float+0x2f0>)
 80089ba:	2301      	movs	r3, #1
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f af51 	beq.w	800886a <_printf_float+0xc2>
 80089c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089cc:	429a      	cmp	r2, r3
 80089ce:	db02      	blt.n	80089d6 <_printf_float+0x22e>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	07d8      	lsls	r0, r3, #31
 80089d4:	d510      	bpl.n	80089f8 <_printf_float+0x250>
 80089d6:	ee18 3a10 	vmov	r3, s16
 80089da:	4652      	mov	r2, sl
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f af41 	beq.w	800886a <_printf_float+0xc2>
 80089e8:	f04f 0800 	mov.w	r8, #0
 80089ec:	f104 091a 	add.w	r9, r4, #26
 80089f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f2:	3b01      	subs	r3, #1
 80089f4:	4543      	cmp	r3, r8
 80089f6:	dc09      	bgt.n	8008a0c <_printf_float+0x264>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	079b      	lsls	r3, r3, #30
 80089fc:	f100 8105 	bmi.w	8008c0a <_printf_float+0x462>
 8008a00:	68e0      	ldr	r0, [r4, #12]
 8008a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a04:	4298      	cmp	r0, r3
 8008a06:	bfb8      	it	lt
 8008a08:	4618      	movlt	r0, r3
 8008a0a:	e730      	b.n	800886e <_printf_float+0xc6>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	464a      	mov	r2, r9
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	f43f af27 	beq.w	800886a <_printf_float+0xc2>
 8008a1c:	f108 0801 	add.w	r8, r8, #1
 8008a20:	e7e6      	b.n	80089f0 <_printf_float+0x248>
 8008a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dc39      	bgt.n	8008a9c <_printf_float+0x2f4>
 8008a28:	4a1b      	ldr	r2, [pc, #108]	; (8008a98 <_printf_float+0x2f0>)
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f af19 	beq.w	800886a <_printf_float+0xc2>
 8008a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	d102      	bne.n	8008a46 <_printf_float+0x29e>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	07d9      	lsls	r1, r3, #31
 8008a44:	d5d8      	bpl.n	80089f8 <_printf_float+0x250>
 8008a46:	ee18 3a10 	vmov	r3, s16
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f af09 	beq.w	800886a <_printf_float+0xc2>
 8008a58:	f04f 0900 	mov.w	r9, #0
 8008a5c:	f104 0a1a 	add.w	sl, r4, #26
 8008a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a62:	425b      	negs	r3, r3
 8008a64:	454b      	cmp	r3, r9
 8008a66:	dc01      	bgt.n	8008a6c <_printf_float+0x2c4>
 8008a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6a:	e792      	b.n	8008992 <_printf_float+0x1ea>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4652      	mov	r2, sl
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	f43f aef7 	beq.w	800886a <_printf_float+0xc2>
 8008a7c:	f109 0901 	add.w	r9, r9, #1
 8008a80:	e7ee      	b.n	8008a60 <_printf_float+0x2b8>
 8008a82:	bf00      	nop
 8008a84:	7fefffff 	.word	0x7fefffff
 8008a88:	0800cf58 	.word	0x0800cf58
 8008a8c:	0800cf5c 	.word	0x0800cf5c
 8008a90:	0800cf64 	.word	0x0800cf64
 8008a94:	0800cf60 	.word	0x0800cf60
 8008a98:	0800cf68 	.word	0x0800cf68
 8008a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	bfa8      	it	ge
 8008aa4:	461a      	movge	r2, r3
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	4691      	mov	r9, r2
 8008aaa:	dc37      	bgt.n	8008b1c <_printf_float+0x374>
 8008aac:	f04f 0b00 	mov.w	fp, #0
 8008ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ab4:	f104 021a 	add.w	r2, r4, #26
 8008ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aba:	9305      	str	r3, [sp, #20]
 8008abc:	eba3 0309 	sub.w	r3, r3, r9
 8008ac0:	455b      	cmp	r3, fp
 8008ac2:	dc33      	bgt.n	8008b2c <_printf_float+0x384>
 8008ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	db3b      	blt.n	8008b44 <_printf_float+0x39c>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	07da      	lsls	r2, r3, #31
 8008ad0:	d438      	bmi.n	8008b44 <_printf_float+0x39c>
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad4:	9a05      	ldr	r2, [sp, #20]
 8008ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ad8:	1a9a      	subs	r2, r3, r2
 8008ada:	eba3 0901 	sub.w	r9, r3, r1
 8008ade:	4591      	cmp	r9, r2
 8008ae0:	bfa8      	it	ge
 8008ae2:	4691      	movge	r9, r2
 8008ae4:	f1b9 0f00 	cmp.w	r9, #0
 8008ae8:	dc35      	bgt.n	8008b56 <_printf_float+0x3ae>
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008af2:	f104 0a1a 	add.w	sl, r4, #26
 8008af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	eba3 0309 	sub.w	r3, r3, r9
 8008b00:	4543      	cmp	r3, r8
 8008b02:	f77f af79 	ble.w	80089f8 <_printf_float+0x250>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4652      	mov	r2, sl
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f aeaa 	beq.w	800886a <_printf_float+0xc2>
 8008b16:	f108 0801 	add.w	r8, r8, #1
 8008b1a:	e7ec      	b.n	8008af6 <_printf_float+0x34e>
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4642      	mov	r2, r8
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b8      	blx	r7
 8008b26:	3001      	adds	r0, #1
 8008b28:	d1c0      	bne.n	8008aac <_printf_float+0x304>
 8008b2a:	e69e      	b.n	800886a <_printf_float+0xc2>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	9205      	str	r2, [sp, #20]
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	f43f ae97 	beq.w	800886a <_printf_float+0xc2>
 8008b3c:	9a05      	ldr	r2, [sp, #20]
 8008b3e:	f10b 0b01 	add.w	fp, fp, #1
 8008b42:	e7b9      	b.n	8008ab8 <_printf_float+0x310>
 8008b44:	ee18 3a10 	vmov	r3, s16
 8008b48:	4652      	mov	r2, sl
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	d1be      	bne.n	8008ad2 <_printf_float+0x32a>
 8008b54:	e689      	b.n	800886a <_printf_float+0xc2>
 8008b56:	9a05      	ldr	r2, [sp, #20]
 8008b58:	464b      	mov	r3, r9
 8008b5a:	4442      	add	r2, r8
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	d1c1      	bne.n	8008aea <_printf_float+0x342>
 8008b66:	e680      	b.n	800886a <_printf_float+0xc2>
 8008b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b6a:	2a01      	cmp	r2, #1
 8008b6c:	dc01      	bgt.n	8008b72 <_printf_float+0x3ca>
 8008b6e:	07db      	lsls	r3, r3, #31
 8008b70:	d538      	bpl.n	8008be4 <_printf_float+0x43c>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4642      	mov	r2, r8
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f ae74 	beq.w	800886a <_printf_float+0xc2>
 8008b82:	ee18 3a10 	vmov	r3, s16
 8008b86:	4652      	mov	r2, sl
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f ae6b 	beq.w	800886a <_printf_float+0xc2>
 8008b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f7f7 ffbc 	bl	8000b18 <__aeabi_dcmpeq>
 8008ba0:	b9d8      	cbnz	r0, 8008bda <_printf_float+0x432>
 8008ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba4:	f108 0201 	add.w	r2, r8, #1
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d10e      	bne.n	8008bd2 <_printf_float+0x42a>
 8008bb4:	e659      	b.n	800886a <_printf_float+0xc2>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4652      	mov	r2, sl
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f ae52 	beq.w	800886a <_printf_float+0xc2>
 8008bc6:	f108 0801 	add.w	r8, r8, #1
 8008bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	4543      	cmp	r3, r8
 8008bd0:	dcf1      	bgt.n	8008bb6 <_printf_float+0x40e>
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bd8:	e6dc      	b.n	8008994 <_printf_float+0x1ec>
 8008bda:	f04f 0800 	mov.w	r8, #0
 8008bde:	f104 0a1a 	add.w	sl, r4, #26
 8008be2:	e7f2      	b.n	8008bca <_printf_float+0x422>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4642      	mov	r2, r8
 8008be8:	e7df      	b.n	8008baa <_printf_float+0x402>
 8008bea:	2301      	movs	r3, #1
 8008bec:	464a      	mov	r2, r9
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f ae38 	beq.w	800886a <_printf_float+0xc2>
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c02:	1a5b      	subs	r3, r3, r1
 8008c04:	4543      	cmp	r3, r8
 8008c06:	dcf0      	bgt.n	8008bea <_printf_float+0x442>
 8008c08:	e6fa      	b.n	8008a00 <_printf_float+0x258>
 8008c0a:	f04f 0800 	mov.w	r8, #0
 8008c0e:	f104 0919 	add.w	r9, r4, #25
 8008c12:	e7f4      	b.n	8008bfe <_printf_float+0x456>

08008c14 <_printf_common>:
 8008c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	4616      	mov	r6, r2
 8008c1a:	4699      	mov	r9, r3
 8008c1c:	688a      	ldr	r2, [r1, #8]
 8008c1e:	690b      	ldr	r3, [r1, #16]
 8008c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	bfb8      	it	lt
 8008c28:	4613      	movlt	r3, r2
 8008c2a:	6033      	str	r3, [r6, #0]
 8008c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c30:	4607      	mov	r7, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b10a      	cbz	r2, 8008c3a <_printf_common+0x26>
 8008c36:	3301      	adds	r3, #1
 8008c38:	6033      	str	r3, [r6, #0]
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	0699      	lsls	r1, r3, #26
 8008c3e:	bf42      	ittt	mi
 8008c40:	6833      	ldrmi	r3, [r6, #0]
 8008c42:	3302      	addmi	r3, #2
 8008c44:	6033      	strmi	r3, [r6, #0]
 8008c46:	6825      	ldr	r5, [r4, #0]
 8008c48:	f015 0506 	ands.w	r5, r5, #6
 8008c4c:	d106      	bne.n	8008c5c <_printf_common+0x48>
 8008c4e:	f104 0a19 	add.w	sl, r4, #25
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	6832      	ldr	r2, [r6, #0]
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	dc26      	bgt.n	8008caa <_printf_common+0x96>
 8008c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c60:	1e13      	subs	r3, r2, #0
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	bf18      	it	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	0692      	lsls	r2, r2, #26
 8008c6a:	d42b      	bmi.n	8008cc4 <_printf_common+0xb0>
 8008c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c70:	4649      	mov	r1, r9
 8008c72:	4638      	mov	r0, r7
 8008c74:	47c0      	blx	r8
 8008c76:	3001      	adds	r0, #1
 8008c78:	d01e      	beq.n	8008cb8 <_printf_common+0xa4>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	68e5      	ldr	r5, [r4, #12]
 8008c7e:	6832      	ldr	r2, [r6, #0]
 8008c80:	f003 0306 	and.w	r3, r3, #6
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	bf08      	it	eq
 8008c88:	1aad      	subeq	r5, r5, r2
 8008c8a:	68a3      	ldr	r3, [r4, #8]
 8008c8c:	6922      	ldr	r2, [r4, #16]
 8008c8e:	bf0c      	ite	eq
 8008c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c94:	2500      	movne	r5, #0
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bfc4      	itt	gt
 8008c9a:	1a9b      	subgt	r3, r3, r2
 8008c9c:	18ed      	addgt	r5, r5, r3
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	341a      	adds	r4, #26
 8008ca2:	42b5      	cmp	r5, r6
 8008ca4:	d11a      	bne.n	8008cdc <_printf_common+0xc8>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e008      	b.n	8008cbc <_printf_common+0xa8>
 8008caa:	2301      	movs	r3, #1
 8008cac:	4652      	mov	r2, sl
 8008cae:	4649      	mov	r1, r9
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	47c0      	blx	r8
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d103      	bne.n	8008cc0 <_printf_common+0xac>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	e7c6      	b.n	8008c52 <_printf_common+0x3e>
 8008cc4:	18e1      	adds	r1, r4, r3
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	2030      	movs	r0, #48	; 0x30
 8008cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cce:	4422      	add	r2, r4
 8008cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cd8:	3302      	adds	r3, #2
 8008cda:	e7c7      	b.n	8008c6c <_printf_common+0x58>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	47c0      	blx	r8
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d0e6      	beq.n	8008cb8 <_printf_common+0xa4>
 8008cea:	3601      	adds	r6, #1
 8008cec:	e7d9      	b.n	8008ca2 <_printf_common+0x8e>
	...

08008cf0 <_printf_i>:
 8008cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	7e0f      	ldrb	r7, [r1, #24]
 8008cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cf8:	2f78      	cmp	r7, #120	; 0x78
 8008cfa:	4691      	mov	r9, r2
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	469a      	mov	sl, r3
 8008d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d06:	d807      	bhi.n	8008d18 <_printf_i+0x28>
 8008d08:	2f62      	cmp	r7, #98	; 0x62
 8008d0a:	d80a      	bhi.n	8008d22 <_printf_i+0x32>
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	f000 80d8 	beq.w	8008ec2 <_printf_i+0x1d2>
 8008d12:	2f58      	cmp	r7, #88	; 0x58
 8008d14:	f000 80a3 	beq.w	8008e5e <_printf_i+0x16e>
 8008d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d20:	e03a      	b.n	8008d98 <_printf_i+0xa8>
 8008d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d26:	2b15      	cmp	r3, #21
 8008d28:	d8f6      	bhi.n	8008d18 <_printf_i+0x28>
 8008d2a:	a101      	add	r1, pc, #4	; (adr r1, 8008d30 <_printf_i+0x40>)
 8008d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d30:	08008d89 	.word	0x08008d89
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008d19 	.word	0x08008d19
 8008d3c:	08008d19 	.word	0x08008d19
 8008d40:	08008d19 	.word	0x08008d19
 8008d44:	08008d19 	.word	0x08008d19
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008d19 	.word	0x08008d19
 8008d50:	08008d19 	.word	0x08008d19
 8008d54:	08008d19 	.word	0x08008d19
 8008d58:	08008d19 	.word	0x08008d19
 8008d5c:	08008ea9 	.word	0x08008ea9
 8008d60:	08008dcd 	.word	0x08008dcd
 8008d64:	08008e8b 	.word	0x08008e8b
 8008d68:	08008d19 	.word	0x08008d19
 8008d6c:	08008d19 	.word	0x08008d19
 8008d70:	08008ecb 	.word	0x08008ecb
 8008d74:	08008d19 	.word	0x08008d19
 8008d78:	08008dcd 	.word	0x08008dcd
 8008d7c:	08008d19 	.word	0x08008d19
 8008d80:	08008d19 	.word	0x08008d19
 8008d84:	08008e93 	.word	0x08008e93
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	1d1a      	adds	r2, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	602a      	str	r2, [r5, #0]
 8008d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0a3      	b.n	8008ee4 <_printf_i+0x1f4>
 8008d9c:	6820      	ldr	r0, [r4, #0]
 8008d9e:	6829      	ldr	r1, [r5, #0]
 8008da0:	0606      	lsls	r6, r0, #24
 8008da2:	f101 0304 	add.w	r3, r1, #4
 8008da6:	d50a      	bpl.n	8008dbe <_printf_i+0xce>
 8008da8:	680e      	ldr	r6, [r1, #0]
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	da03      	bge.n	8008db8 <_printf_i+0xc8>
 8008db0:	232d      	movs	r3, #45	; 0x2d
 8008db2:	4276      	negs	r6, r6
 8008db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db8:	485e      	ldr	r0, [pc, #376]	; (8008f34 <_printf_i+0x244>)
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e019      	b.n	8008df2 <_printf_i+0x102>
 8008dbe:	680e      	ldr	r6, [r1, #0]
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dc6:	bf18      	it	ne
 8008dc8:	b236      	sxthne	r6, r6
 8008dca:	e7ef      	b.n	8008dac <_printf_i+0xbc>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	6820      	ldr	r0, [r4, #0]
 8008dd0:	1d19      	adds	r1, r3, #4
 8008dd2:	6029      	str	r1, [r5, #0]
 8008dd4:	0601      	lsls	r1, r0, #24
 8008dd6:	d501      	bpl.n	8008ddc <_printf_i+0xec>
 8008dd8:	681e      	ldr	r6, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <_printf_i+0xf2>
 8008ddc:	0646      	lsls	r6, r0, #25
 8008dde:	d5fb      	bpl.n	8008dd8 <_printf_i+0xe8>
 8008de0:	881e      	ldrh	r6, [r3, #0]
 8008de2:	4854      	ldr	r0, [pc, #336]	; (8008f34 <_printf_i+0x244>)
 8008de4:	2f6f      	cmp	r7, #111	; 0x6f
 8008de6:	bf0c      	ite	eq
 8008de8:	2308      	moveq	r3, #8
 8008dea:	230a      	movne	r3, #10
 8008dec:	2100      	movs	r1, #0
 8008dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008df2:	6865      	ldr	r5, [r4, #4]
 8008df4:	60a5      	str	r5, [r4, #8]
 8008df6:	2d00      	cmp	r5, #0
 8008df8:	bfa2      	ittt	ge
 8008dfa:	6821      	ldrge	r1, [r4, #0]
 8008dfc:	f021 0104 	bicge.w	r1, r1, #4
 8008e00:	6021      	strge	r1, [r4, #0]
 8008e02:	b90e      	cbnz	r6, 8008e08 <_printf_i+0x118>
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	d04d      	beq.n	8008ea4 <_printf_i+0x1b4>
 8008e08:	4615      	mov	r5, r2
 8008e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008e12:	5dc7      	ldrb	r7, [r0, r7]
 8008e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e18:	4637      	mov	r7, r6
 8008e1a:	42bb      	cmp	r3, r7
 8008e1c:	460e      	mov	r6, r1
 8008e1e:	d9f4      	bls.n	8008e0a <_printf_i+0x11a>
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d10b      	bne.n	8008e3c <_printf_i+0x14c>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	07de      	lsls	r6, r3, #31
 8008e28:	d508      	bpl.n	8008e3c <_printf_i+0x14c>
 8008e2a:	6923      	ldr	r3, [r4, #16]
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	bfde      	ittt	le
 8008e32:	2330      	movle	r3, #48	; 0x30
 8008e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e3c:	1b52      	subs	r2, r2, r5
 8008e3e:	6122      	str	r2, [r4, #16]
 8008e40:	f8cd a000 	str.w	sl, [sp]
 8008e44:	464b      	mov	r3, r9
 8008e46:	aa03      	add	r2, sp, #12
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	f7ff fee2 	bl	8008c14 <_printf_common>
 8008e50:	3001      	adds	r0, #1
 8008e52:	d14c      	bne.n	8008eee <_printf_i+0x1fe>
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	b004      	add	sp, #16
 8008e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5e:	4835      	ldr	r0, [pc, #212]	; (8008f34 <_printf_i+0x244>)
 8008e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e64:	6829      	ldr	r1, [r5, #0]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e6c:	6029      	str	r1, [r5, #0]
 8008e6e:	061d      	lsls	r5, r3, #24
 8008e70:	d514      	bpl.n	8008e9c <_printf_i+0x1ac>
 8008e72:	07df      	lsls	r7, r3, #31
 8008e74:	bf44      	itt	mi
 8008e76:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7a:	6023      	strmi	r3, [r4, #0]
 8008e7c:	b91e      	cbnz	r6, 8008e86 <_printf_i+0x196>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	f023 0320 	bic.w	r3, r3, #32
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	2310      	movs	r3, #16
 8008e88:	e7b0      	b.n	8008dec <_printf_i+0xfc>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f043 0320 	orr.w	r3, r3, #32
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	2378      	movs	r3, #120	; 0x78
 8008e94:	4828      	ldr	r0, [pc, #160]	; (8008f38 <_printf_i+0x248>)
 8008e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e9a:	e7e3      	b.n	8008e64 <_printf_i+0x174>
 8008e9c:	0659      	lsls	r1, r3, #25
 8008e9e:	bf48      	it	mi
 8008ea0:	b2b6      	uxthmi	r6, r6
 8008ea2:	e7e6      	b.n	8008e72 <_printf_i+0x182>
 8008ea4:	4615      	mov	r5, r2
 8008ea6:	e7bb      	b.n	8008e20 <_printf_i+0x130>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	6826      	ldr	r6, [r4, #0]
 8008eac:	6961      	ldr	r1, [r4, #20]
 8008eae:	1d18      	adds	r0, r3, #4
 8008eb0:	6028      	str	r0, [r5, #0]
 8008eb2:	0635      	lsls	r5, r6, #24
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0x1cc>
 8008eb8:	6019      	str	r1, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <_printf_i+0x1d2>
 8008ebc:	0670      	lsls	r0, r6, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0x1c8>
 8008ec0:	8019      	strh	r1, [r3, #0]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	4615      	mov	r5, r2
 8008ec8:	e7ba      	b.n	8008e40 <_printf_i+0x150>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	1d1a      	adds	r2, r3, #4
 8008ece:	602a      	str	r2, [r5, #0]
 8008ed0:	681d      	ldr	r5, [r3, #0]
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f7f7 f9aa 	bl	8000230 <memchr>
 8008edc:	b108      	cbz	r0, 8008ee2 <_printf_i+0x1f2>
 8008ede:	1b40      	subs	r0, r0, r5
 8008ee0:	6060      	str	r0, [r4, #4]
 8008ee2:	6863      	ldr	r3, [r4, #4]
 8008ee4:	6123      	str	r3, [r4, #16]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eec:	e7a8      	b.n	8008e40 <_printf_i+0x150>
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	462a      	mov	r2, r5
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	47d0      	blx	sl
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d0ab      	beq.n	8008e54 <_printf_i+0x164>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	079b      	lsls	r3, r3, #30
 8008f00:	d413      	bmi.n	8008f2a <_printf_i+0x23a>
 8008f02:	68e0      	ldr	r0, [r4, #12]
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	4298      	cmp	r0, r3
 8008f08:	bfb8      	it	lt
 8008f0a:	4618      	movlt	r0, r3
 8008f0c:	e7a4      	b.n	8008e58 <_printf_i+0x168>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4632      	mov	r2, r6
 8008f12:	4649      	mov	r1, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	47d0      	blx	sl
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d09b      	beq.n	8008e54 <_printf_i+0x164>
 8008f1c:	3501      	adds	r5, #1
 8008f1e:	68e3      	ldr	r3, [r4, #12]
 8008f20:	9903      	ldr	r1, [sp, #12]
 8008f22:	1a5b      	subs	r3, r3, r1
 8008f24:	42ab      	cmp	r3, r5
 8008f26:	dcf2      	bgt.n	8008f0e <_printf_i+0x21e>
 8008f28:	e7eb      	b.n	8008f02 <_printf_i+0x212>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	f104 0619 	add.w	r6, r4, #25
 8008f30:	e7f5      	b.n	8008f1e <_printf_i+0x22e>
 8008f32:	bf00      	nop
 8008f34:	0800cf6a 	.word	0x0800cf6a
 8008f38:	0800cf7b 	.word	0x0800cf7b

08008f3c <_scanf_float>:
 8008f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	b087      	sub	sp, #28
 8008f42:	4617      	mov	r7, r2
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	688b      	ldr	r3, [r1, #8]
 8008f48:	1e5a      	subs	r2, r3, #1
 8008f4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f4e:	bf83      	ittte	hi
 8008f50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f54:	195b      	addhi	r3, r3, r5
 8008f56:	9302      	strhi	r3, [sp, #8]
 8008f58:	2300      	movls	r3, #0
 8008f5a:	bf86      	itte	hi
 8008f5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f60:	608b      	strhi	r3, [r1, #8]
 8008f62:	9302      	strls	r3, [sp, #8]
 8008f64:	680b      	ldr	r3, [r1, #0]
 8008f66:	468b      	mov	fp, r1
 8008f68:	2500      	movs	r5, #0
 8008f6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f6e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f76:	4680      	mov	r8, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	465e      	mov	r6, fp
 8008f7c:	46aa      	mov	sl, r5
 8008f7e:	46a9      	mov	r9, r5
 8008f80:	9501      	str	r5, [sp, #4]
 8008f82:	68a2      	ldr	r2, [r4, #8]
 8008f84:	b152      	cbz	r2, 8008f9c <_scanf_float+0x60>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8008f8c:	d864      	bhi.n	8009058 <_scanf_float+0x11c>
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	d83c      	bhi.n	800900c <_scanf_float+0xd0>
 8008f92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f96:	b2c8      	uxtb	r0, r1
 8008f98:	280e      	cmp	r0, #14
 8008f9a:	d93a      	bls.n	8009012 <_scanf_float+0xd6>
 8008f9c:	f1b9 0f00 	cmp.w	r9, #0
 8008fa0:	d003      	beq.n	8008faa <_scanf_float+0x6e>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fae:	f1ba 0f01 	cmp.w	sl, #1
 8008fb2:	f200 8113 	bhi.w	80091dc <_scanf_float+0x2a0>
 8008fb6:	455e      	cmp	r6, fp
 8008fb8:	f200 8105 	bhi.w	80091c6 <_scanf_float+0x28a>
 8008fbc:	2501      	movs	r5, #1
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	b007      	add	sp, #28
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fca:	2a0d      	cmp	r2, #13
 8008fcc:	d8e6      	bhi.n	8008f9c <_scanf_float+0x60>
 8008fce:	a101      	add	r1, pc, #4	; (adr r1, 8008fd4 <_scanf_float+0x98>)
 8008fd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fd4:	08009113 	.word	0x08009113
 8008fd8:	08008f9d 	.word	0x08008f9d
 8008fdc:	08008f9d 	.word	0x08008f9d
 8008fe0:	08008f9d 	.word	0x08008f9d
 8008fe4:	08009173 	.word	0x08009173
 8008fe8:	0800914b 	.word	0x0800914b
 8008fec:	08008f9d 	.word	0x08008f9d
 8008ff0:	08008f9d 	.word	0x08008f9d
 8008ff4:	08009121 	.word	0x08009121
 8008ff8:	08008f9d 	.word	0x08008f9d
 8008ffc:	08008f9d 	.word	0x08008f9d
 8009000:	08008f9d 	.word	0x08008f9d
 8009004:	08008f9d 	.word	0x08008f9d
 8009008:	080090d9 	.word	0x080090d9
 800900c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009010:	e7db      	b.n	8008fca <_scanf_float+0x8e>
 8009012:	290e      	cmp	r1, #14
 8009014:	d8c2      	bhi.n	8008f9c <_scanf_float+0x60>
 8009016:	a001      	add	r0, pc, #4	; (adr r0, 800901c <_scanf_float+0xe0>)
 8009018:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800901c:	080090cb 	.word	0x080090cb
 8009020:	08008f9d 	.word	0x08008f9d
 8009024:	080090cb 	.word	0x080090cb
 8009028:	0800915f 	.word	0x0800915f
 800902c:	08008f9d 	.word	0x08008f9d
 8009030:	08009079 	.word	0x08009079
 8009034:	080090b5 	.word	0x080090b5
 8009038:	080090b5 	.word	0x080090b5
 800903c:	080090b5 	.word	0x080090b5
 8009040:	080090b5 	.word	0x080090b5
 8009044:	080090b5 	.word	0x080090b5
 8009048:	080090b5 	.word	0x080090b5
 800904c:	080090b5 	.word	0x080090b5
 8009050:	080090b5 	.word	0x080090b5
 8009054:	080090b5 	.word	0x080090b5
 8009058:	2b6e      	cmp	r3, #110	; 0x6e
 800905a:	d809      	bhi.n	8009070 <_scanf_float+0x134>
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d8b2      	bhi.n	8008fc6 <_scanf_float+0x8a>
 8009060:	2b54      	cmp	r3, #84	; 0x54
 8009062:	d077      	beq.n	8009154 <_scanf_float+0x218>
 8009064:	2b59      	cmp	r3, #89	; 0x59
 8009066:	d199      	bne.n	8008f9c <_scanf_float+0x60>
 8009068:	2d07      	cmp	r5, #7
 800906a:	d197      	bne.n	8008f9c <_scanf_float+0x60>
 800906c:	2508      	movs	r5, #8
 800906e:	e029      	b.n	80090c4 <_scanf_float+0x188>
 8009070:	2b74      	cmp	r3, #116	; 0x74
 8009072:	d06f      	beq.n	8009154 <_scanf_float+0x218>
 8009074:	2b79      	cmp	r3, #121	; 0x79
 8009076:	e7f6      	b.n	8009066 <_scanf_float+0x12a>
 8009078:	6821      	ldr	r1, [r4, #0]
 800907a:	05c8      	lsls	r0, r1, #23
 800907c:	d51a      	bpl.n	80090b4 <_scanf_float+0x178>
 800907e:	9b02      	ldr	r3, [sp, #8]
 8009080:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009084:	6021      	str	r1, [r4, #0]
 8009086:	f109 0901 	add.w	r9, r9, #1
 800908a:	b11b      	cbz	r3, 8009094 <_scanf_float+0x158>
 800908c:	3b01      	subs	r3, #1
 800908e:	3201      	adds	r2, #1
 8009090:	9302      	str	r3, [sp, #8]
 8009092:	60a2      	str	r2, [r4, #8]
 8009094:	68a3      	ldr	r3, [r4, #8]
 8009096:	3b01      	subs	r3, #1
 8009098:	60a3      	str	r3, [r4, #8]
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	3301      	adds	r3, #1
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	f340 8084 	ble.w	80091b4 <_scanf_float+0x278>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	603b      	str	r3, [r7, #0]
 80090b2:	e766      	b.n	8008f82 <_scanf_float+0x46>
 80090b4:	eb1a 0f05 	cmn.w	sl, r5
 80090b8:	f47f af70 	bne.w	8008f9c <_scanf_float+0x60>
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090c2:	6022      	str	r2, [r4, #0]
 80090c4:	f806 3b01 	strb.w	r3, [r6], #1
 80090c8:	e7e4      	b.n	8009094 <_scanf_float+0x158>
 80090ca:	6822      	ldr	r2, [r4, #0]
 80090cc:	0610      	lsls	r0, r2, #24
 80090ce:	f57f af65 	bpl.w	8008f9c <_scanf_float+0x60>
 80090d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090d6:	e7f4      	b.n	80090c2 <_scanf_float+0x186>
 80090d8:	f1ba 0f00 	cmp.w	sl, #0
 80090dc:	d10e      	bne.n	80090fc <_scanf_float+0x1c0>
 80090de:	f1b9 0f00 	cmp.w	r9, #0
 80090e2:	d10e      	bne.n	8009102 <_scanf_float+0x1c6>
 80090e4:	6822      	ldr	r2, [r4, #0]
 80090e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090ee:	d108      	bne.n	8009102 <_scanf_float+0x1c6>
 80090f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090f4:	6022      	str	r2, [r4, #0]
 80090f6:	f04f 0a01 	mov.w	sl, #1
 80090fa:	e7e3      	b.n	80090c4 <_scanf_float+0x188>
 80090fc:	f1ba 0f02 	cmp.w	sl, #2
 8009100:	d055      	beq.n	80091ae <_scanf_float+0x272>
 8009102:	2d01      	cmp	r5, #1
 8009104:	d002      	beq.n	800910c <_scanf_float+0x1d0>
 8009106:	2d04      	cmp	r5, #4
 8009108:	f47f af48 	bne.w	8008f9c <_scanf_float+0x60>
 800910c:	3501      	adds	r5, #1
 800910e:	b2ed      	uxtb	r5, r5
 8009110:	e7d8      	b.n	80090c4 <_scanf_float+0x188>
 8009112:	f1ba 0f01 	cmp.w	sl, #1
 8009116:	f47f af41 	bne.w	8008f9c <_scanf_float+0x60>
 800911a:	f04f 0a02 	mov.w	sl, #2
 800911e:	e7d1      	b.n	80090c4 <_scanf_float+0x188>
 8009120:	b97d      	cbnz	r5, 8009142 <_scanf_float+0x206>
 8009122:	f1b9 0f00 	cmp.w	r9, #0
 8009126:	f47f af3c 	bne.w	8008fa2 <_scanf_float+0x66>
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009130:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009134:	f47f af39 	bne.w	8008faa <_scanf_float+0x6e>
 8009138:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800913c:	6022      	str	r2, [r4, #0]
 800913e:	2501      	movs	r5, #1
 8009140:	e7c0      	b.n	80090c4 <_scanf_float+0x188>
 8009142:	2d03      	cmp	r5, #3
 8009144:	d0e2      	beq.n	800910c <_scanf_float+0x1d0>
 8009146:	2d05      	cmp	r5, #5
 8009148:	e7de      	b.n	8009108 <_scanf_float+0x1cc>
 800914a:	2d02      	cmp	r5, #2
 800914c:	f47f af26 	bne.w	8008f9c <_scanf_float+0x60>
 8009150:	2503      	movs	r5, #3
 8009152:	e7b7      	b.n	80090c4 <_scanf_float+0x188>
 8009154:	2d06      	cmp	r5, #6
 8009156:	f47f af21 	bne.w	8008f9c <_scanf_float+0x60>
 800915a:	2507      	movs	r5, #7
 800915c:	e7b2      	b.n	80090c4 <_scanf_float+0x188>
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	0591      	lsls	r1, r2, #22
 8009162:	f57f af1b 	bpl.w	8008f9c <_scanf_float+0x60>
 8009166:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009170:	e7a8      	b.n	80090c4 <_scanf_float+0x188>
 8009172:	6822      	ldr	r2, [r4, #0]
 8009174:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009178:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800917c:	d006      	beq.n	800918c <_scanf_float+0x250>
 800917e:	0550      	lsls	r0, r2, #21
 8009180:	f57f af0c 	bpl.w	8008f9c <_scanf_float+0x60>
 8009184:	f1b9 0f00 	cmp.w	r9, #0
 8009188:	f43f af0f 	beq.w	8008faa <_scanf_float+0x6e>
 800918c:	0591      	lsls	r1, r2, #22
 800918e:	bf58      	it	pl
 8009190:	9901      	ldrpl	r1, [sp, #4]
 8009192:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009196:	bf58      	it	pl
 8009198:	eba9 0101 	subpl.w	r1, r9, r1
 800919c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80091a0:	bf58      	it	pl
 80091a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091a6:	6022      	str	r2, [r4, #0]
 80091a8:	f04f 0900 	mov.w	r9, #0
 80091ac:	e78a      	b.n	80090c4 <_scanf_float+0x188>
 80091ae:	f04f 0a03 	mov.w	sl, #3
 80091b2:	e787      	b.n	80090c4 <_scanf_float+0x188>
 80091b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091b8:	4639      	mov	r1, r7
 80091ba:	4640      	mov	r0, r8
 80091bc:	4798      	blx	r3
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f aedf 	beq.w	8008f82 <_scanf_float+0x46>
 80091c4:	e6ea      	b.n	8008f9c <_scanf_float+0x60>
 80091c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091ce:	463a      	mov	r2, r7
 80091d0:	4640      	mov	r0, r8
 80091d2:	4798      	blx	r3
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	e6ec      	b.n	8008fb6 <_scanf_float+0x7a>
 80091dc:	1e6b      	subs	r3, r5, #1
 80091de:	2b06      	cmp	r3, #6
 80091e0:	d825      	bhi.n	800922e <_scanf_float+0x2f2>
 80091e2:	2d02      	cmp	r5, #2
 80091e4:	d836      	bhi.n	8009254 <_scanf_float+0x318>
 80091e6:	455e      	cmp	r6, fp
 80091e8:	f67f aee8 	bls.w	8008fbc <_scanf_float+0x80>
 80091ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091f4:	463a      	mov	r2, r7
 80091f6:	4640      	mov	r0, r8
 80091f8:	4798      	blx	r3
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	e7f1      	b.n	80091e6 <_scanf_float+0x2aa>
 8009202:	9802      	ldr	r0, [sp, #8]
 8009204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009208:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800920c:	9002      	str	r0, [sp, #8]
 800920e:	463a      	mov	r2, r7
 8009210:	4640      	mov	r0, r8
 8009212:	4798      	blx	r3
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	3b01      	subs	r3, #1
 8009218:	6123      	str	r3, [r4, #16]
 800921a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800921e:	fa5f fa8a 	uxtb.w	sl, sl
 8009222:	f1ba 0f02 	cmp.w	sl, #2
 8009226:	d1ec      	bne.n	8009202 <_scanf_float+0x2c6>
 8009228:	3d03      	subs	r5, #3
 800922a:	b2ed      	uxtb	r5, r5
 800922c:	1b76      	subs	r6, r6, r5
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	05da      	lsls	r2, r3, #23
 8009232:	d52f      	bpl.n	8009294 <_scanf_float+0x358>
 8009234:	055b      	lsls	r3, r3, #21
 8009236:	d510      	bpl.n	800925a <_scanf_float+0x31e>
 8009238:	455e      	cmp	r6, fp
 800923a:	f67f aebf 	bls.w	8008fbc <_scanf_float+0x80>
 800923e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009246:	463a      	mov	r2, r7
 8009248:	4640      	mov	r0, r8
 800924a:	4798      	blx	r3
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	3b01      	subs	r3, #1
 8009250:	6123      	str	r3, [r4, #16]
 8009252:	e7f1      	b.n	8009238 <_scanf_float+0x2fc>
 8009254:	46aa      	mov	sl, r5
 8009256:	9602      	str	r6, [sp, #8]
 8009258:	e7df      	b.n	800921a <_scanf_float+0x2de>
 800925a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	2965      	cmp	r1, #101	; 0x65
 8009262:	f103 33ff 	add.w	r3, r3, #4294967295
 8009266:	f106 35ff 	add.w	r5, r6, #4294967295
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	d00c      	beq.n	8009288 <_scanf_float+0x34c>
 800926e:	2945      	cmp	r1, #69	; 0x45
 8009270:	d00a      	beq.n	8009288 <_scanf_float+0x34c>
 8009272:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009276:	463a      	mov	r2, r7
 8009278:	4640      	mov	r0, r8
 800927a:	4798      	blx	r3
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009282:	3b01      	subs	r3, #1
 8009284:	1eb5      	subs	r5, r6, #2
 8009286:	6123      	str	r3, [r4, #16]
 8009288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800928c:	463a      	mov	r2, r7
 800928e:	4640      	mov	r0, r8
 8009290:	4798      	blx	r3
 8009292:	462e      	mov	r6, r5
 8009294:	6825      	ldr	r5, [r4, #0]
 8009296:	f015 0510 	ands.w	r5, r5, #16
 800929a:	d159      	bne.n	8009350 <_scanf_float+0x414>
 800929c:	7035      	strb	r5, [r6, #0]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a8:	d11b      	bne.n	80092e2 <_scanf_float+0x3a6>
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	454b      	cmp	r3, r9
 80092ae:	eba3 0209 	sub.w	r2, r3, r9
 80092b2:	d123      	bne.n	80092fc <_scanf_float+0x3c0>
 80092b4:	2200      	movs	r2, #0
 80092b6:	4659      	mov	r1, fp
 80092b8:	4640      	mov	r0, r8
 80092ba:	f000 ff57 	bl	800a16c <_strtod_r>
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	f012 0f02 	tst.w	r2, #2
 80092c6:	ec57 6b10 	vmov	r6, r7, d0
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	d021      	beq.n	8009312 <_scanf_float+0x3d6>
 80092ce:	9903      	ldr	r1, [sp, #12]
 80092d0:	1d1a      	adds	r2, r3, #4
 80092d2:	600a      	str	r2, [r1, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	e9c3 6700 	strd	r6, r7, [r3]
 80092da:	68e3      	ldr	r3, [r4, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	60e3      	str	r3, [r4, #12]
 80092e0:	e66d      	b.n	8008fbe <_scanf_float+0x82>
 80092e2:	9b04      	ldr	r3, [sp, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0e5      	beq.n	80092b4 <_scanf_float+0x378>
 80092e8:	9905      	ldr	r1, [sp, #20]
 80092ea:	230a      	movs	r3, #10
 80092ec:	462a      	mov	r2, r5
 80092ee:	3101      	adds	r1, #1
 80092f0:	4640      	mov	r0, r8
 80092f2:	f000 ffc3 	bl	800a27c <_strtol_r>
 80092f6:	9b04      	ldr	r3, [sp, #16]
 80092f8:	9e05      	ldr	r6, [sp, #20]
 80092fa:	1ac2      	subs	r2, r0, r3
 80092fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009300:	429e      	cmp	r6, r3
 8009302:	bf28      	it	cs
 8009304:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009308:	4912      	ldr	r1, [pc, #72]	; (8009354 <_scanf_float+0x418>)
 800930a:	4630      	mov	r0, r6
 800930c:	f000 f8a6 	bl	800945c <siprintf>
 8009310:	e7d0      	b.n	80092b4 <_scanf_float+0x378>
 8009312:	9903      	ldr	r1, [sp, #12]
 8009314:	f012 0f04 	tst.w	r2, #4
 8009318:	f103 0204 	add.w	r2, r3, #4
 800931c:	600a      	str	r2, [r1, #0]
 800931e:	d1d9      	bne.n	80092d4 <_scanf_float+0x398>
 8009320:	f8d3 8000 	ldr.w	r8, [r3]
 8009324:	ee10 2a10 	vmov	r2, s0
 8009328:	ee10 0a10 	vmov	r0, s0
 800932c:	463b      	mov	r3, r7
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fc24 	bl	8000b7c <__aeabi_dcmpun>
 8009334:	b128      	cbz	r0, 8009342 <_scanf_float+0x406>
 8009336:	4808      	ldr	r0, [pc, #32]	; (8009358 <_scanf_float+0x41c>)
 8009338:	f000 f88a 	bl	8009450 <nanf>
 800933c:	ed88 0a00 	vstr	s0, [r8]
 8009340:	e7cb      	b.n	80092da <_scanf_float+0x39e>
 8009342:	4630      	mov	r0, r6
 8009344:	4639      	mov	r1, r7
 8009346:	f7f7 fc77 	bl	8000c38 <__aeabi_d2f>
 800934a:	f8c8 0000 	str.w	r0, [r8]
 800934e:	e7c4      	b.n	80092da <_scanf_float+0x39e>
 8009350:	2500      	movs	r5, #0
 8009352:	e634      	b.n	8008fbe <_scanf_float+0x82>
 8009354:	0800cf8c 	.word	0x0800cf8c
 8009358:	0800d398 	.word	0x0800d398

0800935c <cleanup_glue>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	460c      	mov	r4, r1
 8009360:	6809      	ldr	r1, [r1, #0]
 8009362:	4605      	mov	r5, r0
 8009364:	b109      	cbz	r1, 800936a <cleanup_glue+0xe>
 8009366:	f7ff fff9 	bl	800935c <cleanup_glue>
 800936a:	4621      	mov	r1, r4
 800936c:	4628      	mov	r0, r5
 800936e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009372:	f002 bf69 	b.w	800c248 <_free_r>
	...

08009378 <_reclaim_reent>:
 8009378:	4b2c      	ldr	r3, [pc, #176]	; (800942c <_reclaim_reent+0xb4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4283      	cmp	r3, r0
 800937e:	b570      	push	{r4, r5, r6, lr}
 8009380:	4604      	mov	r4, r0
 8009382:	d051      	beq.n	8009428 <_reclaim_reent+0xb0>
 8009384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009386:	b143      	cbz	r3, 800939a <_reclaim_reent+0x22>
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d14a      	bne.n	8009424 <_reclaim_reent+0xac>
 800938e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009390:	6819      	ldr	r1, [r3, #0]
 8009392:	b111      	cbz	r1, 800939a <_reclaim_reent+0x22>
 8009394:	4620      	mov	r0, r4
 8009396:	f002 ff57 	bl	800c248 <_free_r>
 800939a:	6961      	ldr	r1, [r4, #20]
 800939c:	b111      	cbz	r1, 80093a4 <_reclaim_reent+0x2c>
 800939e:	4620      	mov	r0, r4
 80093a0:	f002 ff52 	bl	800c248 <_free_r>
 80093a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093a6:	b111      	cbz	r1, 80093ae <_reclaim_reent+0x36>
 80093a8:	4620      	mov	r0, r4
 80093aa:	f002 ff4d 	bl	800c248 <_free_r>
 80093ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093b0:	b111      	cbz	r1, 80093b8 <_reclaim_reent+0x40>
 80093b2:	4620      	mov	r0, r4
 80093b4:	f002 ff48 	bl	800c248 <_free_r>
 80093b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80093ba:	b111      	cbz	r1, 80093c2 <_reclaim_reent+0x4a>
 80093bc:	4620      	mov	r0, r4
 80093be:	f002 ff43 	bl	800c248 <_free_r>
 80093c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80093c4:	b111      	cbz	r1, 80093cc <_reclaim_reent+0x54>
 80093c6:	4620      	mov	r0, r4
 80093c8:	f002 ff3e 	bl	800c248 <_free_r>
 80093cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80093ce:	b111      	cbz	r1, 80093d6 <_reclaim_reent+0x5e>
 80093d0:	4620      	mov	r0, r4
 80093d2:	f002 ff39 	bl	800c248 <_free_r>
 80093d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80093d8:	b111      	cbz	r1, 80093e0 <_reclaim_reent+0x68>
 80093da:	4620      	mov	r0, r4
 80093dc:	f002 ff34 	bl	800c248 <_free_r>
 80093e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e2:	b111      	cbz	r1, 80093ea <_reclaim_reent+0x72>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f002 ff2f 	bl	800c248 <_free_r>
 80093ea:	69a3      	ldr	r3, [r4, #24]
 80093ec:	b1e3      	cbz	r3, 8009428 <_reclaim_reent+0xb0>
 80093ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093f0:	4620      	mov	r0, r4
 80093f2:	4798      	blx	r3
 80093f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093f6:	b1b9      	cbz	r1, 8009428 <_reclaim_reent+0xb0>
 80093f8:	4620      	mov	r0, r4
 80093fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093fe:	f7ff bfad 	b.w	800935c <cleanup_glue>
 8009402:	5949      	ldr	r1, [r1, r5]
 8009404:	b941      	cbnz	r1, 8009418 <_reclaim_reent+0xa0>
 8009406:	3504      	adds	r5, #4
 8009408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800940a:	2d80      	cmp	r5, #128	; 0x80
 800940c:	68d9      	ldr	r1, [r3, #12]
 800940e:	d1f8      	bne.n	8009402 <_reclaim_reent+0x8a>
 8009410:	4620      	mov	r0, r4
 8009412:	f002 ff19 	bl	800c248 <_free_r>
 8009416:	e7ba      	b.n	800938e <_reclaim_reent+0x16>
 8009418:	680e      	ldr	r6, [r1, #0]
 800941a:	4620      	mov	r0, r4
 800941c:	f002 ff14 	bl	800c248 <_free_r>
 8009420:	4631      	mov	r1, r6
 8009422:	e7ef      	b.n	8009404 <_reclaim_reent+0x8c>
 8009424:	2500      	movs	r5, #0
 8009426:	e7ef      	b.n	8009408 <_reclaim_reent+0x90>
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	bf00      	nop
 800942c:	20000010 	.word	0x20000010

08009430 <_sbrk_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	; (800944c <_sbrk_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f8 fba2 	bl	8001b84 <_sbrk>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_sbrk_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_sbrk_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20002eb8 	.word	0x20002eb8

08009450 <nanf>:
 8009450:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009458 <nanf+0x8>
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	7fc00000 	.word	0x7fc00000

0800945c <siprintf>:
 800945c:	b40e      	push	{r1, r2, r3}
 800945e:	b500      	push	{lr}
 8009460:	b09c      	sub	sp, #112	; 0x70
 8009462:	ab1d      	add	r3, sp, #116	; 0x74
 8009464:	9002      	str	r0, [sp, #8]
 8009466:	9006      	str	r0, [sp, #24]
 8009468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800946c:	4809      	ldr	r0, [pc, #36]	; (8009494 <siprintf+0x38>)
 800946e:	9107      	str	r1, [sp, #28]
 8009470:	9104      	str	r1, [sp, #16]
 8009472:	4909      	ldr	r1, [pc, #36]	; (8009498 <siprintf+0x3c>)
 8009474:	f853 2b04 	ldr.w	r2, [r3], #4
 8009478:	9105      	str	r1, [sp, #20]
 800947a:	6800      	ldr	r0, [r0, #0]
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	a902      	add	r1, sp, #8
 8009480:	f002 ff8a 	bl	800c398 <_svfiprintf_r>
 8009484:	9b02      	ldr	r3, [sp, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	b01c      	add	sp, #112	; 0x70
 800948c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009490:	b003      	add	sp, #12
 8009492:	4770      	bx	lr
 8009494:	20000010 	.word	0x20000010
 8009498:	ffff0208 	.word	0xffff0208

0800949c <__sread>:
 800949c:	b510      	push	{r4, lr}
 800949e:	460c      	mov	r4, r1
 80094a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a4:	f003 f878 	bl	800c598 <_read_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	bfab      	itete	ge
 80094ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ae:	89a3      	ldrhlt	r3, [r4, #12]
 80094b0:	181b      	addge	r3, r3, r0
 80094b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094b6:	bfac      	ite	ge
 80094b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ba:	81a3      	strhlt	r3, [r4, #12]
 80094bc:	bd10      	pop	{r4, pc}

080094be <__swrite>:
 80094be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c2:	461f      	mov	r7, r3
 80094c4:	898b      	ldrh	r3, [r1, #12]
 80094c6:	05db      	lsls	r3, r3, #23
 80094c8:	4605      	mov	r5, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	4616      	mov	r6, r2
 80094ce:	d505      	bpl.n	80094dc <__swrite+0x1e>
 80094d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d4:	2302      	movs	r3, #2
 80094d6:	2200      	movs	r2, #0
 80094d8:	f002 f9a6 	bl	800b828 <_lseek_r>
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	4632      	mov	r2, r6
 80094ea:	463b      	mov	r3, r7
 80094ec:	4628      	mov	r0, r5
 80094ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	f000 bec5 	b.w	800a280 <_write_r>

080094f6 <__sseek>:
 80094f6:	b510      	push	{r4, lr}
 80094f8:	460c      	mov	r4, r1
 80094fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fe:	f002 f993 	bl	800b828 <_lseek_r>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	bf15      	itete	ne
 8009508:	6560      	strne	r0, [r4, #84]	; 0x54
 800950a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800950e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009512:	81a3      	strheq	r3, [r4, #12]
 8009514:	bf18      	it	ne
 8009516:	81a3      	strhne	r3, [r4, #12]
 8009518:	bd10      	pop	{r4, pc}

0800951a <__sclose>:
 800951a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951e:	f000 bec1 	b.w	800a2a4 <_close_r>

08009522 <sulp>:
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	4604      	mov	r4, r0
 8009526:	460d      	mov	r5, r1
 8009528:	ec45 4b10 	vmov	d0, r4, r5
 800952c:	4616      	mov	r6, r2
 800952e:	f002 fd25 	bl	800bf7c <__ulp>
 8009532:	ec51 0b10 	vmov	r0, r1, d0
 8009536:	b17e      	cbz	r6, 8009558 <sulp+0x36>
 8009538:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800953c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009540:	2b00      	cmp	r3, #0
 8009542:	dd09      	ble.n	8009558 <sulp+0x36>
 8009544:	051b      	lsls	r3, r3, #20
 8009546:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800954a:	2400      	movs	r4, #0
 800954c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009550:	4622      	mov	r2, r4
 8009552:	462b      	mov	r3, r5
 8009554:	f7f7 f878 	bl	8000648 <__aeabi_dmul>
 8009558:	bd70      	pop	{r4, r5, r6, pc}
 800955a:	0000      	movs	r0, r0
 800955c:	0000      	movs	r0, r0
	...

08009560 <_strtod_l>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	ed2d 8b02 	vpush	{d8}
 8009568:	b09d      	sub	sp, #116	; 0x74
 800956a:	461f      	mov	r7, r3
 800956c:	2300      	movs	r3, #0
 800956e:	9318      	str	r3, [sp, #96]	; 0x60
 8009570:	4ba2      	ldr	r3, [pc, #648]	; (80097fc <_strtod_l+0x29c>)
 8009572:	9213      	str	r2, [sp, #76]	; 0x4c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9305      	str	r3, [sp, #20]
 8009578:	4604      	mov	r4, r0
 800957a:	4618      	mov	r0, r3
 800957c:	4688      	mov	r8, r1
 800957e:	f7f6 fe4f 	bl	8000220 <strlen>
 8009582:	f04f 0a00 	mov.w	sl, #0
 8009586:	4605      	mov	r5, r0
 8009588:	f04f 0b00 	mov.w	fp, #0
 800958c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	2a2b      	cmp	r2, #43	; 0x2b
 8009596:	d04e      	beq.n	8009636 <_strtod_l+0xd6>
 8009598:	d83b      	bhi.n	8009612 <_strtod_l+0xb2>
 800959a:	2a0d      	cmp	r2, #13
 800959c:	d834      	bhi.n	8009608 <_strtod_l+0xa8>
 800959e:	2a08      	cmp	r2, #8
 80095a0:	d834      	bhi.n	800960c <_strtod_l+0xac>
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d03e      	beq.n	8009624 <_strtod_l+0xc4>
 80095a6:	2300      	movs	r3, #0
 80095a8:	930a      	str	r3, [sp, #40]	; 0x28
 80095aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80095ac:	7833      	ldrb	r3, [r6, #0]
 80095ae:	2b30      	cmp	r3, #48	; 0x30
 80095b0:	f040 80b0 	bne.w	8009714 <_strtod_l+0x1b4>
 80095b4:	7873      	ldrb	r3, [r6, #1]
 80095b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095ba:	2b58      	cmp	r3, #88	; 0x58
 80095bc:	d168      	bne.n	8009690 <_strtod_l+0x130>
 80095be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	ab18      	add	r3, sp, #96	; 0x60
 80095c4:	9702      	str	r7, [sp, #8]
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	4a8d      	ldr	r2, [pc, #564]	; (8009800 <_strtod_l+0x2a0>)
 80095ca:	ab19      	add	r3, sp, #100	; 0x64
 80095cc:	a917      	add	r1, sp, #92	; 0x5c
 80095ce:	4620      	mov	r0, r4
 80095d0:	f001 fe1e 	bl	800b210 <__gethex>
 80095d4:	f010 0707 	ands.w	r7, r0, #7
 80095d8:	4605      	mov	r5, r0
 80095da:	d005      	beq.n	80095e8 <_strtod_l+0x88>
 80095dc:	2f06      	cmp	r7, #6
 80095de:	d12c      	bne.n	800963a <_strtod_l+0xda>
 80095e0:	3601      	adds	r6, #1
 80095e2:	2300      	movs	r3, #0
 80095e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80095e6:	930a      	str	r3, [sp, #40]	; 0x28
 80095e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f040 8590 	bne.w	800a110 <_strtod_l+0xbb0>
 80095f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f2:	b1eb      	cbz	r3, 8009630 <_strtod_l+0xd0>
 80095f4:	4652      	mov	r2, sl
 80095f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095fa:	ec43 2b10 	vmov	d0, r2, r3
 80095fe:	b01d      	add	sp, #116	; 0x74
 8009600:	ecbd 8b02 	vpop	{d8}
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009608:	2a20      	cmp	r2, #32
 800960a:	d1cc      	bne.n	80095a6 <_strtod_l+0x46>
 800960c:	3301      	adds	r3, #1
 800960e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009610:	e7be      	b.n	8009590 <_strtod_l+0x30>
 8009612:	2a2d      	cmp	r2, #45	; 0x2d
 8009614:	d1c7      	bne.n	80095a6 <_strtod_l+0x46>
 8009616:	2201      	movs	r2, #1
 8009618:	920a      	str	r2, [sp, #40]	; 0x28
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	9217      	str	r2, [sp, #92]	; 0x5c
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1c2      	bne.n	80095aa <_strtod_l+0x4a>
 8009624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009626:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 856e 	bne.w	800a10c <_strtod_l+0xbac>
 8009630:	4652      	mov	r2, sl
 8009632:	465b      	mov	r3, fp
 8009634:	e7e1      	b.n	80095fa <_strtod_l+0x9a>
 8009636:	2200      	movs	r2, #0
 8009638:	e7ee      	b.n	8009618 <_strtod_l+0xb8>
 800963a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800963c:	b13a      	cbz	r2, 800964e <_strtod_l+0xee>
 800963e:	2135      	movs	r1, #53	; 0x35
 8009640:	a81a      	add	r0, sp, #104	; 0x68
 8009642:	f002 fda6 	bl	800c192 <__copybits>
 8009646:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009648:	4620      	mov	r0, r4
 800964a:	f002 f965 	bl	800b918 <_Bfree>
 800964e:	3f01      	subs	r7, #1
 8009650:	2f04      	cmp	r7, #4
 8009652:	d806      	bhi.n	8009662 <_strtod_l+0x102>
 8009654:	e8df f007 	tbb	[pc, r7]
 8009658:	1714030a 	.word	0x1714030a
 800965c:	0a          	.byte	0x0a
 800965d:	00          	.byte	0x00
 800965e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009662:	0728      	lsls	r0, r5, #28
 8009664:	d5c0      	bpl.n	80095e8 <_strtod_l+0x88>
 8009666:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800966a:	e7bd      	b.n	80095e8 <_strtod_l+0x88>
 800966c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009672:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009676:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800967a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800967e:	e7f0      	b.n	8009662 <_strtod_l+0x102>
 8009680:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009804 <_strtod_l+0x2a4>
 8009684:	e7ed      	b.n	8009662 <_strtod_l+0x102>
 8009686:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800968a:	f04f 3aff 	mov.w	sl, #4294967295
 800968e:	e7e8      	b.n	8009662 <_strtod_l+0x102>
 8009690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	9217      	str	r2, [sp, #92]	; 0x5c
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b30      	cmp	r3, #48	; 0x30
 800969a:	d0f9      	beq.n	8009690 <_strtod_l+0x130>
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0a3      	beq.n	80095e8 <_strtod_l+0x88>
 80096a0:	2301      	movs	r3, #1
 80096a2:	f04f 0900 	mov.w	r9, #0
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096aa:	9308      	str	r3, [sp, #32]
 80096ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80096b0:	464f      	mov	r7, r9
 80096b2:	220a      	movs	r2, #10
 80096b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80096b6:	7806      	ldrb	r6, [r0, #0]
 80096b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80096bc:	b2d9      	uxtb	r1, r3
 80096be:	2909      	cmp	r1, #9
 80096c0:	d92a      	bls.n	8009718 <_strtod_l+0x1b8>
 80096c2:	9905      	ldr	r1, [sp, #20]
 80096c4:	462a      	mov	r2, r5
 80096c6:	f002 ff83 	bl	800c5d0 <strncmp>
 80096ca:	b398      	cbz	r0, 8009734 <_strtod_l+0x1d4>
 80096cc:	2000      	movs	r0, #0
 80096ce:	4632      	mov	r2, r6
 80096d0:	463d      	mov	r5, r7
 80096d2:	9005      	str	r0, [sp, #20]
 80096d4:	4603      	mov	r3, r0
 80096d6:	2a65      	cmp	r2, #101	; 0x65
 80096d8:	d001      	beq.n	80096de <_strtod_l+0x17e>
 80096da:	2a45      	cmp	r2, #69	; 0x45
 80096dc:	d118      	bne.n	8009710 <_strtod_l+0x1b0>
 80096de:	b91d      	cbnz	r5, 80096e8 <_strtod_l+0x188>
 80096e0:	9a04      	ldr	r2, [sp, #16]
 80096e2:	4302      	orrs	r2, r0
 80096e4:	d09e      	beq.n	8009624 <_strtod_l+0xc4>
 80096e6:	2500      	movs	r5, #0
 80096e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80096ec:	f108 0201 	add.w	r2, r8, #1
 80096f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80096f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80096f6:	2a2b      	cmp	r2, #43	; 0x2b
 80096f8:	d075      	beq.n	80097e6 <_strtod_l+0x286>
 80096fa:	2a2d      	cmp	r2, #45	; 0x2d
 80096fc:	d07b      	beq.n	80097f6 <_strtod_l+0x296>
 80096fe:	f04f 0c00 	mov.w	ip, #0
 8009702:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009706:	2909      	cmp	r1, #9
 8009708:	f240 8082 	bls.w	8009810 <_strtod_l+0x2b0>
 800970c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009710:	2600      	movs	r6, #0
 8009712:	e09d      	b.n	8009850 <_strtod_l+0x2f0>
 8009714:	2300      	movs	r3, #0
 8009716:	e7c4      	b.n	80096a2 <_strtod_l+0x142>
 8009718:	2f08      	cmp	r7, #8
 800971a:	bfd8      	it	le
 800971c:	9907      	ldrle	r1, [sp, #28]
 800971e:	f100 0001 	add.w	r0, r0, #1
 8009722:	bfda      	itte	le
 8009724:	fb02 3301 	mlale	r3, r2, r1, r3
 8009728:	9307      	strle	r3, [sp, #28]
 800972a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800972e:	3701      	adds	r7, #1
 8009730:	9017      	str	r0, [sp, #92]	; 0x5c
 8009732:	e7bf      	b.n	80096b4 <_strtod_l+0x154>
 8009734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009736:	195a      	adds	r2, r3, r5
 8009738:	9217      	str	r2, [sp, #92]	; 0x5c
 800973a:	5d5a      	ldrb	r2, [r3, r5]
 800973c:	2f00      	cmp	r7, #0
 800973e:	d037      	beq.n	80097b0 <_strtod_l+0x250>
 8009740:	9005      	str	r0, [sp, #20]
 8009742:	463d      	mov	r5, r7
 8009744:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009748:	2b09      	cmp	r3, #9
 800974a:	d912      	bls.n	8009772 <_strtod_l+0x212>
 800974c:	2301      	movs	r3, #1
 800974e:	e7c2      	b.n	80096d6 <_strtod_l+0x176>
 8009750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	9217      	str	r2, [sp, #92]	; 0x5c
 8009756:	785a      	ldrb	r2, [r3, #1]
 8009758:	3001      	adds	r0, #1
 800975a:	2a30      	cmp	r2, #48	; 0x30
 800975c:	d0f8      	beq.n	8009750 <_strtod_l+0x1f0>
 800975e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009762:	2b08      	cmp	r3, #8
 8009764:	f200 84d9 	bhi.w	800a11a <_strtod_l+0xbba>
 8009768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800976a:	9005      	str	r0, [sp, #20]
 800976c:	2000      	movs	r0, #0
 800976e:	9308      	str	r3, [sp, #32]
 8009770:	4605      	mov	r5, r0
 8009772:	3a30      	subs	r2, #48	; 0x30
 8009774:	f100 0301 	add.w	r3, r0, #1
 8009778:	d014      	beq.n	80097a4 <_strtod_l+0x244>
 800977a:	9905      	ldr	r1, [sp, #20]
 800977c:	4419      	add	r1, r3
 800977e:	9105      	str	r1, [sp, #20]
 8009780:	462b      	mov	r3, r5
 8009782:	eb00 0e05 	add.w	lr, r0, r5
 8009786:	210a      	movs	r1, #10
 8009788:	4573      	cmp	r3, lr
 800978a:	d113      	bne.n	80097b4 <_strtod_l+0x254>
 800978c:	182b      	adds	r3, r5, r0
 800978e:	2b08      	cmp	r3, #8
 8009790:	f105 0501 	add.w	r5, r5, #1
 8009794:	4405      	add	r5, r0
 8009796:	dc1c      	bgt.n	80097d2 <_strtod_l+0x272>
 8009798:	9907      	ldr	r1, [sp, #28]
 800979a:	230a      	movs	r3, #10
 800979c:	fb03 2301 	mla	r3, r3, r1, r2
 80097a0:	9307      	str	r3, [sp, #28]
 80097a2:	2300      	movs	r3, #0
 80097a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097a6:	1c51      	adds	r1, r2, #1
 80097a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80097aa:	7852      	ldrb	r2, [r2, #1]
 80097ac:	4618      	mov	r0, r3
 80097ae:	e7c9      	b.n	8009744 <_strtod_l+0x1e4>
 80097b0:	4638      	mov	r0, r7
 80097b2:	e7d2      	b.n	800975a <_strtod_l+0x1fa>
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	dc04      	bgt.n	80097c2 <_strtod_l+0x262>
 80097b8:	9e07      	ldr	r6, [sp, #28]
 80097ba:	434e      	muls	r6, r1
 80097bc:	9607      	str	r6, [sp, #28]
 80097be:	3301      	adds	r3, #1
 80097c0:	e7e2      	b.n	8009788 <_strtod_l+0x228>
 80097c2:	f103 0c01 	add.w	ip, r3, #1
 80097c6:	f1bc 0f10 	cmp.w	ip, #16
 80097ca:	bfd8      	it	le
 80097cc:	fb01 f909 	mulle.w	r9, r1, r9
 80097d0:	e7f5      	b.n	80097be <_strtod_l+0x25e>
 80097d2:	2d10      	cmp	r5, #16
 80097d4:	bfdc      	itt	le
 80097d6:	230a      	movle	r3, #10
 80097d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80097dc:	e7e1      	b.n	80097a2 <_strtod_l+0x242>
 80097de:	2300      	movs	r3, #0
 80097e0:	9305      	str	r3, [sp, #20]
 80097e2:	2301      	movs	r3, #1
 80097e4:	e77c      	b.n	80096e0 <_strtod_l+0x180>
 80097e6:	f04f 0c00 	mov.w	ip, #0
 80097ea:	f108 0202 	add.w	r2, r8, #2
 80097ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80097f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80097f4:	e785      	b.n	8009702 <_strtod_l+0x1a2>
 80097f6:	f04f 0c01 	mov.w	ip, #1
 80097fa:	e7f6      	b.n	80097ea <_strtod_l+0x28a>
 80097fc:	0800d1e0 	.word	0x0800d1e0
 8009800:	0800cf94 	.word	0x0800cf94
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800980a:	1c51      	adds	r1, r2, #1
 800980c:	9117      	str	r1, [sp, #92]	; 0x5c
 800980e:	7852      	ldrb	r2, [r2, #1]
 8009810:	2a30      	cmp	r2, #48	; 0x30
 8009812:	d0f9      	beq.n	8009808 <_strtod_l+0x2a8>
 8009814:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009818:	2908      	cmp	r1, #8
 800981a:	f63f af79 	bhi.w	8009710 <_strtod_l+0x1b0>
 800981e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009822:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009824:	9206      	str	r2, [sp, #24]
 8009826:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009828:	1c51      	adds	r1, r2, #1
 800982a:	9117      	str	r1, [sp, #92]	; 0x5c
 800982c:	7852      	ldrb	r2, [r2, #1]
 800982e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009832:	2e09      	cmp	r6, #9
 8009834:	d937      	bls.n	80098a6 <_strtod_l+0x346>
 8009836:	9e06      	ldr	r6, [sp, #24]
 8009838:	1b89      	subs	r1, r1, r6
 800983a:	2908      	cmp	r1, #8
 800983c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009840:	dc02      	bgt.n	8009848 <_strtod_l+0x2e8>
 8009842:	4576      	cmp	r6, lr
 8009844:	bfa8      	it	ge
 8009846:	4676      	movge	r6, lr
 8009848:	f1bc 0f00 	cmp.w	ip, #0
 800984c:	d000      	beq.n	8009850 <_strtod_l+0x2f0>
 800984e:	4276      	negs	r6, r6
 8009850:	2d00      	cmp	r5, #0
 8009852:	d14d      	bne.n	80098f0 <_strtod_l+0x390>
 8009854:	9904      	ldr	r1, [sp, #16]
 8009856:	4301      	orrs	r1, r0
 8009858:	f47f aec6 	bne.w	80095e8 <_strtod_l+0x88>
 800985c:	2b00      	cmp	r3, #0
 800985e:	f47f aee1 	bne.w	8009624 <_strtod_l+0xc4>
 8009862:	2a69      	cmp	r2, #105	; 0x69
 8009864:	d027      	beq.n	80098b6 <_strtod_l+0x356>
 8009866:	dc24      	bgt.n	80098b2 <_strtod_l+0x352>
 8009868:	2a49      	cmp	r2, #73	; 0x49
 800986a:	d024      	beq.n	80098b6 <_strtod_l+0x356>
 800986c:	2a4e      	cmp	r2, #78	; 0x4e
 800986e:	f47f aed9 	bne.w	8009624 <_strtod_l+0xc4>
 8009872:	499f      	ldr	r1, [pc, #636]	; (8009af0 <_strtod_l+0x590>)
 8009874:	a817      	add	r0, sp, #92	; 0x5c
 8009876:	f001 ff23 	bl	800b6c0 <__match>
 800987a:	2800      	cmp	r0, #0
 800987c:	f43f aed2 	beq.w	8009624 <_strtod_l+0xc4>
 8009880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b28      	cmp	r3, #40	; 0x28
 8009886:	d12d      	bne.n	80098e4 <_strtod_l+0x384>
 8009888:	499a      	ldr	r1, [pc, #616]	; (8009af4 <_strtod_l+0x594>)
 800988a:	aa1a      	add	r2, sp, #104	; 0x68
 800988c:	a817      	add	r0, sp, #92	; 0x5c
 800988e:	f001 ff2b 	bl	800b6e8 <__hexnan>
 8009892:	2805      	cmp	r0, #5
 8009894:	d126      	bne.n	80098e4 <_strtod_l+0x384>
 8009896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009898:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800989c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80098a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80098a4:	e6a0      	b.n	80095e8 <_strtod_l+0x88>
 80098a6:	210a      	movs	r1, #10
 80098a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80098ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80098b0:	e7b9      	b.n	8009826 <_strtod_l+0x2c6>
 80098b2:	2a6e      	cmp	r2, #110	; 0x6e
 80098b4:	e7db      	b.n	800986e <_strtod_l+0x30e>
 80098b6:	4990      	ldr	r1, [pc, #576]	; (8009af8 <_strtod_l+0x598>)
 80098b8:	a817      	add	r0, sp, #92	; 0x5c
 80098ba:	f001 ff01 	bl	800b6c0 <__match>
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f aeb0 	beq.w	8009624 <_strtod_l+0xc4>
 80098c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098c6:	498d      	ldr	r1, [pc, #564]	; (8009afc <_strtod_l+0x59c>)
 80098c8:	3b01      	subs	r3, #1
 80098ca:	a817      	add	r0, sp, #92	; 0x5c
 80098cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80098ce:	f001 fef7 	bl	800b6c0 <__match>
 80098d2:	b910      	cbnz	r0, 80098da <_strtod_l+0x37a>
 80098d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098d6:	3301      	adds	r3, #1
 80098d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80098da:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009b0c <_strtod_l+0x5ac>
 80098de:	f04f 0a00 	mov.w	sl, #0
 80098e2:	e681      	b.n	80095e8 <_strtod_l+0x88>
 80098e4:	4886      	ldr	r0, [pc, #536]	; (8009b00 <_strtod_l+0x5a0>)
 80098e6:	f002 fe6b 	bl	800c5c0 <nan>
 80098ea:	ec5b ab10 	vmov	sl, fp, d0
 80098ee:	e67b      	b.n	80095e8 <_strtod_l+0x88>
 80098f0:	9b05      	ldr	r3, [sp, #20]
 80098f2:	9807      	ldr	r0, [sp, #28]
 80098f4:	1af3      	subs	r3, r6, r3
 80098f6:	2f00      	cmp	r7, #0
 80098f8:	bf08      	it	eq
 80098fa:	462f      	moveq	r7, r5
 80098fc:	2d10      	cmp	r5, #16
 80098fe:	9306      	str	r3, [sp, #24]
 8009900:	46a8      	mov	r8, r5
 8009902:	bfa8      	it	ge
 8009904:	f04f 0810 	movge.w	r8, #16
 8009908:	f7f6 fe24 	bl	8000554 <__aeabi_ui2d>
 800990c:	2d09      	cmp	r5, #9
 800990e:	4682      	mov	sl, r0
 8009910:	468b      	mov	fp, r1
 8009912:	dd13      	ble.n	800993c <_strtod_l+0x3dc>
 8009914:	4b7b      	ldr	r3, [pc, #492]	; (8009b04 <_strtod_l+0x5a4>)
 8009916:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800991a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800991e:	f7f6 fe93 	bl	8000648 <__aeabi_dmul>
 8009922:	4682      	mov	sl, r0
 8009924:	4648      	mov	r0, r9
 8009926:	468b      	mov	fp, r1
 8009928:	f7f6 fe14 	bl	8000554 <__aeabi_ui2d>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4650      	mov	r0, sl
 8009932:	4659      	mov	r1, fp
 8009934:	f7f6 fcd2 	bl	80002dc <__adddf3>
 8009938:	4682      	mov	sl, r0
 800993a:	468b      	mov	fp, r1
 800993c:	2d0f      	cmp	r5, #15
 800993e:	dc38      	bgt.n	80099b2 <_strtod_l+0x452>
 8009940:	9b06      	ldr	r3, [sp, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f43f ae50 	beq.w	80095e8 <_strtod_l+0x88>
 8009948:	dd24      	ble.n	8009994 <_strtod_l+0x434>
 800994a:	2b16      	cmp	r3, #22
 800994c:	dc0b      	bgt.n	8009966 <_strtod_l+0x406>
 800994e:	496d      	ldr	r1, [pc, #436]	; (8009b04 <_strtod_l+0x5a4>)
 8009950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009958:	4652      	mov	r2, sl
 800995a:	465b      	mov	r3, fp
 800995c:	f7f6 fe74 	bl	8000648 <__aeabi_dmul>
 8009960:	4682      	mov	sl, r0
 8009962:	468b      	mov	fp, r1
 8009964:	e640      	b.n	80095e8 <_strtod_l+0x88>
 8009966:	9a06      	ldr	r2, [sp, #24]
 8009968:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800996c:	4293      	cmp	r3, r2
 800996e:	db20      	blt.n	80099b2 <_strtod_l+0x452>
 8009970:	4c64      	ldr	r4, [pc, #400]	; (8009b04 <_strtod_l+0x5a4>)
 8009972:	f1c5 050f 	rsb	r5, r5, #15
 8009976:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800997a:	4652      	mov	r2, sl
 800997c:	465b      	mov	r3, fp
 800997e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009982:	f7f6 fe61 	bl	8000648 <__aeabi_dmul>
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	1b5d      	subs	r5, r3, r5
 800998a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800998e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009992:	e7e3      	b.n	800995c <_strtod_l+0x3fc>
 8009994:	9b06      	ldr	r3, [sp, #24]
 8009996:	3316      	adds	r3, #22
 8009998:	db0b      	blt.n	80099b2 <_strtod_l+0x452>
 800999a:	9b05      	ldr	r3, [sp, #20]
 800999c:	1b9e      	subs	r6, r3, r6
 800999e:	4b59      	ldr	r3, [pc, #356]	; (8009b04 <_strtod_l+0x5a4>)
 80099a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80099a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	f7f6 ff76 	bl	800089c <__aeabi_ddiv>
 80099b0:	e7d6      	b.n	8009960 <_strtod_l+0x400>
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	eba5 0808 	sub.w	r8, r5, r8
 80099b8:	4498      	add	r8, r3
 80099ba:	f1b8 0f00 	cmp.w	r8, #0
 80099be:	dd74      	ble.n	8009aaa <_strtod_l+0x54a>
 80099c0:	f018 030f 	ands.w	r3, r8, #15
 80099c4:	d00a      	beq.n	80099dc <_strtod_l+0x47c>
 80099c6:	494f      	ldr	r1, [pc, #316]	; (8009b04 <_strtod_l+0x5a4>)
 80099c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099cc:	4652      	mov	r2, sl
 80099ce:	465b      	mov	r3, fp
 80099d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d4:	f7f6 fe38 	bl	8000648 <__aeabi_dmul>
 80099d8:	4682      	mov	sl, r0
 80099da:	468b      	mov	fp, r1
 80099dc:	f038 080f 	bics.w	r8, r8, #15
 80099e0:	d04f      	beq.n	8009a82 <_strtod_l+0x522>
 80099e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80099e6:	dd22      	ble.n	8009a2e <_strtod_l+0x4ce>
 80099e8:	2500      	movs	r5, #0
 80099ea:	462e      	mov	r6, r5
 80099ec:	9507      	str	r5, [sp, #28]
 80099ee:	9505      	str	r5, [sp, #20]
 80099f0:	2322      	movs	r3, #34	; 0x22
 80099f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009b0c <_strtod_l+0x5ac>
 80099f6:	6023      	str	r3, [r4, #0]
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f43f adf2 	beq.w	80095e8 <_strtod_l+0x88>
 8009a04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a06:	4620      	mov	r0, r4
 8009a08:	f001 ff86 	bl	800b918 <_Bfree>
 8009a0c:	9905      	ldr	r1, [sp, #20]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f001 ff82 	bl	800b918 <_Bfree>
 8009a14:	4631      	mov	r1, r6
 8009a16:	4620      	mov	r0, r4
 8009a18:	f001 ff7e 	bl	800b918 <_Bfree>
 8009a1c:	9907      	ldr	r1, [sp, #28]
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f001 ff7a 	bl	800b918 <_Bfree>
 8009a24:	4629      	mov	r1, r5
 8009a26:	4620      	mov	r0, r4
 8009a28:	f001 ff76 	bl	800b918 <_Bfree>
 8009a2c:	e5dc      	b.n	80095e8 <_strtod_l+0x88>
 8009a2e:	4b36      	ldr	r3, [pc, #216]	; (8009b08 <_strtod_l+0x5a8>)
 8009a30:	9304      	str	r3, [sp, #16]
 8009a32:	2300      	movs	r3, #0
 8009a34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a38:	4650      	mov	r0, sl
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	4699      	mov	r9, r3
 8009a3e:	f1b8 0f01 	cmp.w	r8, #1
 8009a42:	dc21      	bgt.n	8009a88 <_strtod_l+0x528>
 8009a44:	b10b      	cbz	r3, 8009a4a <_strtod_l+0x4ea>
 8009a46:	4682      	mov	sl, r0
 8009a48:	468b      	mov	fp, r1
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <_strtod_l+0x5a8>)
 8009a4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009a54:	4652      	mov	r2, sl
 8009a56:	465b      	mov	r3, fp
 8009a58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009a5c:	f7f6 fdf4 	bl	8000648 <__aeabi_dmul>
 8009a60:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <_strtod_l+0x5ac>)
 8009a62:	460a      	mov	r2, r1
 8009a64:	400b      	ands	r3, r1
 8009a66:	492a      	ldr	r1, [pc, #168]	; (8009b10 <_strtod_l+0x5b0>)
 8009a68:	428b      	cmp	r3, r1
 8009a6a:	4682      	mov	sl, r0
 8009a6c:	d8bc      	bhi.n	80099e8 <_strtod_l+0x488>
 8009a6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a72:	428b      	cmp	r3, r1
 8009a74:	bf86      	itte	hi
 8009a76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b14 <_strtod_l+0x5b4>
 8009a7a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009a82:	2300      	movs	r3, #0
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	e084      	b.n	8009b92 <_strtod_l+0x632>
 8009a88:	f018 0f01 	tst.w	r8, #1
 8009a8c:	d005      	beq.n	8009a9a <_strtod_l+0x53a>
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fdd8 	bl	8000648 <__aeabi_dmul>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	9a04      	ldr	r2, [sp, #16]
 8009a9c:	3208      	adds	r2, #8
 8009a9e:	f109 0901 	add.w	r9, r9, #1
 8009aa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009aa6:	9204      	str	r2, [sp, #16]
 8009aa8:	e7c9      	b.n	8009a3e <_strtod_l+0x4de>
 8009aaa:	d0ea      	beq.n	8009a82 <_strtod_l+0x522>
 8009aac:	f1c8 0800 	rsb	r8, r8, #0
 8009ab0:	f018 020f 	ands.w	r2, r8, #15
 8009ab4:	d00a      	beq.n	8009acc <_strtod_l+0x56c>
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <_strtod_l+0x5a4>)
 8009ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009abc:	4650      	mov	r0, sl
 8009abe:	4659      	mov	r1, fp
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 feea 	bl	800089c <__aeabi_ddiv>
 8009ac8:	4682      	mov	sl, r0
 8009aca:	468b      	mov	fp, r1
 8009acc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ad0:	d0d7      	beq.n	8009a82 <_strtod_l+0x522>
 8009ad2:	f1b8 0f1f 	cmp.w	r8, #31
 8009ad6:	dd1f      	ble.n	8009b18 <_strtod_l+0x5b8>
 8009ad8:	2500      	movs	r5, #0
 8009ada:	462e      	mov	r6, r5
 8009adc:	9507      	str	r5, [sp, #28]
 8009ade:	9505      	str	r5, [sp, #20]
 8009ae0:	2322      	movs	r3, #34	; 0x22
 8009ae2:	f04f 0a00 	mov.w	sl, #0
 8009ae6:	f04f 0b00 	mov.w	fp, #0
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	e786      	b.n	80099fc <_strtod_l+0x49c>
 8009aee:	bf00      	nop
 8009af0:	0800cf65 	.word	0x0800cf65
 8009af4:	0800cfa8 	.word	0x0800cfa8
 8009af8:	0800cf5d 	.word	0x0800cf5d
 8009afc:	0800d0ec 	.word	0x0800d0ec
 8009b00:	0800d398 	.word	0x0800d398
 8009b04:	0800d278 	.word	0x0800d278
 8009b08:	0800d250 	.word	0x0800d250
 8009b0c:	7ff00000 	.word	0x7ff00000
 8009b10:	7ca00000 	.word	0x7ca00000
 8009b14:	7fefffff 	.word	0x7fefffff
 8009b18:	f018 0310 	ands.w	r3, r8, #16
 8009b1c:	bf18      	it	ne
 8009b1e:	236a      	movne	r3, #106	; 0x6a
 8009b20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ed0 <_strtod_l+0x970>
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	4650      	mov	r0, sl
 8009b28:	4659      	mov	r1, fp
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f018 0f01 	tst.w	r8, #1
 8009b30:	d004      	beq.n	8009b3c <_strtod_l+0x5dc>
 8009b32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b36:	f7f6 fd87 	bl	8000648 <__aeabi_dmul>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b40:	f109 0908 	add.w	r9, r9, #8
 8009b44:	d1f2      	bne.n	8009b2c <_strtod_l+0x5cc>
 8009b46:	b10b      	cbz	r3, 8009b4c <_strtod_l+0x5ec>
 8009b48:	4682      	mov	sl, r0
 8009b4a:	468b      	mov	fp, r1
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	b1c3      	cbz	r3, 8009b82 <_strtod_l+0x622>
 8009b50:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	4659      	mov	r1, fp
 8009b5c:	dd11      	ble.n	8009b82 <_strtod_l+0x622>
 8009b5e:	2b1f      	cmp	r3, #31
 8009b60:	f340 8124 	ble.w	8009dac <_strtod_l+0x84c>
 8009b64:	2b34      	cmp	r3, #52	; 0x34
 8009b66:	bfde      	ittt	le
 8009b68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009b6c:	f04f 33ff 	movle.w	r3, #4294967295
 8009b70:	fa03 f202 	lslle.w	r2, r3, r2
 8009b74:	f04f 0a00 	mov.w	sl, #0
 8009b78:	bfcc      	ite	gt
 8009b7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b7e:	ea02 0b01 	andle.w	fp, r2, r1
 8009b82:	2200      	movs	r2, #0
 8009b84:	2300      	movs	r3, #0
 8009b86:	4650      	mov	r0, sl
 8009b88:	4659      	mov	r1, fp
 8009b8a:	f7f6 ffc5 	bl	8000b18 <__aeabi_dcmpeq>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1a2      	bne.n	8009ad8 <_strtod_l+0x578>
 8009b92:	9b07      	ldr	r3, [sp, #28]
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	9908      	ldr	r1, [sp, #32]
 8009b98:	462b      	mov	r3, r5
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f001 ff23 	bl	800b9e8 <__s2b>
 8009ba2:	9007      	str	r0, [sp, #28]
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	f43f af1f 	beq.w	80099e8 <_strtod_l+0x488>
 8009baa:	9b05      	ldr	r3, [sp, #20]
 8009bac:	1b9e      	subs	r6, r3, r6
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfb4      	ite	lt
 8009bb4:	4633      	movlt	r3, r6
 8009bb6:	2300      	movge	r3, #0
 8009bb8:	930c      	str	r3, [sp, #48]	; 0x30
 8009bba:	9b06      	ldr	r3, [sp, #24]
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8009bc4:	462e      	mov	r6, r5
 8009bc6:	9b07      	ldr	r3, [sp, #28]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	6859      	ldr	r1, [r3, #4]
 8009bcc:	f001 fe64 	bl	800b898 <_Balloc>
 8009bd0:	9005      	str	r0, [sp, #20]
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f43f af0c 	beq.w	80099f0 <_strtod_l+0x490>
 8009bd8:	9b07      	ldr	r3, [sp, #28]
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	3202      	adds	r2, #2
 8009bde:	f103 010c 	add.w	r1, r3, #12
 8009be2:	0092      	lsls	r2, r2, #2
 8009be4:	300c      	adds	r0, #12
 8009be6:	f7fe fc94 	bl	8008512 <memcpy>
 8009bea:	ec4b ab10 	vmov	d0, sl, fp
 8009bee:	aa1a      	add	r2, sp, #104	; 0x68
 8009bf0:	a919      	add	r1, sp, #100	; 0x64
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f002 fa3e 	bl	800c074 <__d2b>
 8009bf8:	ec4b ab18 	vmov	d8, sl, fp
 8009bfc:	9018      	str	r0, [sp, #96]	; 0x60
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f43f aef6 	beq.w	80099f0 <_strtod_l+0x490>
 8009c04:	2101      	movs	r1, #1
 8009c06:	4620      	mov	r0, r4
 8009c08:	f001 ff88 	bl	800bb1c <__i2b>
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f43f aeee 	beq.w	80099f0 <_strtod_l+0x490>
 8009c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c16:	9904      	ldr	r1, [sp, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bfab      	itete	ge
 8009c1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c26:	bfac      	ite	ge
 8009c28:	eb03 0902 	addge.w	r9, r3, r2
 8009c2c:	1ad7      	sublt	r7, r2, r3
 8009c2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c30:	eba3 0801 	sub.w	r8, r3, r1
 8009c34:	4490      	add	r8, r2
 8009c36:	4ba1      	ldr	r3, [pc, #644]	; (8009ebc <_strtod_l+0x95c>)
 8009c38:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c3c:	4598      	cmp	r8, r3
 8009c3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c42:	f280 80c7 	bge.w	8009dd4 <_strtod_l+0x874>
 8009c46:	eba3 0308 	sub.w	r3, r3, r8
 8009c4a:	2b1f      	cmp	r3, #31
 8009c4c:	eba2 0203 	sub.w	r2, r2, r3
 8009c50:	f04f 0101 	mov.w	r1, #1
 8009c54:	f300 80b1 	bgt.w	8009dba <_strtod_l+0x85a>
 8009c58:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9308      	str	r3, [sp, #32]
 8009c62:	eb09 0802 	add.w	r8, r9, r2
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	45c1      	cmp	r9, r8
 8009c6a:	4417      	add	r7, r2
 8009c6c:	441f      	add	r7, r3
 8009c6e:	464b      	mov	r3, r9
 8009c70:	bfa8      	it	ge
 8009c72:	4643      	movge	r3, r8
 8009c74:	42bb      	cmp	r3, r7
 8009c76:	bfa8      	it	ge
 8009c78:	463b      	movge	r3, r7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bfc2      	ittt	gt
 8009c7e:	eba8 0803 	subgt.w	r8, r8, r3
 8009c82:	1aff      	subgt	r7, r7, r3
 8009c84:	eba9 0903 	subgt.w	r9, r9, r3
 8009c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	dd17      	ble.n	8009cbe <_strtod_l+0x75e>
 8009c8e:	4631      	mov	r1, r6
 8009c90:	461a      	mov	r2, r3
 8009c92:	4620      	mov	r0, r4
 8009c94:	f002 f802 	bl	800bc9c <__pow5mult>
 8009c98:	4606      	mov	r6, r0
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	f43f aea8 	beq.w	80099f0 <_strtod_l+0x490>
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f001 ff4f 	bl	800bb48 <__multiply>
 8009caa:	900b      	str	r0, [sp, #44]	; 0x2c
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f43f ae9f 	beq.w	80099f0 <_strtod_l+0x490>
 8009cb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f001 fe2f 	bl	800b918 <_Bfree>
 8009cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cbc:	9318      	str	r3, [sp, #96]	; 0x60
 8009cbe:	f1b8 0f00 	cmp.w	r8, #0
 8009cc2:	f300 808c 	bgt.w	8009dde <_strtod_l+0x87e>
 8009cc6:	9b06      	ldr	r3, [sp, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dd08      	ble.n	8009cde <_strtod_l+0x77e>
 8009ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cce:	9905      	ldr	r1, [sp, #20]
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f001 ffe3 	bl	800bc9c <__pow5mult>
 8009cd6:	9005      	str	r0, [sp, #20]
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	f43f ae89 	beq.w	80099f0 <_strtod_l+0x490>
 8009cde:	2f00      	cmp	r7, #0
 8009ce0:	dd08      	ble.n	8009cf4 <_strtod_l+0x794>
 8009ce2:	9905      	ldr	r1, [sp, #20]
 8009ce4:	463a      	mov	r2, r7
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f002 f832 	bl	800bd50 <__lshift>
 8009cec:	9005      	str	r0, [sp, #20]
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f43f ae7e 	beq.w	80099f0 <_strtod_l+0x490>
 8009cf4:	f1b9 0f00 	cmp.w	r9, #0
 8009cf8:	dd08      	ble.n	8009d0c <_strtod_l+0x7ac>
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	464a      	mov	r2, r9
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f002 f826 	bl	800bd50 <__lshift>
 8009d04:	4606      	mov	r6, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	f43f ae72 	beq.w	80099f0 <_strtod_l+0x490>
 8009d0c:	9a05      	ldr	r2, [sp, #20]
 8009d0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d10:	4620      	mov	r0, r4
 8009d12:	f002 f8a9 	bl	800be68 <__mdiff>
 8009d16:	4605      	mov	r5, r0
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f43f ae69 	beq.w	80099f0 <_strtod_l+0x490>
 8009d1e:	68c3      	ldr	r3, [r0, #12]
 8009d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d22:	2300      	movs	r3, #0
 8009d24:	60c3      	str	r3, [r0, #12]
 8009d26:	4631      	mov	r1, r6
 8009d28:	f002 f882 	bl	800be30 <__mcmp>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	da60      	bge.n	8009df2 <_strtod_l+0x892>
 8009d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d32:	ea53 030a 	orrs.w	r3, r3, sl
 8009d36:	f040 8082 	bne.w	8009e3e <_strtod_l+0x8de>
 8009d3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d17d      	bne.n	8009e3e <_strtod_l+0x8de>
 8009d42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d46:	0d1b      	lsrs	r3, r3, #20
 8009d48:	051b      	lsls	r3, r3, #20
 8009d4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d4e:	d976      	bls.n	8009e3e <_strtod_l+0x8de>
 8009d50:	696b      	ldr	r3, [r5, #20]
 8009d52:	b913      	cbnz	r3, 8009d5a <_strtod_l+0x7fa>
 8009d54:	692b      	ldr	r3, [r5, #16]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	dd71      	ble.n	8009e3e <_strtod_l+0x8de>
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f001 fff6 	bl	800bd50 <__lshift>
 8009d64:	4631      	mov	r1, r6
 8009d66:	4605      	mov	r5, r0
 8009d68:	f002 f862 	bl	800be30 <__mcmp>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	dd66      	ble.n	8009e3e <_strtod_l+0x8de>
 8009d70:	9904      	ldr	r1, [sp, #16]
 8009d72:	4a53      	ldr	r2, [pc, #332]	; (8009ec0 <_strtod_l+0x960>)
 8009d74:	465b      	mov	r3, fp
 8009d76:	2900      	cmp	r1, #0
 8009d78:	f000 8081 	beq.w	8009e7e <_strtod_l+0x91e>
 8009d7c:	ea02 010b 	and.w	r1, r2, fp
 8009d80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d84:	dc7b      	bgt.n	8009e7e <_strtod_l+0x91e>
 8009d86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d8a:	f77f aea9 	ble.w	8009ae0 <_strtod_l+0x580>
 8009d8e:	4b4d      	ldr	r3, [pc, #308]	; (8009ec4 <_strtod_l+0x964>)
 8009d90:	4650      	mov	r0, sl
 8009d92:	4659      	mov	r1, fp
 8009d94:	2200      	movs	r2, #0
 8009d96:	f7f6 fc57 	bl	8000648 <__aeabi_dmul>
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4303      	orrs	r3, r0
 8009d9e:	bf08      	it	eq
 8009da0:	2322      	moveq	r3, #34	; 0x22
 8009da2:	4682      	mov	sl, r0
 8009da4:	468b      	mov	fp, r1
 8009da6:	bf08      	it	eq
 8009da8:	6023      	streq	r3, [r4, #0]
 8009daa:	e62b      	b.n	8009a04 <_strtod_l+0x4a4>
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	ea03 0a0a 	and.w	sl, r3, sl
 8009db8:	e6e3      	b.n	8009b82 <_strtod_l+0x622>
 8009dba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009dbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009dc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009dc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009dca:	fa01 f308 	lsl.w	r3, r1, r8
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	910d      	str	r1, [sp, #52]	; 0x34
 8009dd2:	e746      	b.n	8009c62 <_strtod_l+0x702>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9308      	str	r3, [sp, #32]
 8009dd8:	2301      	movs	r3, #1
 8009dda:	930d      	str	r3, [sp, #52]	; 0x34
 8009ddc:	e741      	b.n	8009c62 <_strtod_l+0x702>
 8009dde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009de0:	4642      	mov	r2, r8
 8009de2:	4620      	mov	r0, r4
 8009de4:	f001 ffb4 	bl	800bd50 <__lshift>
 8009de8:	9018      	str	r0, [sp, #96]	; 0x60
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f47f af6b 	bne.w	8009cc6 <_strtod_l+0x766>
 8009df0:	e5fe      	b.n	80099f0 <_strtod_l+0x490>
 8009df2:	465f      	mov	r7, fp
 8009df4:	d16e      	bne.n	8009ed4 <_strtod_l+0x974>
 8009df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009df8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dfc:	b342      	cbz	r2, 8009e50 <_strtod_l+0x8f0>
 8009dfe:	4a32      	ldr	r2, [pc, #200]	; (8009ec8 <_strtod_l+0x968>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d128      	bne.n	8009e56 <_strtod_l+0x8f6>
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	4651      	mov	r1, sl
 8009e08:	b1eb      	cbz	r3, 8009e46 <_strtod_l+0x8e6>
 8009e0a:	4b2d      	ldr	r3, [pc, #180]	; (8009ec0 <_strtod_l+0x960>)
 8009e0c:	403b      	ands	r3, r7
 8009e0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e12:	f04f 32ff 	mov.w	r2, #4294967295
 8009e16:	d819      	bhi.n	8009e4c <_strtod_l+0x8ec>
 8009e18:	0d1b      	lsrs	r3, r3, #20
 8009e1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e22:	4299      	cmp	r1, r3
 8009e24:	d117      	bne.n	8009e56 <_strtod_l+0x8f6>
 8009e26:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <_strtod_l+0x96c>)
 8009e28:	429f      	cmp	r7, r3
 8009e2a:	d102      	bne.n	8009e32 <_strtod_l+0x8d2>
 8009e2c:	3101      	adds	r1, #1
 8009e2e:	f43f addf 	beq.w	80099f0 <_strtod_l+0x490>
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <_strtod_l+0x960>)
 8009e34:	403b      	ands	r3, r7
 8009e36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e3a:	f04f 0a00 	mov.w	sl, #0
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1a4      	bne.n	8009d8e <_strtod_l+0x82e>
 8009e44:	e5de      	b.n	8009a04 <_strtod_l+0x4a4>
 8009e46:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4a:	e7ea      	b.n	8009e22 <_strtod_l+0x8c2>
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	e7e8      	b.n	8009e22 <_strtod_l+0x8c2>
 8009e50:	ea53 030a 	orrs.w	r3, r3, sl
 8009e54:	d08c      	beq.n	8009d70 <_strtod_l+0x810>
 8009e56:	9b08      	ldr	r3, [sp, #32]
 8009e58:	b1db      	cbz	r3, 8009e92 <_strtod_l+0x932>
 8009e5a:	423b      	tst	r3, r7
 8009e5c:	d0ef      	beq.n	8009e3e <_strtod_l+0x8de>
 8009e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e60:	9a04      	ldr	r2, [sp, #16]
 8009e62:	4650      	mov	r0, sl
 8009e64:	4659      	mov	r1, fp
 8009e66:	b1c3      	cbz	r3, 8009e9a <_strtod_l+0x93a>
 8009e68:	f7ff fb5b 	bl	8009522 <sulp>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	ec51 0b18 	vmov	r0, r1, d8
 8009e74:	f7f6 fa32 	bl	80002dc <__adddf3>
 8009e78:	4682      	mov	sl, r0
 8009e7a:	468b      	mov	fp, r1
 8009e7c:	e7df      	b.n	8009e3e <_strtod_l+0x8de>
 8009e7e:	4013      	ands	r3, r2
 8009e80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e8c:	f04f 3aff 	mov.w	sl, #4294967295
 8009e90:	e7d5      	b.n	8009e3e <_strtod_l+0x8de>
 8009e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e94:	ea13 0f0a 	tst.w	r3, sl
 8009e98:	e7e0      	b.n	8009e5c <_strtod_l+0x8fc>
 8009e9a:	f7ff fb42 	bl	8009522 <sulp>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	ec51 0b18 	vmov	r0, r1, d8
 8009ea6:	f7f6 fa17 	bl	80002d8 <__aeabi_dsub>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2300      	movs	r3, #0
 8009eae:	4682      	mov	sl, r0
 8009eb0:	468b      	mov	fp, r1
 8009eb2:	f7f6 fe31 	bl	8000b18 <__aeabi_dcmpeq>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d0c1      	beq.n	8009e3e <_strtod_l+0x8de>
 8009eba:	e611      	b.n	8009ae0 <_strtod_l+0x580>
 8009ebc:	fffffc02 	.word	0xfffffc02
 8009ec0:	7ff00000 	.word	0x7ff00000
 8009ec4:	39500000 	.word	0x39500000
 8009ec8:	000fffff 	.word	0x000fffff
 8009ecc:	7fefffff 	.word	0x7fefffff
 8009ed0:	0800cfc0 	.word	0x0800cfc0
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f002 f928 	bl	800c12c <__ratio>
 8009edc:	ec59 8b10 	vmov	r8, r9, d0
 8009ee0:	ee10 0a10 	vmov	r0, s0
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7f6 fe28 	bl	8000b40 <__aeabi_dcmple>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d07a      	beq.n	8009fea <_strtod_l+0xa8a>
 8009ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d04a      	beq.n	8009f90 <_strtod_l+0xa30>
 8009efa:	4b95      	ldr	r3, [pc, #596]	; (800a150 <_strtod_l+0xbf0>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a150 <_strtod_l+0xbf0>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	4b92      	ldr	r3, [pc, #584]	; (800a154 <_strtod_l+0xbf4>)
 8009f0c:	403b      	ands	r3, r7
 8009f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f12:	4b91      	ldr	r3, [pc, #580]	; (800a158 <_strtod_l+0xbf8>)
 8009f14:	429a      	cmp	r2, r3
 8009f16:	f040 80b0 	bne.w	800a07a <_strtod_l+0xb1a>
 8009f1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f22:	ec4b ab10 	vmov	d0, sl, fp
 8009f26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f2a:	f002 f827 	bl	800bf7c <__ulp>
 8009f2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f32:	ec53 2b10 	vmov	r2, r3, d0
 8009f36:	f7f6 fb87 	bl	8000648 <__aeabi_dmul>
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	f7f6 f9cd 	bl	80002dc <__adddf3>
 8009f42:	460b      	mov	r3, r1
 8009f44:	4983      	ldr	r1, [pc, #524]	; (800a154 <_strtod_l+0xbf4>)
 8009f46:	4a85      	ldr	r2, [pc, #532]	; (800a15c <_strtod_l+0xbfc>)
 8009f48:	4019      	ands	r1, r3
 8009f4a:	4291      	cmp	r1, r2
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	d960      	bls.n	800a012 <_strtod_l+0xab2>
 8009f50:	ee18 3a90 	vmov	r3, s17
 8009f54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d104      	bne.n	8009f66 <_strtod_l+0xa06>
 8009f5c:	ee18 3a10 	vmov	r3, s16
 8009f60:	3301      	adds	r3, #1
 8009f62:	f43f ad45 	beq.w	80099f0 <_strtod_l+0x490>
 8009f66:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a168 <_strtod_l+0xc08>
 8009f6a:	f04f 3aff 	mov.w	sl, #4294967295
 8009f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f70:	4620      	mov	r0, r4
 8009f72:	f001 fcd1 	bl	800b918 <_Bfree>
 8009f76:	9905      	ldr	r1, [sp, #20]
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f001 fccd 	bl	800b918 <_Bfree>
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4620      	mov	r0, r4
 8009f82:	f001 fcc9 	bl	800b918 <_Bfree>
 8009f86:	4629      	mov	r1, r5
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f001 fcc5 	bl	800b918 <_Bfree>
 8009f8e:	e61a      	b.n	8009bc6 <_strtod_l+0x666>
 8009f90:	f1ba 0f00 	cmp.w	sl, #0
 8009f94:	d11b      	bne.n	8009fce <_strtod_l+0xa6e>
 8009f96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f9a:	b9f3      	cbnz	r3, 8009fda <_strtod_l+0xa7a>
 8009f9c:	4b6c      	ldr	r3, [pc, #432]	; (800a150 <_strtod_l+0xbf0>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	f7f6 fdc2 	bl	8000b2c <__aeabi_dcmplt>
 8009fa8:	b9d0      	cbnz	r0, 8009fe0 <_strtod_l+0xa80>
 8009faa:	4640      	mov	r0, r8
 8009fac:	4649      	mov	r1, r9
 8009fae:	4b6c      	ldr	r3, [pc, #432]	; (800a160 <_strtod_l+0xc00>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f7f6 fb49 	bl	8000648 <__aeabi_dmul>
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	4689      	mov	r9, r1
 8009fba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009fc2:	9315      	str	r3, [sp, #84]	; 0x54
 8009fc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009fc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fcc:	e79d      	b.n	8009f0a <_strtod_l+0x9aa>
 8009fce:	f1ba 0f01 	cmp.w	sl, #1
 8009fd2:	d102      	bne.n	8009fda <_strtod_l+0xa7a>
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	f43f ad83 	beq.w	8009ae0 <_strtod_l+0x580>
 8009fda:	4b62      	ldr	r3, [pc, #392]	; (800a164 <_strtod_l+0xc04>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	e78e      	b.n	8009efe <_strtod_l+0x99e>
 8009fe0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a160 <_strtod_l+0xc00>
 8009fe4:	f04f 0800 	mov.w	r8, #0
 8009fe8:	e7e7      	b.n	8009fba <_strtod_l+0xa5a>
 8009fea:	4b5d      	ldr	r3, [pc, #372]	; (800a160 <_strtod_l+0xc00>)
 8009fec:	4640      	mov	r0, r8
 8009fee:	4649      	mov	r1, r9
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7f6 fb29 	bl	8000648 <__aeabi_dmul>
 8009ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	b933      	cbnz	r3, 800a00c <_strtod_l+0xaac>
 8009ffe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a002:	900e      	str	r0, [sp, #56]	; 0x38
 800a004:	930f      	str	r3, [sp, #60]	; 0x3c
 800a006:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a00a:	e7dd      	b.n	8009fc8 <_strtod_l+0xa68>
 800a00c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a010:	e7f9      	b.n	800a006 <_strtod_l+0xaa6>
 800a012:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1a8      	bne.n	8009f6e <_strtod_l+0xa0e>
 800a01c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a022:	0d1b      	lsrs	r3, r3, #20
 800a024:	051b      	lsls	r3, r3, #20
 800a026:	429a      	cmp	r2, r3
 800a028:	d1a1      	bne.n	8009f6e <_strtod_l+0xa0e>
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	f7f6 fe6b 	bl	8000d08 <__aeabi_d2lz>
 800a032:	f7f6 fadb 	bl	80005ec <__aeabi_l2d>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4640      	mov	r0, r8
 800a03c:	4649      	mov	r1, r9
 800a03e:	f7f6 f94b 	bl	80002d8 <__aeabi_dsub>
 800a042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a048:	ea43 030a 	orr.w	r3, r3, sl
 800a04c:	4313      	orrs	r3, r2
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	d055      	beq.n	800a100 <_strtod_l+0xba0>
 800a054:	a336      	add	r3, pc, #216	; (adr r3, 800a130 <_strtod_l+0xbd0>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 fd67 	bl	8000b2c <__aeabi_dcmplt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	f47f acd0 	bne.w	8009a04 <_strtod_l+0x4a4>
 800a064:	a334      	add	r3, pc, #208	; (adr r3, 800a138 <_strtod_l+0xbd8>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	4640      	mov	r0, r8
 800a06c:	4649      	mov	r1, r9
 800a06e:	f7f6 fd7b 	bl	8000b68 <__aeabi_dcmpgt>
 800a072:	2800      	cmp	r0, #0
 800a074:	f43f af7b 	beq.w	8009f6e <_strtod_l+0xa0e>
 800a078:	e4c4      	b.n	8009a04 <_strtod_l+0x4a4>
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	b333      	cbz	r3, 800a0cc <_strtod_l+0xb6c>
 800a07e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a080:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a084:	d822      	bhi.n	800a0cc <_strtod_l+0xb6c>
 800a086:	a32e      	add	r3, pc, #184	; (adr r3, 800a140 <_strtod_l+0xbe0>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	4640      	mov	r0, r8
 800a08e:	4649      	mov	r1, r9
 800a090:	f7f6 fd56 	bl	8000b40 <__aeabi_dcmple>
 800a094:	b1a0      	cbz	r0, 800a0c0 <_strtod_l+0xb60>
 800a096:	4649      	mov	r1, r9
 800a098:	4640      	mov	r0, r8
 800a09a:	f7f6 fdad 	bl	8000bf8 <__aeabi_d2uiz>
 800a09e:	2801      	cmp	r0, #1
 800a0a0:	bf38      	it	cc
 800a0a2:	2001      	movcc	r0, #1
 800a0a4:	f7f6 fa56 	bl	8000554 <__aeabi_ui2d>
 800a0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	4689      	mov	r9, r1
 800a0ae:	bb23      	cbnz	r3, 800a0fa <_strtod_l+0xb9a>
 800a0b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0b4:	9010      	str	r0, [sp, #64]	; 0x40
 800a0b6:	9311      	str	r3, [sp, #68]	; 0x44
 800a0b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a0c8:	1a9b      	subs	r3, r3, r2
 800a0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a0cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0d0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0d4:	eef0 0a68 	vmov.f32	s1, s17
 800a0d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0dc:	f001 ff4e 	bl	800bf7c <__ulp>
 800a0e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0e4:	ec53 2b10 	vmov	r2, r3, d0
 800a0e8:	f7f6 faae 	bl	8000648 <__aeabi_dmul>
 800a0ec:	ec53 2b18 	vmov	r2, r3, d8
 800a0f0:	f7f6 f8f4 	bl	80002dc <__adddf3>
 800a0f4:	4682      	mov	sl, r0
 800a0f6:	468b      	mov	fp, r1
 800a0f8:	e78d      	b.n	800a016 <_strtod_l+0xab6>
 800a0fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a0fe:	e7db      	b.n	800a0b8 <_strtod_l+0xb58>
 800a100:	a311      	add	r3, pc, #68	; (adr r3, 800a148 <_strtod_l+0xbe8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 fd11 	bl	8000b2c <__aeabi_dcmplt>
 800a10a:	e7b2      	b.n	800a072 <_strtod_l+0xb12>
 800a10c:	2300      	movs	r3, #0
 800a10e:	930a      	str	r3, [sp, #40]	; 0x28
 800a110:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a114:	6013      	str	r3, [r2, #0]
 800a116:	f7ff ba6b 	b.w	80095f0 <_strtod_l+0x90>
 800a11a:	2a65      	cmp	r2, #101	; 0x65
 800a11c:	f43f ab5f 	beq.w	80097de <_strtod_l+0x27e>
 800a120:	2a45      	cmp	r2, #69	; 0x45
 800a122:	f43f ab5c 	beq.w	80097de <_strtod_l+0x27e>
 800a126:	2301      	movs	r3, #1
 800a128:	f7ff bb94 	b.w	8009854 <_strtod_l+0x2f4>
 800a12c:	f3af 8000 	nop.w
 800a130:	94a03595 	.word	0x94a03595
 800a134:	3fdfffff 	.word	0x3fdfffff
 800a138:	35afe535 	.word	0x35afe535
 800a13c:	3fe00000 	.word	0x3fe00000
 800a140:	ffc00000 	.word	0xffc00000
 800a144:	41dfffff 	.word	0x41dfffff
 800a148:	94a03595 	.word	0x94a03595
 800a14c:	3fcfffff 	.word	0x3fcfffff
 800a150:	3ff00000 	.word	0x3ff00000
 800a154:	7ff00000 	.word	0x7ff00000
 800a158:	7fe00000 	.word	0x7fe00000
 800a15c:	7c9fffff 	.word	0x7c9fffff
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	bff00000 	.word	0xbff00000
 800a168:	7fefffff 	.word	0x7fefffff

0800a16c <_strtod_r>:
 800a16c:	4b01      	ldr	r3, [pc, #4]	; (800a174 <_strtod_r+0x8>)
 800a16e:	f7ff b9f7 	b.w	8009560 <_strtod_l>
 800a172:	bf00      	nop
 800a174:	20000078 	.word	0x20000078

0800a178 <_strtol_l.constprop.0>:
 800a178:	2b01      	cmp	r3, #1
 800a17a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17e:	d001      	beq.n	800a184 <_strtol_l.constprop.0+0xc>
 800a180:	2b24      	cmp	r3, #36	; 0x24
 800a182:	d906      	bls.n	800a192 <_strtol_l.constprop.0+0x1a>
 800a184:	f7fe f8a2 	bl	80082cc <__errno>
 800a188:	2316      	movs	r3, #22
 800a18a:	6003      	str	r3, [r0, #0]
 800a18c:	2000      	movs	r0, #0
 800a18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a192:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a278 <_strtol_l.constprop.0+0x100>
 800a196:	460d      	mov	r5, r1
 800a198:	462e      	mov	r6, r5
 800a19a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a19e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1a2:	f017 0708 	ands.w	r7, r7, #8
 800a1a6:	d1f7      	bne.n	800a198 <_strtol_l.constprop.0+0x20>
 800a1a8:	2c2d      	cmp	r4, #45	; 0x2d
 800a1aa:	d132      	bne.n	800a212 <_strtol_l.constprop.0+0x9a>
 800a1ac:	782c      	ldrb	r4, [r5, #0]
 800a1ae:	2701      	movs	r7, #1
 800a1b0:	1cb5      	adds	r5, r6, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d05b      	beq.n	800a26e <_strtol_l.constprop.0+0xf6>
 800a1b6:	2b10      	cmp	r3, #16
 800a1b8:	d109      	bne.n	800a1ce <_strtol_l.constprop.0+0x56>
 800a1ba:	2c30      	cmp	r4, #48	; 0x30
 800a1bc:	d107      	bne.n	800a1ce <_strtol_l.constprop.0+0x56>
 800a1be:	782c      	ldrb	r4, [r5, #0]
 800a1c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a1c4:	2c58      	cmp	r4, #88	; 0x58
 800a1c6:	d14d      	bne.n	800a264 <_strtol_l.constprop.0+0xec>
 800a1c8:	786c      	ldrb	r4, [r5, #1]
 800a1ca:	2310      	movs	r3, #16
 800a1cc:	3502      	adds	r5, #2
 800a1ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a1d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1d6:	f04f 0c00 	mov.w	ip, #0
 800a1da:	fbb8 f9f3 	udiv	r9, r8, r3
 800a1de:	4666      	mov	r6, ip
 800a1e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a1e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a1e8:	f1be 0f09 	cmp.w	lr, #9
 800a1ec:	d816      	bhi.n	800a21c <_strtol_l.constprop.0+0xa4>
 800a1ee:	4674      	mov	r4, lr
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	dd24      	ble.n	800a23e <_strtol_l.constprop.0+0xc6>
 800a1f4:	f1bc 0f00 	cmp.w	ip, #0
 800a1f8:	db1e      	blt.n	800a238 <_strtol_l.constprop.0+0xc0>
 800a1fa:	45b1      	cmp	r9, r6
 800a1fc:	d31c      	bcc.n	800a238 <_strtol_l.constprop.0+0xc0>
 800a1fe:	d101      	bne.n	800a204 <_strtol_l.constprop.0+0x8c>
 800a200:	45a2      	cmp	sl, r4
 800a202:	db19      	blt.n	800a238 <_strtol_l.constprop.0+0xc0>
 800a204:	fb06 4603 	mla	r6, r6, r3, r4
 800a208:	f04f 0c01 	mov.w	ip, #1
 800a20c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a210:	e7e8      	b.n	800a1e4 <_strtol_l.constprop.0+0x6c>
 800a212:	2c2b      	cmp	r4, #43	; 0x2b
 800a214:	bf04      	itt	eq
 800a216:	782c      	ldrbeq	r4, [r5, #0]
 800a218:	1cb5      	addeq	r5, r6, #2
 800a21a:	e7ca      	b.n	800a1b2 <_strtol_l.constprop.0+0x3a>
 800a21c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a220:	f1be 0f19 	cmp.w	lr, #25
 800a224:	d801      	bhi.n	800a22a <_strtol_l.constprop.0+0xb2>
 800a226:	3c37      	subs	r4, #55	; 0x37
 800a228:	e7e2      	b.n	800a1f0 <_strtol_l.constprop.0+0x78>
 800a22a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a22e:	f1be 0f19 	cmp.w	lr, #25
 800a232:	d804      	bhi.n	800a23e <_strtol_l.constprop.0+0xc6>
 800a234:	3c57      	subs	r4, #87	; 0x57
 800a236:	e7db      	b.n	800a1f0 <_strtol_l.constprop.0+0x78>
 800a238:	f04f 3cff 	mov.w	ip, #4294967295
 800a23c:	e7e6      	b.n	800a20c <_strtol_l.constprop.0+0x94>
 800a23e:	f1bc 0f00 	cmp.w	ip, #0
 800a242:	da05      	bge.n	800a250 <_strtol_l.constprop.0+0xd8>
 800a244:	2322      	movs	r3, #34	; 0x22
 800a246:	6003      	str	r3, [r0, #0]
 800a248:	4646      	mov	r6, r8
 800a24a:	b942      	cbnz	r2, 800a25e <_strtol_l.constprop.0+0xe6>
 800a24c:	4630      	mov	r0, r6
 800a24e:	e79e      	b.n	800a18e <_strtol_l.constprop.0+0x16>
 800a250:	b107      	cbz	r7, 800a254 <_strtol_l.constprop.0+0xdc>
 800a252:	4276      	negs	r6, r6
 800a254:	2a00      	cmp	r2, #0
 800a256:	d0f9      	beq.n	800a24c <_strtol_l.constprop.0+0xd4>
 800a258:	f1bc 0f00 	cmp.w	ip, #0
 800a25c:	d000      	beq.n	800a260 <_strtol_l.constprop.0+0xe8>
 800a25e:	1e69      	subs	r1, r5, #1
 800a260:	6011      	str	r1, [r2, #0]
 800a262:	e7f3      	b.n	800a24c <_strtol_l.constprop.0+0xd4>
 800a264:	2430      	movs	r4, #48	; 0x30
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1b1      	bne.n	800a1ce <_strtol_l.constprop.0+0x56>
 800a26a:	2308      	movs	r3, #8
 800a26c:	e7af      	b.n	800a1ce <_strtol_l.constprop.0+0x56>
 800a26e:	2c30      	cmp	r4, #48	; 0x30
 800a270:	d0a5      	beq.n	800a1be <_strtol_l.constprop.0+0x46>
 800a272:	230a      	movs	r3, #10
 800a274:	e7ab      	b.n	800a1ce <_strtol_l.constprop.0+0x56>
 800a276:	bf00      	nop
 800a278:	0800cfe9 	.word	0x0800cfe9

0800a27c <_strtol_r>:
 800a27c:	f7ff bf7c 	b.w	800a178 <_strtol_l.constprop.0>

0800a280 <_write_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	; (800a2a0 <_write_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7f7 fc27 	bl	8001ae2 <_write>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_write_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_write_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20002eb8 	.word	0x20002eb8

0800a2a4 <_close_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d06      	ldr	r5, [pc, #24]	; (800a2c0 <_close_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	f7f7 fc33 	bl	8001b1a <_close>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_close_r+0x1a>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_close_r+0x1a>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20002eb8 	.word	0x20002eb8

0800a2c4 <quorem>:
 800a2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	6903      	ldr	r3, [r0, #16]
 800a2ca:	690c      	ldr	r4, [r1, #16]
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	f2c0 8081 	blt.w	800a3d6 <quorem+0x112>
 800a2d4:	3c01      	subs	r4, #1
 800a2d6:	f101 0814 	add.w	r8, r1, #20
 800a2da:	f100 0514 	add.w	r5, r0, #20
 800a2de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2fc:	d331      	bcc.n	800a362 <quorem+0x9e>
 800a2fe:	f04f 0e00 	mov.w	lr, #0
 800a302:	4640      	mov	r0, r8
 800a304:	46ac      	mov	ip, r5
 800a306:	46f2      	mov	sl, lr
 800a308:	f850 2b04 	ldr.w	r2, [r0], #4
 800a30c:	b293      	uxth	r3, r2
 800a30e:	fb06 e303 	mla	r3, r6, r3, lr
 800a312:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a316:	b29b      	uxth	r3, r3
 800a318:	ebaa 0303 	sub.w	r3, sl, r3
 800a31c:	f8dc a000 	ldr.w	sl, [ip]
 800a320:	0c12      	lsrs	r2, r2, #16
 800a322:	fa13 f38a 	uxtah	r3, r3, sl
 800a326:	fb06 e202 	mla	r2, r6, r2, lr
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a332:	b292      	uxth	r2, r2
 800a334:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a33c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a340:	4581      	cmp	r9, r0
 800a342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a346:	f84c 3b04 	str.w	r3, [ip], #4
 800a34a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a34e:	d2db      	bcs.n	800a308 <quorem+0x44>
 800a350:	f855 300b 	ldr.w	r3, [r5, fp]
 800a354:	b92b      	cbnz	r3, 800a362 <quorem+0x9e>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	3b04      	subs	r3, #4
 800a35a:	429d      	cmp	r5, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	d32e      	bcc.n	800a3be <quorem+0xfa>
 800a360:	613c      	str	r4, [r7, #16]
 800a362:	4638      	mov	r0, r7
 800a364:	f001 fd64 	bl	800be30 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	db24      	blt.n	800a3b6 <quorem+0xf2>
 800a36c:	3601      	adds	r6, #1
 800a36e:	4628      	mov	r0, r5
 800a370:	f04f 0c00 	mov.w	ip, #0
 800a374:	f858 2b04 	ldr.w	r2, [r8], #4
 800a378:	f8d0 e000 	ldr.w	lr, [r0]
 800a37c:	b293      	uxth	r3, r2
 800a37e:	ebac 0303 	sub.w	r3, ip, r3
 800a382:	0c12      	lsrs	r2, r2, #16
 800a384:	fa13 f38e 	uxtah	r3, r3, lr
 800a388:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a38c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a390:	b29b      	uxth	r3, r3
 800a392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a396:	45c1      	cmp	r9, r8
 800a398:	f840 3b04 	str.w	r3, [r0], #4
 800a39c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3a0:	d2e8      	bcs.n	800a374 <quorem+0xb0>
 800a3a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3aa:	b922      	cbnz	r2, 800a3b6 <quorem+0xf2>
 800a3ac:	3b04      	subs	r3, #4
 800a3ae:	429d      	cmp	r5, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	d30a      	bcc.n	800a3ca <quorem+0x106>
 800a3b4:	613c      	str	r4, [r7, #16]
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	b003      	add	sp, #12
 800a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	3b04      	subs	r3, #4
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d1cc      	bne.n	800a360 <quorem+0x9c>
 800a3c6:	3c01      	subs	r4, #1
 800a3c8:	e7c7      	b.n	800a35a <quorem+0x96>
 800a3ca:	6812      	ldr	r2, [r2, #0]
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	d1f0      	bne.n	800a3b4 <quorem+0xf0>
 800a3d2:	3c01      	subs	r4, #1
 800a3d4:	e7eb      	b.n	800a3ae <quorem+0xea>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7ee      	b.n	800a3b8 <quorem+0xf4>
 800a3da:	0000      	movs	r0, r0
 800a3dc:	0000      	movs	r0, r0
	...

0800a3e0 <_dtoa_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	ed2d 8b04 	vpush	{d8-d9}
 800a3e8:	ec57 6b10 	vmov	r6, r7, d0
 800a3ec:	b093      	sub	sp, #76	; 0x4c
 800a3ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3f4:	9106      	str	r1, [sp, #24]
 800a3f6:	ee10 aa10 	vmov	sl, s0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a400:	46bb      	mov	fp, r7
 800a402:	b975      	cbnz	r5, 800a422 <_dtoa_r+0x42>
 800a404:	2010      	movs	r0, #16
 800a406:	f001 fa21 	bl	800b84c <malloc>
 800a40a:	4602      	mov	r2, r0
 800a40c:	6260      	str	r0, [r4, #36]	; 0x24
 800a40e:	b920      	cbnz	r0, 800a41a <_dtoa_r+0x3a>
 800a410:	4ba7      	ldr	r3, [pc, #668]	; (800a6b0 <_dtoa_r+0x2d0>)
 800a412:	21ea      	movs	r1, #234	; 0xea
 800a414:	48a7      	ldr	r0, [pc, #668]	; (800a6b4 <_dtoa_r+0x2d4>)
 800a416:	f002 f8fd 	bl	800c614 <__assert_func>
 800a41a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a41e:	6005      	str	r5, [r0, #0]
 800a420:	60c5      	str	r5, [r0, #12]
 800a422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a424:	6819      	ldr	r1, [r3, #0]
 800a426:	b151      	cbz	r1, 800a43e <_dtoa_r+0x5e>
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	604a      	str	r2, [r1, #4]
 800a42c:	2301      	movs	r3, #1
 800a42e:	4093      	lsls	r3, r2
 800a430:	608b      	str	r3, [r1, #8]
 800a432:	4620      	mov	r0, r4
 800a434:	f001 fa70 	bl	800b918 <_Bfree>
 800a438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	1e3b      	subs	r3, r7, #0
 800a440:	bfaa      	itet	ge
 800a442:	2300      	movge	r3, #0
 800a444:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a448:	f8c8 3000 	strge.w	r3, [r8]
 800a44c:	4b9a      	ldr	r3, [pc, #616]	; (800a6b8 <_dtoa_r+0x2d8>)
 800a44e:	bfbc      	itt	lt
 800a450:	2201      	movlt	r2, #1
 800a452:	f8c8 2000 	strlt.w	r2, [r8]
 800a456:	ea33 030b 	bics.w	r3, r3, fp
 800a45a:	d11b      	bne.n	800a494 <_dtoa_r+0xb4>
 800a45c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a45e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a468:	4333      	orrs	r3, r6
 800a46a:	f000 8592 	beq.w	800af92 <_dtoa_r+0xbb2>
 800a46e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a470:	b963      	cbnz	r3, 800a48c <_dtoa_r+0xac>
 800a472:	4b92      	ldr	r3, [pc, #584]	; (800a6bc <_dtoa_r+0x2dc>)
 800a474:	e022      	b.n	800a4bc <_dtoa_r+0xdc>
 800a476:	4b92      	ldr	r3, [pc, #584]	; (800a6c0 <_dtoa_r+0x2e0>)
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	3308      	adds	r3, #8
 800a47c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	9801      	ldr	r0, [sp, #4]
 800a482:	b013      	add	sp, #76	; 0x4c
 800a484:	ecbd 8b04 	vpop	{d8-d9}
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	4b8b      	ldr	r3, [pc, #556]	; (800a6bc <_dtoa_r+0x2dc>)
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	3303      	adds	r3, #3
 800a492:	e7f3      	b.n	800a47c <_dtoa_r+0x9c>
 800a494:	2200      	movs	r2, #0
 800a496:	2300      	movs	r3, #0
 800a498:	4650      	mov	r0, sl
 800a49a:	4659      	mov	r1, fp
 800a49c:	f7f6 fb3c 	bl	8000b18 <__aeabi_dcmpeq>
 800a4a0:	ec4b ab19 	vmov	d9, sl, fp
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	b158      	cbz	r0, 800a4c0 <_dtoa_r+0xe0>
 800a4a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 856b 	beq.w	800af8c <_dtoa_r+0xbac>
 800a4b6:	4883      	ldr	r0, [pc, #524]	; (800a6c4 <_dtoa_r+0x2e4>)
 800a4b8:	6018      	str	r0, [r3, #0]
 800a4ba:	1e43      	subs	r3, r0, #1
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	e7df      	b.n	800a480 <_dtoa_r+0xa0>
 800a4c0:	ec4b ab10 	vmov	d0, sl, fp
 800a4c4:	aa10      	add	r2, sp, #64	; 0x40
 800a4c6:	a911      	add	r1, sp, #68	; 0x44
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f001 fdd3 	bl	800c074 <__d2b>
 800a4ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a4d2:	ee08 0a10 	vmov	s16, r0
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	f000 8084 	beq.w	800a5e4 <_dtoa_r+0x204>
 800a4dc:	ee19 3a90 	vmov	r3, s19
 800a4e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a4e8:	4656      	mov	r6, sl
 800a4ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a4ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a4f6:	4b74      	ldr	r3, [pc, #464]	; (800a6c8 <_dtoa_r+0x2e8>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	f7f5 feeb 	bl	80002d8 <__aeabi_dsub>
 800a502:	a365      	add	r3, pc, #404	; (adr r3, 800a698 <_dtoa_r+0x2b8>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f6 f89e 	bl	8000648 <__aeabi_dmul>
 800a50c:	a364      	add	r3, pc, #400	; (adr r3, 800a6a0 <_dtoa_r+0x2c0>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f5 fee3 	bl	80002dc <__adddf3>
 800a516:	4606      	mov	r6, r0
 800a518:	4628      	mov	r0, r5
 800a51a:	460f      	mov	r7, r1
 800a51c:	f7f6 f82a 	bl	8000574 <__aeabi_i2d>
 800a520:	a361      	add	r3, pc, #388	; (adr r3, 800a6a8 <_dtoa_r+0x2c8>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f6 f88f 	bl	8000648 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4630      	mov	r0, r6
 800a530:	4639      	mov	r1, r7
 800a532:	f7f5 fed3 	bl	80002dc <__adddf3>
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	f7f6 fb35 	bl	8000ba8 <__aeabi_d2iz>
 800a53e:	2200      	movs	r2, #0
 800a540:	9000      	str	r0, [sp, #0]
 800a542:	2300      	movs	r3, #0
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f7f6 faf0 	bl	8000b2c <__aeabi_dcmplt>
 800a54c:	b150      	cbz	r0, 800a564 <_dtoa_r+0x184>
 800a54e:	9800      	ldr	r0, [sp, #0]
 800a550:	f7f6 f810 	bl	8000574 <__aeabi_i2d>
 800a554:	4632      	mov	r2, r6
 800a556:	463b      	mov	r3, r7
 800a558:	f7f6 fade 	bl	8000b18 <__aeabi_dcmpeq>
 800a55c:	b910      	cbnz	r0, 800a564 <_dtoa_r+0x184>
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	3b01      	subs	r3, #1
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	2b16      	cmp	r3, #22
 800a568:	d85a      	bhi.n	800a620 <_dtoa_r+0x240>
 800a56a:	9a00      	ldr	r2, [sp, #0]
 800a56c:	4b57      	ldr	r3, [pc, #348]	; (800a6cc <_dtoa_r+0x2ec>)
 800a56e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	ec51 0b19 	vmov	r0, r1, d9
 800a57a:	f7f6 fad7 	bl	8000b2c <__aeabi_dcmplt>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d050      	beq.n	800a624 <_dtoa_r+0x244>
 800a582:	9b00      	ldr	r3, [sp, #0]
 800a584:	3b01      	subs	r3, #1
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a58e:	1b5d      	subs	r5, r3, r5
 800a590:	1e6b      	subs	r3, r5, #1
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	bf45      	ittet	mi
 800a596:	f1c5 0301 	rsbmi	r3, r5, #1
 800a59a:	9304      	strmi	r3, [sp, #16]
 800a59c:	2300      	movpl	r3, #0
 800a59e:	2300      	movmi	r3, #0
 800a5a0:	bf4c      	ite	mi
 800a5a2:	9305      	strmi	r3, [sp, #20]
 800a5a4:	9304      	strpl	r3, [sp, #16]
 800a5a6:	9b00      	ldr	r3, [sp, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	db3d      	blt.n	800a628 <_dtoa_r+0x248>
 800a5ac:	9b05      	ldr	r3, [sp, #20]
 800a5ae:	9a00      	ldr	r2, [sp, #0]
 800a5b0:	920a      	str	r2, [sp, #40]	; 0x28
 800a5b2:	4413      	add	r3, r2
 800a5b4:	9305      	str	r3, [sp, #20]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9307      	str	r3, [sp, #28]
 800a5ba:	9b06      	ldr	r3, [sp, #24]
 800a5bc:	2b09      	cmp	r3, #9
 800a5be:	f200 8089 	bhi.w	800a6d4 <_dtoa_r+0x2f4>
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	bfc4      	itt	gt
 800a5c6:	3b04      	subgt	r3, #4
 800a5c8:	9306      	strgt	r3, [sp, #24]
 800a5ca:	9b06      	ldr	r3, [sp, #24]
 800a5cc:	f1a3 0302 	sub.w	r3, r3, #2
 800a5d0:	bfcc      	ite	gt
 800a5d2:	2500      	movgt	r5, #0
 800a5d4:	2501      	movle	r5, #1
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	f200 8087 	bhi.w	800a6ea <_dtoa_r+0x30a>
 800a5dc:	e8df f003 	tbb	[pc, r3]
 800a5e0:	59383a2d 	.word	0x59383a2d
 800a5e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a5e8:	441d      	add	r5, r3
 800a5ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	bfc1      	itttt	gt
 800a5f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a5fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800a5fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a602:	bfda      	itte	le
 800a604:	f1c3 0320 	rsble	r3, r3, #32
 800a608:	fa06 f003 	lslle.w	r0, r6, r3
 800a60c:	4318      	orrgt	r0, r3
 800a60e:	f7f5 ffa1 	bl	8000554 <__aeabi_ui2d>
 800a612:	2301      	movs	r3, #1
 800a614:	4606      	mov	r6, r0
 800a616:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a61a:	3d01      	subs	r5, #1
 800a61c:	930e      	str	r3, [sp, #56]	; 0x38
 800a61e:	e76a      	b.n	800a4f6 <_dtoa_r+0x116>
 800a620:	2301      	movs	r3, #1
 800a622:	e7b2      	b.n	800a58a <_dtoa_r+0x1aa>
 800a624:	900b      	str	r0, [sp, #44]	; 0x2c
 800a626:	e7b1      	b.n	800a58c <_dtoa_r+0x1ac>
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	9a00      	ldr	r2, [sp, #0]
 800a62c:	1a9b      	subs	r3, r3, r2
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	4253      	negs	r3, r2
 800a632:	9307      	str	r3, [sp, #28]
 800a634:	2300      	movs	r3, #0
 800a636:	930a      	str	r3, [sp, #40]	; 0x28
 800a638:	e7bf      	b.n	800a5ba <_dtoa_r+0x1da>
 800a63a:	2300      	movs	r3, #0
 800a63c:	9308      	str	r3, [sp, #32]
 800a63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc55      	bgt.n	800a6f0 <_dtoa_r+0x310>
 800a644:	2301      	movs	r3, #1
 800a646:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a64a:	461a      	mov	r2, r3
 800a64c:	9209      	str	r2, [sp, #36]	; 0x24
 800a64e:	e00c      	b.n	800a66a <_dtoa_r+0x28a>
 800a650:	2301      	movs	r3, #1
 800a652:	e7f3      	b.n	800a63c <_dtoa_r+0x25c>
 800a654:	2300      	movs	r3, #0
 800a656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a658:	9308      	str	r3, [sp, #32]
 800a65a:	9b00      	ldr	r3, [sp, #0]
 800a65c:	4413      	add	r3, r2
 800a65e:	9302      	str	r3, [sp, #8]
 800a660:	3301      	adds	r3, #1
 800a662:	2b01      	cmp	r3, #1
 800a664:	9303      	str	r3, [sp, #12]
 800a666:	bfb8      	it	lt
 800a668:	2301      	movlt	r3, #1
 800a66a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a66c:	2200      	movs	r2, #0
 800a66e:	6042      	str	r2, [r0, #4]
 800a670:	2204      	movs	r2, #4
 800a672:	f102 0614 	add.w	r6, r2, #20
 800a676:	429e      	cmp	r6, r3
 800a678:	6841      	ldr	r1, [r0, #4]
 800a67a:	d93d      	bls.n	800a6f8 <_dtoa_r+0x318>
 800a67c:	4620      	mov	r0, r4
 800a67e:	f001 f90b 	bl	800b898 <_Balloc>
 800a682:	9001      	str	r0, [sp, #4]
 800a684:	2800      	cmp	r0, #0
 800a686:	d13b      	bne.n	800a700 <_dtoa_r+0x320>
 800a688:	4b11      	ldr	r3, [pc, #68]	; (800a6d0 <_dtoa_r+0x2f0>)
 800a68a:	4602      	mov	r2, r0
 800a68c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a690:	e6c0      	b.n	800a414 <_dtoa_r+0x34>
 800a692:	2301      	movs	r3, #1
 800a694:	e7df      	b.n	800a656 <_dtoa_r+0x276>
 800a696:	bf00      	nop
 800a698:	636f4361 	.word	0x636f4361
 800a69c:	3fd287a7 	.word	0x3fd287a7
 800a6a0:	8b60c8b3 	.word	0x8b60c8b3
 800a6a4:	3fc68a28 	.word	0x3fc68a28
 800a6a8:	509f79fb 	.word	0x509f79fb
 800a6ac:	3fd34413 	.word	0x3fd34413
 800a6b0:	0800d0f6 	.word	0x0800d0f6
 800a6b4:	0800d10d 	.word	0x0800d10d
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	0800d0f2 	.word	0x0800d0f2
 800a6c0:	0800d0e9 	.word	0x0800d0e9
 800a6c4:	0800cf69 	.word	0x0800cf69
 800a6c8:	3ff80000 	.word	0x3ff80000
 800a6cc:	0800d278 	.word	0x0800d278
 800a6d0:	0800d168 	.word	0x0800d168
 800a6d4:	2501      	movs	r5, #1
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9306      	str	r3, [sp, #24]
 800a6da:	9508      	str	r5, [sp, #32]
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2312      	movs	r3, #18
 800a6e8:	e7b0      	b.n	800a64c <_dtoa_r+0x26c>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	9308      	str	r3, [sp, #32]
 800a6ee:	e7f5      	b.n	800a6dc <_dtoa_r+0x2fc>
 800a6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a6f6:	e7b8      	b.n	800a66a <_dtoa_r+0x28a>
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	6041      	str	r1, [r0, #4]
 800a6fc:	0052      	lsls	r2, r2, #1
 800a6fe:	e7b8      	b.n	800a672 <_dtoa_r+0x292>
 800a700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a702:	9a01      	ldr	r2, [sp, #4]
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	9b03      	ldr	r3, [sp, #12]
 800a708:	2b0e      	cmp	r3, #14
 800a70a:	f200 809d 	bhi.w	800a848 <_dtoa_r+0x468>
 800a70e:	2d00      	cmp	r5, #0
 800a710:	f000 809a 	beq.w	800a848 <_dtoa_r+0x468>
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	dd32      	ble.n	800a780 <_dtoa_r+0x3a0>
 800a71a:	4ab7      	ldr	r2, [pc, #732]	; (800a9f8 <_dtoa_r+0x618>)
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a724:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	05d8      	lsls	r0, r3, #23
 800a72c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a730:	d516      	bpl.n	800a760 <_dtoa_r+0x380>
 800a732:	4bb2      	ldr	r3, [pc, #712]	; (800a9fc <_dtoa_r+0x61c>)
 800a734:	ec51 0b19 	vmov	r0, r1, d9
 800a738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a73c:	f7f6 f8ae 	bl	800089c <__aeabi_ddiv>
 800a740:	f007 070f 	and.w	r7, r7, #15
 800a744:	4682      	mov	sl, r0
 800a746:	468b      	mov	fp, r1
 800a748:	2503      	movs	r5, #3
 800a74a:	4eac      	ldr	r6, [pc, #688]	; (800a9fc <_dtoa_r+0x61c>)
 800a74c:	b957      	cbnz	r7, 800a764 <_dtoa_r+0x384>
 800a74e:	4642      	mov	r2, r8
 800a750:	464b      	mov	r3, r9
 800a752:	4650      	mov	r0, sl
 800a754:	4659      	mov	r1, fp
 800a756:	f7f6 f8a1 	bl	800089c <__aeabi_ddiv>
 800a75a:	4682      	mov	sl, r0
 800a75c:	468b      	mov	fp, r1
 800a75e:	e028      	b.n	800a7b2 <_dtoa_r+0x3d2>
 800a760:	2502      	movs	r5, #2
 800a762:	e7f2      	b.n	800a74a <_dtoa_r+0x36a>
 800a764:	07f9      	lsls	r1, r7, #31
 800a766:	d508      	bpl.n	800a77a <_dtoa_r+0x39a>
 800a768:	4640      	mov	r0, r8
 800a76a:	4649      	mov	r1, r9
 800a76c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a770:	f7f5 ff6a 	bl	8000648 <__aeabi_dmul>
 800a774:	3501      	adds	r5, #1
 800a776:	4680      	mov	r8, r0
 800a778:	4689      	mov	r9, r1
 800a77a:	107f      	asrs	r7, r7, #1
 800a77c:	3608      	adds	r6, #8
 800a77e:	e7e5      	b.n	800a74c <_dtoa_r+0x36c>
 800a780:	f000 809b 	beq.w	800a8ba <_dtoa_r+0x4da>
 800a784:	9b00      	ldr	r3, [sp, #0]
 800a786:	4f9d      	ldr	r7, [pc, #628]	; (800a9fc <_dtoa_r+0x61c>)
 800a788:	425e      	negs	r6, r3
 800a78a:	4b9b      	ldr	r3, [pc, #620]	; (800a9f8 <_dtoa_r+0x618>)
 800a78c:	f006 020f 	and.w	r2, r6, #15
 800a790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	ec51 0b19 	vmov	r0, r1, d9
 800a79c:	f7f5 ff54 	bl	8000648 <__aeabi_dmul>
 800a7a0:	1136      	asrs	r6, r6, #4
 800a7a2:	4682      	mov	sl, r0
 800a7a4:	468b      	mov	fp, r1
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2502      	movs	r5, #2
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d17a      	bne.n	800a8a4 <_dtoa_r+0x4c4>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1d3      	bne.n	800a75a <_dtoa_r+0x37a>
 800a7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8082 	beq.w	800a8be <_dtoa_r+0x4de>
 800a7ba:	4b91      	ldr	r3, [pc, #580]	; (800aa00 <_dtoa_r+0x620>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4650      	mov	r0, sl
 800a7c0:	4659      	mov	r1, fp
 800a7c2:	f7f6 f9b3 	bl	8000b2c <__aeabi_dcmplt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d079      	beq.n	800a8be <_dtoa_r+0x4de>
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d076      	beq.n	800a8be <_dtoa_r+0x4de>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dd36      	ble.n	800a844 <_dtoa_r+0x464>
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	4650      	mov	r0, sl
 800a7da:	4659      	mov	r1, fp
 800a7dc:	1e5f      	subs	r7, r3, #1
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4b88      	ldr	r3, [pc, #544]	; (800aa04 <_dtoa_r+0x624>)
 800a7e2:	f7f5 ff31 	bl	8000648 <__aeabi_dmul>
 800a7e6:	9e02      	ldr	r6, [sp, #8]
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	468b      	mov	fp, r1
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f7f5 fec0 	bl	8000574 <__aeabi_i2d>
 800a7f4:	4652      	mov	r2, sl
 800a7f6:	465b      	mov	r3, fp
 800a7f8:	f7f5 ff26 	bl	8000648 <__aeabi_dmul>
 800a7fc:	4b82      	ldr	r3, [pc, #520]	; (800aa08 <_dtoa_r+0x628>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	f7f5 fd6c 	bl	80002dc <__adddf3>
 800a804:	46d0      	mov	r8, sl
 800a806:	46d9      	mov	r9, fp
 800a808:	4682      	mov	sl, r0
 800a80a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a80e:	2e00      	cmp	r6, #0
 800a810:	d158      	bne.n	800a8c4 <_dtoa_r+0x4e4>
 800a812:	4b7e      	ldr	r3, [pc, #504]	; (800aa0c <_dtoa_r+0x62c>)
 800a814:	2200      	movs	r2, #0
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f7f5 fd5d 	bl	80002d8 <__aeabi_dsub>
 800a81e:	4652      	mov	r2, sl
 800a820:	465b      	mov	r3, fp
 800a822:	4680      	mov	r8, r0
 800a824:	4689      	mov	r9, r1
 800a826:	f7f6 f99f 	bl	8000b68 <__aeabi_dcmpgt>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f040 8295 	bne.w	800ad5a <_dtoa_r+0x97a>
 800a830:	4652      	mov	r2, sl
 800a832:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a836:	4640      	mov	r0, r8
 800a838:	4649      	mov	r1, r9
 800a83a:	f7f6 f977 	bl	8000b2c <__aeabi_dcmplt>
 800a83e:	2800      	cmp	r0, #0
 800a840:	f040 8289 	bne.w	800ad56 <_dtoa_r+0x976>
 800a844:	ec5b ab19 	vmov	sl, fp, d9
 800a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f2c0 8148 	blt.w	800aae0 <_dtoa_r+0x700>
 800a850:	9a00      	ldr	r2, [sp, #0]
 800a852:	2a0e      	cmp	r2, #14
 800a854:	f300 8144 	bgt.w	800aae0 <_dtoa_r+0x700>
 800a858:	4b67      	ldr	r3, [pc, #412]	; (800a9f8 <_dtoa_r+0x618>)
 800a85a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	2b00      	cmp	r3, #0
 800a866:	f280 80d5 	bge.w	800aa14 <_dtoa_r+0x634>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f300 80d1 	bgt.w	800aa14 <_dtoa_r+0x634>
 800a872:	f040 826f 	bne.w	800ad54 <_dtoa_r+0x974>
 800a876:	4b65      	ldr	r3, [pc, #404]	; (800aa0c <_dtoa_r+0x62c>)
 800a878:	2200      	movs	r2, #0
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fee3 	bl	8000648 <__aeabi_dmul>
 800a882:	4652      	mov	r2, sl
 800a884:	465b      	mov	r3, fp
 800a886:	f7f6 f965 	bl	8000b54 <__aeabi_dcmpge>
 800a88a:	9e03      	ldr	r6, [sp, #12]
 800a88c:	4637      	mov	r7, r6
 800a88e:	2800      	cmp	r0, #0
 800a890:	f040 8245 	bne.w	800ad1e <_dtoa_r+0x93e>
 800a894:	9d01      	ldr	r5, [sp, #4]
 800a896:	2331      	movs	r3, #49	; 0x31
 800a898:	f805 3b01 	strb.w	r3, [r5], #1
 800a89c:	9b00      	ldr	r3, [sp, #0]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	e240      	b.n	800ad26 <_dtoa_r+0x946>
 800a8a4:	07f2      	lsls	r2, r6, #31
 800a8a6:	d505      	bpl.n	800a8b4 <_dtoa_r+0x4d4>
 800a8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ac:	f7f5 fecc 	bl	8000648 <__aeabi_dmul>
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	1076      	asrs	r6, r6, #1
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	e777      	b.n	800a7aa <_dtoa_r+0x3ca>
 800a8ba:	2502      	movs	r5, #2
 800a8bc:	e779      	b.n	800a7b2 <_dtoa_r+0x3d2>
 800a8be:	9f00      	ldr	r7, [sp, #0]
 800a8c0:	9e03      	ldr	r6, [sp, #12]
 800a8c2:	e794      	b.n	800a7ee <_dtoa_r+0x40e>
 800a8c4:	9901      	ldr	r1, [sp, #4]
 800a8c6:	4b4c      	ldr	r3, [pc, #304]	; (800a9f8 <_dtoa_r+0x618>)
 800a8c8:	4431      	add	r1, r6
 800a8ca:	910d      	str	r1, [sp, #52]	; 0x34
 800a8cc:	9908      	ldr	r1, [sp, #32]
 800a8ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	d043      	beq.n	800a962 <_dtoa_r+0x582>
 800a8da:	494d      	ldr	r1, [pc, #308]	; (800aa10 <_dtoa_r+0x630>)
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f7f5 ffdd 	bl	800089c <__aeabi_ddiv>
 800a8e2:	4652      	mov	r2, sl
 800a8e4:	465b      	mov	r3, fp
 800a8e6:	f7f5 fcf7 	bl	80002d8 <__aeabi_dsub>
 800a8ea:	9d01      	ldr	r5, [sp, #4]
 800a8ec:	4682      	mov	sl, r0
 800a8ee:	468b      	mov	fp, r1
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	f7f6 f958 	bl	8000ba8 <__aeabi_d2iz>
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	f7f5 fe3b 	bl	8000574 <__aeabi_i2d>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f5 fce7 	bl	80002d8 <__aeabi_dsub>
 800a90a:	3630      	adds	r6, #48	; 0x30
 800a90c:	f805 6b01 	strb.w	r6, [r5], #1
 800a910:	4652      	mov	r2, sl
 800a912:	465b      	mov	r3, fp
 800a914:	4680      	mov	r8, r0
 800a916:	4689      	mov	r9, r1
 800a918:	f7f6 f908 	bl	8000b2c <__aeabi_dcmplt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d163      	bne.n	800a9e8 <_dtoa_r+0x608>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	4936      	ldr	r1, [pc, #216]	; (800aa00 <_dtoa_r+0x620>)
 800a926:	2000      	movs	r0, #0
 800a928:	f7f5 fcd6 	bl	80002d8 <__aeabi_dsub>
 800a92c:	4652      	mov	r2, sl
 800a92e:	465b      	mov	r3, fp
 800a930:	f7f6 f8fc 	bl	8000b2c <__aeabi_dcmplt>
 800a934:	2800      	cmp	r0, #0
 800a936:	f040 80b5 	bne.w	800aaa4 <_dtoa_r+0x6c4>
 800a93a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a93c:	429d      	cmp	r5, r3
 800a93e:	d081      	beq.n	800a844 <_dtoa_r+0x464>
 800a940:	4b30      	ldr	r3, [pc, #192]	; (800aa04 <_dtoa_r+0x624>)
 800a942:	2200      	movs	r2, #0
 800a944:	4650      	mov	r0, sl
 800a946:	4659      	mov	r1, fp
 800a948:	f7f5 fe7e 	bl	8000648 <__aeabi_dmul>
 800a94c:	4b2d      	ldr	r3, [pc, #180]	; (800aa04 <_dtoa_r+0x624>)
 800a94e:	4682      	mov	sl, r0
 800a950:	468b      	mov	fp, r1
 800a952:	4640      	mov	r0, r8
 800a954:	4649      	mov	r1, r9
 800a956:	2200      	movs	r2, #0
 800a958:	f7f5 fe76 	bl	8000648 <__aeabi_dmul>
 800a95c:	4680      	mov	r8, r0
 800a95e:	4689      	mov	r9, r1
 800a960:	e7c6      	b.n	800a8f0 <_dtoa_r+0x510>
 800a962:	4650      	mov	r0, sl
 800a964:	4659      	mov	r1, fp
 800a966:	f7f5 fe6f 	bl	8000648 <__aeabi_dmul>
 800a96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a96c:	9d01      	ldr	r5, [sp, #4]
 800a96e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a970:	4682      	mov	sl, r0
 800a972:	468b      	mov	fp, r1
 800a974:	4649      	mov	r1, r9
 800a976:	4640      	mov	r0, r8
 800a978:	f7f6 f916 	bl	8000ba8 <__aeabi_d2iz>
 800a97c:	4606      	mov	r6, r0
 800a97e:	f7f5 fdf9 	bl	8000574 <__aeabi_i2d>
 800a982:	3630      	adds	r6, #48	; 0x30
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4640      	mov	r0, r8
 800a98a:	4649      	mov	r1, r9
 800a98c:	f7f5 fca4 	bl	80002d8 <__aeabi_dsub>
 800a990:	f805 6b01 	strb.w	r6, [r5], #1
 800a994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a996:	429d      	cmp	r5, r3
 800a998:	4680      	mov	r8, r0
 800a99a:	4689      	mov	r9, r1
 800a99c:	f04f 0200 	mov.w	r2, #0
 800a9a0:	d124      	bne.n	800a9ec <_dtoa_r+0x60c>
 800a9a2:	4b1b      	ldr	r3, [pc, #108]	; (800aa10 <_dtoa_r+0x630>)
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	4659      	mov	r1, fp
 800a9a8:	f7f5 fc98 	bl	80002dc <__adddf3>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	f7f6 f8d8 	bl	8000b68 <__aeabi_dcmpgt>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d173      	bne.n	800aaa4 <_dtoa_r+0x6c4>
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	4913      	ldr	r1, [pc, #76]	; (800aa10 <_dtoa_r+0x630>)
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	f7f5 fc88 	bl	80002d8 <__aeabi_dsub>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	f7f6 f8ac 	bl	8000b2c <__aeabi_dcmplt>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f43f af35 	beq.w	800a844 <_dtoa_r+0x464>
 800a9da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9dc:	1e6b      	subs	r3, r5, #1
 800a9de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9e4:	2b30      	cmp	r3, #48	; 0x30
 800a9e6:	d0f8      	beq.n	800a9da <_dtoa_r+0x5fa>
 800a9e8:	9700      	str	r7, [sp, #0]
 800a9ea:	e049      	b.n	800aa80 <_dtoa_r+0x6a0>
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <_dtoa_r+0x624>)
 800a9ee:	f7f5 fe2b 	bl	8000648 <__aeabi_dmul>
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	4689      	mov	r9, r1
 800a9f6:	e7bd      	b.n	800a974 <_dtoa_r+0x594>
 800a9f8:	0800d278 	.word	0x0800d278
 800a9fc:	0800d250 	.word	0x0800d250
 800aa00:	3ff00000 	.word	0x3ff00000
 800aa04:	40240000 	.word	0x40240000
 800aa08:	401c0000 	.word	0x401c0000
 800aa0c:	40140000 	.word	0x40140000
 800aa10:	3fe00000 	.word	0x3fe00000
 800aa14:	9d01      	ldr	r5, [sp, #4]
 800aa16:	4656      	mov	r6, sl
 800aa18:	465f      	mov	r7, fp
 800aa1a:	4642      	mov	r2, r8
 800aa1c:	464b      	mov	r3, r9
 800aa1e:	4630      	mov	r0, r6
 800aa20:	4639      	mov	r1, r7
 800aa22:	f7f5 ff3b 	bl	800089c <__aeabi_ddiv>
 800aa26:	f7f6 f8bf 	bl	8000ba8 <__aeabi_d2iz>
 800aa2a:	4682      	mov	sl, r0
 800aa2c:	f7f5 fda2 	bl	8000574 <__aeabi_i2d>
 800aa30:	4642      	mov	r2, r8
 800aa32:	464b      	mov	r3, r9
 800aa34:	f7f5 fe08 	bl	8000648 <__aeabi_dmul>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4639      	mov	r1, r7
 800aa40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aa44:	f7f5 fc48 	bl	80002d8 <__aeabi_dsub>
 800aa48:	f805 6b01 	strb.w	r6, [r5], #1
 800aa4c:	9e01      	ldr	r6, [sp, #4]
 800aa4e:	9f03      	ldr	r7, [sp, #12]
 800aa50:	1bae      	subs	r6, r5, r6
 800aa52:	42b7      	cmp	r7, r6
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	d135      	bne.n	800aac6 <_dtoa_r+0x6e6>
 800aa5a:	f7f5 fc3f 	bl	80002dc <__adddf3>
 800aa5e:	4642      	mov	r2, r8
 800aa60:	464b      	mov	r3, r9
 800aa62:	4606      	mov	r6, r0
 800aa64:	460f      	mov	r7, r1
 800aa66:	f7f6 f87f 	bl	8000b68 <__aeabi_dcmpgt>
 800aa6a:	b9d0      	cbnz	r0, 800aaa2 <_dtoa_r+0x6c2>
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f6 f850 	bl	8000b18 <__aeabi_dcmpeq>
 800aa78:	b110      	cbz	r0, 800aa80 <_dtoa_r+0x6a0>
 800aa7a:	f01a 0f01 	tst.w	sl, #1
 800aa7e:	d110      	bne.n	800aaa2 <_dtoa_r+0x6c2>
 800aa80:	4620      	mov	r0, r4
 800aa82:	ee18 1a10 	vmov	r1, s16
 800aa86:	f000 ff47 	bl	800b918 <_Bfree>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	9800      	ldr	r0, [sp, #0]
 800aa8e:	702b      	strb	r3, [r5, #0]
 800aa90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa92:	3001      	adds	r0, #1
 800aa94:	6018      	str	r0, [r3, #0]
 800aa96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f43f acf1 	beq.w	800a480 <_dtoa_r+0xa0>
 800aa9e:	601d      	str	r5, [r3, #0]
 800aaa0:	e4ee      	b.n	800a480 <_dtoa_r+0xa0>
 800aaa2:	9f00      	ldr	r7, [sp, #0]
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	461d      	mov	r5, r3
 800aaa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaac:	2a39      	cmp	r2, #57	; 0x39
 800aaae:	d106      	bne.n	800aabe <_dtoa_r+0x6de>
 800aab0:	9a01      	ldr	r2, [sp, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d1f7      	bne.n	800aaa6 <_dtoa_r+0x6c6>
 800aab6:	9901      	ldr	r1, [sp, #4]
 800aab8:	2230      	movs	r2, #48	; 0x30
 800aaba:	3701      	adds	r7, #1
 800aabc:	700a      	strb	r2, [r1, #0]
 800aabe:	781a      	ldrb	r2, [r3, #0]
 800aac0:	3201      	adds	r2, #1
 800aac2:	701a      	strb	r2, [r3, #0]
 800aac4:	e790      	b.n	800a9e8 <_dtoa_r+0x608>
 800aac6:	4ba6      	ldr	r3, [pc, #664]	; (800ad60 <_dtoa_r+0x980>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	f7f5 fdbd 	bl	8000648 <__aeabi_dmul>
 800aace:	2200      	movs	r2, #0
 800aad0:	2300      	movs	r3, #0
 800aad2:	4606      	mov	r6, r0
 800aad4:	460f      	mov	r7, r1
 800aad6:	f7f6 f81f 	bl	8000b18 <__aeabi_dcmpeq>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d09d      	beq.n	800aa1a <_dtoa_r+0x63a>
 800aade:	e7cf      	b.n	800aa80 <_dtoa_r+0x6a0>
 800aae0:	9a08      	ldr	r2, [sp, #32]
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	f000 80d7 	beq.w	800ac96 <_dtoa_r+0x8b6>
 800aae8:	9a06      	ldr	r2, [sp, #24]
 800aaea:	2a01      	cmp	r2, #1
 800aaec:	f300 80ba 	bgt.w	800ac64 <_dtoa_r+0x884>
 800aaf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	f000 80b2 	beq.w	800ac5c <_dtoa_r+0x87c>
 800aaf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aafc:	9e07      	ldr	r6, [sp, #28]
 800aafe:	9d04      	ldr	r5, [sp, #16]
 800ab00:	9a04      	ldr	r2, [sp, #16]
 800ab02:	441a      	add	r2, r3
 800ab04:	9204      	str	r2, [sp, #16]
 800ab06:	9a05      	ldr	r2, [sp, #20]
 800ab08:	2101      	movs	r1, #1
 800ab0a:	441a      	add	r2, r3
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	9205      	str	r2, [sp, #20]
 800ab10:	f001 f804 	bl	800bb1c <__i2b>
 800ab14:	4607      	mov	r7, r0
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	dd0c      	ble.n	800ab34 <_dtoa_r+0x754>
 800ab1a:	9b05      	ldr	r3, [sp, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dd09      	ble.n	800ab34 <_dtoa_r+0x754>
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	9a04      	ldr	r2, [sp, #16]
 800ab24:	bfa8      	it	ge
 800ab26:	462b      	movge	r3, r5
 800ab28:	1ad2      	subs	r2, r2, r3
 800ab2a:	9204      	str	r2, [sp, #16]
 800ab2c:	9a05      	ldr	r2, [sp, #20]
 800ab2e:	1aed      	subs	r5, r5, r3
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	9b07      	ldr	r3, [sp, #28]
 800ab36:	b31b      	cbz	r3, 800ab80 <_dtoa_r+0x7a0>
 800ab38:	9b08      	ldr	r3, [sp, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 80af 	beq.w	800ac9e <_dtoa_r+0x8be>
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	dd13      	ble.n	800ab6c <_dtoa_r+0x78c>
 800ab44:	4639      	mov	r1, r7
 800ab46:	4632      	mov	r2, r6
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f001 f8a7 	bl	800bc9c <__pow5mult>
 800ab4e:	ee18 2a10 	vmov	r2, s16
 800ab52:	4601      	mov	r1, r0
 800ab54:	4607      	mov	r7, r0
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fff6 	bl	800bb48 <__multiply>
 800ab5c:	ee18 1a10 	vmov	r1, s16
 800ab60:	4680      	mov	r8, r0
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 fed8 	bl	800b918 <_Bfree>
 800ab68:	ee08 8a10 	vmov	s16, r8
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	1b9a      	subs	r2, r3, r6
 800ab70:	d006      	beq.n	800ab80 <_dtoa_r+0x7a0>
 800ab72:	ee18 1a10 	vmov	r1, s16
 800ab76:	4620      	mov	r0, r4
 800ab78:	f001 f890 	bl	800bc9c <__pow5mult>
 800ab7c:	ee08 0a10 	vmov	s16, r0
 800ab80:	2101      	movs	r1, #1
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 ffca 	bl	800bb1c <__i2b>
 800ab88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	f340 8088 	ble.w	800aca2 <_dtoa_r+0x8c2>
 800ab92:	461a      	mov	r2, r3
 800ab94:	4601      	mov	r1, r0
 800ab96:	4620      	mov	r0, r4
 800ab98:	f001 f880 	bl	800bc9c <__pow5mult>
 800ab9c:	9b06      	ldr	r3, [sp, #24]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	4606      	mov	r6, r0
 800aba2:	f340 8081 	ble.w	800aca8 <_dtoa_r+0x8c8>
 800aba6:	f04f 0800 	mov.w	r8, #0
 800abaa:	6933      	ldr	r3, [r6, #16]
 800abac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abb0:	6918      	ldr	r0, [r3, #16]
 800abb2:	f000 ff63 	bl	800ba7c <__hi0bits>
 800abb6:	f1c0 0020 	rsb	r0, r0, #32
 800abba:	9b05      	ldr	r3, [sp, #20]
 800abbc:	4418      	add	r0, r3
 800abbe:	f010 001f 	ands.w	r0, r0, #31
 800abc2:	f000 8092 	beq.w	800acea <_dtoa_r+0x90a>
 800abc6:	f1c0 0320 	rsb	r3, r0, #32
 800abca:	2b04      	cmp	r3, #4
 800abcc:	f340 808a 	ble.w	800ace4 <_dtoa_r+0x904>
 800abd0:	f1c0 001c 	rsb	r0, r0, #28
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	4403      	add	r3, r0
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	9b05      	ldr	r3, [sp, #20]
 800abdc:	4403      	add	r3, r0
 800abde:	4405      	add	r5, r0
 800abe0:	9305      	str	r3, [sp, #20]
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dd07      	ble.n	800abf8 <_dtoa_r+0x818>
 800abe8:	ee18 1a10 	vmov	r1, s16
 800abec:	461a      	mov	r2, r3
 800abee:	4620      	mov	r0, r4
 800abf0:	f001 f8ae 	bl	800bd50 <__lshift>
 800abf4:	ee08 0a10 	vmov	s16, r0
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dd05      	ble.n	800ac0a <_dtoa_r+0x82a>
 800abfe:	4631      	mov	r1, r6
 800ac00:	461a      	mov	r2, r3
 800ac02:	4620      	mov	r0, r4
 800ac04:	f001 f8a4 	bl	800bd50 <__lshift>
 800ac08:	4606      	mov	r6, r0
 800ac0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d06e      	beq.n	800acee <_dtoa_r+0x90e>
 800ac10:	ee18 0a10 	vmov	r0, s16
 800ac14:	4631      	mov	r1, r6
 800ac16:	f001 f90b 	bl	800be30 <__mcmp>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	da67      	bge.n	800acee <_dtoa_r+0x90e>
 800ac1e:	9b00      	ldr	r3, [sp, #0]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	ee18 1a10 	vmov	r1, s16
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	220a      	movs	r2, #10
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f000 fe95 	bl	800b95c <__multadd>
 800ac32:	9b08      	ldr	r3, [sp, #32]
 800ac34:	ee08 0a10 	vmov	s16, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 81b1 	beq.w	800afa0 <_dtoa_r+0xbc0>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4639      	mov	r1, r7
 800ac42:	220a      	movs	r2, #10
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fe89 	bl	800b95c <__multadd>
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	4607      	mov	r7, r0
 800ac50:	f300 808e 	bgt.w	800ad70 <_dtoa_r+0x990>
 800ac54:	9b06      	ldr	r3, [sp, #24]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	dc51      	bgt.n	800acfe <_dtoa_r+0x91e>
 800ac5a:	e089      	b.n	800ad70 <_dtoa_r+0x990>
 800ac5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac62:	e74b      	b.n	800aafc <_dtoa_r+0x71c>
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	1e5e      	subs	r6, r3, #1
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	42b3      	cmp	r3, r6
 800ac6c:	bfbf      	itttt	lt
 800ac6e:	9b07      	ldrlt	r3, [sp, #28]
 800ac70:	9607      	strlt	r6, [sp, #28]
 800ac72:	1af2      	sublt	r2, r6, r3
 800ac74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac76:	bfb6      	itet	lt
 800ac78:	189b      	addlt	r3, r3, r2
 800ac7a:	1b9e      	subge	r6, r3, r6
 800ac7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	bfb8      	it	lt
 800ac82:	2600      	movlt	r6, #0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfb7      	itett	lt
 800ac88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac90:	1a9d      	sublt	r5, r3, r2
 800ac92:	2300      	movlt	r3, #0
 800ac94:	e734      	b.n	800ab00 <_dtoa_r+0x720>
 800ac96:	9e07      	ldr	r6, [sp, #28]
 800ac98:	9d04      	ldr	r5, [sp, #16]
 800ac9a:	9f08      	ldr	r7, [sp, #32]
 800ac9c:	e73b      	b.n	800ab16 <_dtoa_r+0x736>
 800ac9e:	9a07      	ldr	r2, [sp, #28]
 800aca0:	e767      	b.n	800ab72 <_dtoa_r+0x792>
 800aca2:	9b06      	ldr	r3, [sp, #24]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	dc18      	bgt.n	800acda <_dtoa_r+0x8fa>
 800aca8:	f1ba 0f00 	cmp.w	sl, #0
 800acac:	d115      	bne.n	800acda <_dtoa_r+0x8fa>
 800acae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acb2:	b993      	cbnz	r3, 800acda <_dtoa_r+0x8fa>
 800acb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acb8:	0d1b      	lsrs	r3, r3, #20
 800acba:	051b      	lsls	r3, r3, #20
 800acbc:	b183      	cbz	r3, 800ace0 <_dtoa_r+0x900>
 800acbe:	9b04      	ldr	r3, [sp, #16]
 800acc0:	3301      	adds	r3, #1
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	9b05      	ldr	r3, [sp, #20]
 800acc6:	3301      	adds	r3, #1
 800acc8:	9305      	str	r3, [sp, #20]
 800acca:	f04f 0801 	mov.w	r8, #1
 800acce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f47f af6a 	bne.w	800abaa <_dtoa_r+0x7ca>
 800acd6:	2001      	movs	r0, #1
 800acd8:	e76f      	b.n	800abba <_dtoa_r+0x7da>
 800acda:	f04f 0800 	mov.w	r8, #0
 800acde:	e7f6      	b.n	800acce <_dtoa_r+0x8ee>
 800ace0:	4698      	mov	r8, r3
 800ace2:	e7f4      	b.n	800acce <_dtoa_r+0x8ee>
 800ace4:	f43f af7d 	beq.w	800abe2 <_dtoa_r+0x802>
 800ace8:	4618      	mov	r0, r3
 800acea:	301c      	adds	r0, #28
 800acec:	e772      	b.n	800abd4 <_dtoa_r+0x7f4>
 800acee:	9b03      	ldr	r3, [sp, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	dc37      	bgt.n	800ad64 <_dtoa_r+0x984>
 800acf4:	9b06      	ldr	r3, [sp, #24]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dd34      	ble.n	800ad64 <_dtoa_r+0x984>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	b96b      	cbnz	r3, 800ad1e <_dtoa_r+0x93e>
 800ad02:	4631      	mov	r1, r6
 800ad04:	2205      	movs	r2, #5
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fe28 	bl	800b95c <__multadd>
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	4606      	mov	r6, r0
 800ad10:	ee18 0a10 	vmov	r0, s16
 800ad14:	f001 f88c 	bl	800be30 <__mcmp>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	f73f adbb 	bgt.w	800a894 <_dtoa_r+0x4b4>
 800ad1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad20:	9d01      	ldr	r5, [sp, #4]
 800ad22:	43db      	mvns	r3, r3
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	f04f 0800 	mov.w	r8, #0
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 fdf3 	bl	800b918 <_Bfree>
 800ad32:	2f00      	cmp	r7, #0
 800ad34:	f43f aea4 	beq.w	800aa80 <_dtoa_r+0x6a0>
 800ad38:	f1b8 0f00 	cmp.w	r8, #0
 800ad3c:	d005      	beq.n	800ad4a <_dtoa_r+0x96a>
 800ad3e:	45b8      	cmp	r8, r7
 800ad40:	d003      	beq.n	800ad4a <_dtoa_r+0x96a>
 800ad42:	4641      	mov	r1, r8
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 fde7 	bl	800b918 <_Bfree>
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f000 fde3 	bl	800b918 <_Bfree>
 800ad52:	e695      	b.n	800aa80 <_dtoa_r+0x6a0>
 800ad54:	2600      	movs	r6, #0
 800ad56:	4637      	mov	r7, r6
 800ad58:	e7e1      	b.n	800ad1e <_dtoa_r+0x93e>
 800ad5a:	9700      	str	r7, [sp, #0]
 800ad5c:	4637      	mov	r7, r6
 800ad5e:	e599      	b.n	800a894 <_dtoa_r+0x4b4>
 800ad60:	40240000 	.word	0x40240000
 800ad64:	9b08      	ldr	r3, [sp, #32]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 80ca 	beq.w	800af00 <_dtoa_r+0xb20>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	9302      	str	r3, [sp, #8]
 800ad70:	2d00      	cmp	r5, #0
 800ad72:	dd05      	ble.n	800ad80 <_dtoa_r+0x9a0>
 800ad74:	4639      	mov	r1, r7
 800ad76:	462a      	mov	r2, r5
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 ffe9 	bl	800bd50 <__lshift>
 800ad7e:	4607      	mov	r7, r0
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	d05b      	beq.n	800ae3e <_dtoa_r+0xa5e>
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fd85 	bl	800b898 <_Balloc>
 800ad8e:	4605      	mov	r5, r0
 800ad90:	b928      	cbnz	r0, 800ad9e <_dtoa_r+0x9be>
 800ad92:	4b87      	ldr	r3, [pc, #540]	; (800afb0 <_dtoa_r+0xbd0>)
 800ad94:	4602      	mov	r2, r0
 800ad96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad9a:	f7ff bb3b 	b.w	800a414 <_dtoa_r+0x34>
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	3202      	adds	r2, #2
 800ada2:	0092      	lsls	r2, r2, #2
 800ada4:	f107 010c 	add.w	r1, r7, #12
 800ada8:	300c      	adds	r0, #12
 800adaa:	f7fd fbb2 	bl	8008512 <memcpy>
 800adae:	2201      	movs	r2, #1
 800adb0:	4629      	mov	r1, r5
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 ffcc 	bl	800bd50 <__lshift>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	f103 0901 	add.w	r9, r3, #1
 800adbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800adc2:	4413      	add	r3, r2
 800adc4:	9305      	str	r3, [sp, #20]
 800adc6:	f00a 0301 	and.w	r3, sl, #1
 800adca:	46b8      	mov	r8, r7
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	4607      	mov	r7, r0
 800add0:	4631      	mov	r1, r6
 800add2:	ee18 0a10 	vmov	r0, s16
 800add6:	f7ff fa75 	bl	800a2c4 <quorem>
 800adda:	4641      	mov	r1, r8
 800addc:	9002      	str	r0, [sp, #8]
 800adde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ade2:	ee18 0a10 	vmov	r0, s16
 800ade6:	f001 f823 	bl	800be30 <__mcmp>
 800adea:	463a      	mov	r2, r7
 800adec:	9003      	str	r0, [sp, #12]
 800adee:	4631      	mov	r1, r6
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 f839 	bl	800be68 <__mdiff>
 800adf6:	68c2      	ldr	r2, [r0, #12]
 800adf8:	f109 3bff 	add.w	fp, r9, #4294967295
 800adfc:	4605      	mov	r5, r0
 800adfe:	bb02      	cbnz	r2, 800ae42 <_dtoa_r+0xa62>
 800ae00:	4601      	mov	r1, r0
 800ae02:	ee18 0a10 	vmov	r0, s16
 800ae06:	f001 f813 	bl	800be30 <__mcmp>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4620      	mov	r0, r4
 800ae10:	9207      	str	r2, [sp, #28]
 800ae12:	f000 fd81 	bl	800b918 <_Bfree>
 800ae16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae1a:	ea43 0102 	orr.w	r1, r3, r2
 800ae1e:	9b04      	ldr	r3, [sp, #16]
 800ae20:	430b      	orrs	r3, r1
 800ae22:	464d      	mov	r5, r9
 800ae24:	d10f      	bne.n	800ae46 <_dtoa_r+0xa66>
 800ae26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae2a:	d02a      	beq.n	800ae82 <_dtoa_r+0xaa2>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	dd02      	ble.n	800ae38 <_dtoa_r+0xa58>
 800ae32:	9b02      	ldr	r3, [sp, #8]
 800ae34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ae38:	f88b a000 	strb.w	sl, [fp]
 800ae3c:	e775      	b.n	800ad2a <_dtoa_r+0x94a>
 800ae3e:	4638      	mov	r0, r7
 800ae40:	e7ba      	b.n	800adb8 <_dtoa_r+0x9d8>
 800ae42:	2201      	movs	r2, #1
 800ae44:	e7e2      	b.n	800ae0c <_dtoa_r+0xa2c>
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db04      	blt.n	800ae56 <_dtoa_r+0xa76>
 800ae4c:	9906      	ldr	r1, [sp, #24]
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	9904      	ldr	r1, [sp, #16]
 800ae52:	430b      	orrs	r3, r1
 800ae54:	d122      	bne.n	800ae9c <_dtoa_r+0xabc>
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	ddee      	ble.n	800ae38 <_dtoa_r+0xa58>
 800ae5a:	ee18 1a10 	vmov	r1, s16
 800ae5e:	2201      	movs	r2, #1
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 ff75 	bl	800bd50 <__lshift>
 800ae66:	4631      	mov	r1, r6
 800ae68:	ee08 0a10 	vmov	s16, r0
 800ae6c:	f000 ffe0 	bl	800be30 <__mcmp>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	dc03      	bgt.n	800ae7c <_dtoa_r+0xa9c>
 800ae74:	d1e0      	bne.n	800ae38 <_dtoa_r+0xa58>
 800ae76:	f01a 0f01 	tst.w	sl, #1
 800ae7a:	d0dd      	beq.n	800ae38 <_dtoa_r+0xa58>
 800ae7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae80:	d1d7      	bne.n	800ae32 <_dtoa_r+0xa52>
 800ae82:	2339      	movs	r3, #57	; 0x39
 800ae84:	f88b 3000 	strb.w	r3, [fp]
 800ae88:	462b      	mov	r3, r5
 800ae8a:	461d      	mov	r5, r3
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae92:	2a39      	cmp	r2, #57	; 0x39
 800ae94:	d071      	beq.n	800af7a <_dtoa_r+0xb9a>
 800ae96:	3201      	adds	r2, #1
 800ae98:	701a      	strb	r2, [r3, #0]
 800ae9a:	e746      	b.n	800ad2a <_dtoa_r+0x94a>
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	dd07      	ble.n	800aeb0 <_dtoa_r+0xad0>
 800aea0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aea4:	d0ed      	beq.n	800ae82 <_dtoa_r+0xaa2>
 800aea6:	f10a 0301 	add.w	r3, sl, #1
 800aeaa:	f88b 3000 	strb.w	r3, [fp]
 800aeae:	e73c      	b.n	800ad2a <_dtoa_r+0x94a>
 800aeb0:	9b05      	ldr	r3, [sp, #20]
 800aeb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aeb6:	4599      	cmp	r9, r3
 800aeb8:	d047      	beq.n	800af4a <_dtoa_r+0xb6a>
 800aeba:	ee18 1a10 	vmov	r1, s16
 800aebe:	2300      	movs	r3, #0
 800aec0:	220a      	movs	r2, #10
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fd4a 	bl	800b95c <__multadd>
 800aec8:	45b8      	cmp	r8, r7
 800aeca:	ee08 0a10 	vmov	s16, r0
 800aece:	f04f 0300 	mov.w	r3, #0
 800aed2:	f04f 020a 	mov.w	r2, #10
 800aed6:	4641      	mov	r1, r8
 800aed8:	4620      	mov	r0, r4
 800aeda:	d106      	bne.n	800aeea <_dtoa_r+0xb0a>
 800aedc:	f000 fd3e 	bl	800b95c <__multadd>
 800aee0:	4680      	mov	r8, r0
 800aee2:	4607      	mov	r7, r0
 800aee4:	f109 0901 	add.w	r9, r9, #1
 800aee8:	e772      	b.n	800add0 <_dtoa_r+0x9f0>
 800aeea:	f000 fd37 	bl	800b95c <__multadd>
 800aeee:	4639      	mov	r1, r7
 800aef0:	4680      	mov	r8, r0
 800aef2:	2300      	movs	r3, #0
 800aef4:	220a      	movs	r2, #10
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 fd30 	bl	800b95c <__multadd>
 800aefc:	4607      	mov	r7, r0
 800aefe:	e7f1      	b.n	800aee4 <_dtoa_r+0xb04>
 800af00:	9b03      	ldr	r3, [sp, #12]
 800af02:	9302      	str	r3, [sp, #8]
 800af04:	9d01      	ldr	r5, [sp, #4]
 800af06:	ee18 0a10 	vmov	r0, s16
 800af0a:	4631      	mov	r1, r6
 800af0c:	f7ff f9da 	bl	800a2c4 <quorem>
 800af10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af14:	9b01      	ldr	r3, [sp, #4]
 800af16:	f805 ab01 	strb.w	sl, [r5], #1
 800af1a:	1aea      	subs	r2, r5, r3
 800af1c:	9b02      	ldr	r3, [sp, #8]
 800af1e:	4293      	cmp	r3, r2
 800af20:	dd09      	ble.n	800af36 <_dtoa_r+0xb56>
 800af22:	ee18 1a10 	vmov	r1, s16
 800af26:	2300      	movs	r3, #0
 800af28:	220a      	movs	r2, #10
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fd16 	bl	800b95c <__multadd>
 800af30:	ee08 0a10 	vmov	s16, r0
 800af34:	e7e7      	b.n	800af06 <_dtoa_r+0xb26>
 800af36:	9b02      	ldr	r3, [sp, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bfc8      	it	gt
 800af3c:	461d      	movgt	r5, r3
 800af3e:	9b01      	ldr	r3, [sp, #4]
 800af40:	bfd8      	it	le
 800af42:	2501      	movle	r5, #1
 800af44:	441d      	add	r5, r3
 800af46:	f04f 0800 	mov.w	r8, #0
 800af4a:	ee18 1a10 	vmov	r1, s16
 800af4e:	2201      	movs	r2, #1
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fefd 	bl	800bd50 <__lshift>
 800af56:	4631      	mov	r1, r6
 800af58:	ee08 0a10 	vmov	s16, r0
 800af5c:	f000 ff68 	bl	800be30 <__mcmp>
 800af60:	2800      	cmp	r0, #0
 800af62:	dc91      	bgt.n	800ae88 <_dtoa_r+0xaa8>
 800af64:	d102      	bne.n	800af6c <_dtoa_r+0xb8c>
 800af66:	f01a 0f01 	tst.w	sl, #1
 800af6a:	d18d      	bne.n	800ae88 <_dtoa_r+0xaa8>
 800af6c:	462b      	mov	r3, r5
 800af6e:	461d      	mov	r5, r3
 800af70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af74:	2a30      	cmp	r2, #48	; 0x30
 800af76:	d0fa      	beq.n	800af6e <_dtoa_r+0xb8e>
 800af78:	e6d7      	b.n	800ad2a <_dtoa_r+0x94a>
 800af7a:	9a01      	ldr	r2, [sp, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d184      	bne.n	800ae8a <_dtoa_r+0xaaa>
 800af80:	9b00      	ldr	r3, [sp, #0]
 800af82:	3301      	adds	r3, #1
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	2331      	movs	r3, #49	; 0x31
 800af88:	7013      	strb	r3, [r2, #0]
 800af8a:	e6ce      	b.n	800ad2a <_dtoa_r+0x94a>
 800af8c:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <_dtoa_r+0xbd4>)
 800af8e:	f7ff ba95 	b.w	800a4bc <_dtoa_r+0xdc>
 800af92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af94:	2b00      	cmp	r3, #0
 800af96:	f47f aa6e 	bne.w	800a476 <_dtoa_r+0x96>
 800af9a:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <_dtoa_r+0xbd8>)
 800af9c:	f7ff ba8e 	b.w	800a4bc <_dtoa_r+0xdc>
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	dcae      	bgt.n	800af04 <_dtoa_r+0xb24>
 800afa6:	9b06      	ldr	r3, [sp, #24]
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	f73f aea8 	bgt.w	800acfe <_dtoa_r+0x91e>
 800afae:	e7a9      	b.n	800af04 <_dtoa_r+0xb24>
 800afb0:	0800d168 	.word	0x0800d168
 800afb4:	0800cf68 	.word	0x0800cf68
 800afb8:	0800d0e9 	.word	0x0800d0e9

0800afbc <__sflush_r>:
 800afbc:	898a      	ldrh	r2, [r1, #12]
 800afbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	4605      	mov	r5, r0
 800afc4:	0710      	lsls	r0, r2, #28
 800afc6:	460c      	mov	r4, r1
 800afc8:	d458      	bmi.n	800b07c <__sflush_r+0xc0>
 800afca:	684b      	ldr	r3, [r1, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dc05      	bgt.n	800afdc <__sflush_r+0x20>
 800afd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dc02      	bgt.n	800afdc <__sflush_r+0x20>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afde:	2e00      	cmp	r6, #0
 800afe0:	d0f9      	beq.n	800afd6 <__sflush_r+0x1a>
 800afe2:	2300      	movs	r3, #0
 800afe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afe8:	682f      	ldr	r7, [r5, #0]
 800afea:	602b      	str	r3, [r5, #0]
 800afec:	d032      	beq.n	800b054 <__sflush_r+0x98>
 800afee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	075a      	lsls	r2, r3, #29
 800aff4:	d505      	bpl.n	800b002 <__sflush_r+0x46>
 800aff6:	6863      	ldr	r3, [r4, #4]
 800aff8:	1ac0      	subs	r0, r0, r3
 800affa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800affc:	b10b      	cbz	r3, 800b002 <__sflush_r+0x46>
 800affe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b000:	1ac0      	subs	r0, r0, r3
 800b002:	2300      	movs	r3, #0
 800b004:	4602      	mov	r2, r0
 800b006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b008:	6a21      	ldr	r1, [r4, #32]
 800b00a:	4628      	mov	r0, r5
 800b00c:	47b0      	blx	r6
 800b00e:	1c43      	adds	r3, r0, #1
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	d106      	bne.n	800b022 <__sflush_r+0x66>
 800b014:	6829      	ldr	r1, [r5, #0]
 800b016:	291d      	cmp	r1, #29
 800b018:	d82c      	bhi.n	800b074 <__sflush_r+0xb8>
 800b01a:	4a2a      	ldr	r2, [pc, #168]	; (800b0c4 <__sflush_r+0x108>)
 800b01c:	40ca      	lsrs	r2, r1
 800b01e:	07d6      	lsls	r6, r2, #31
 800b020:	d528      	bpl.n	800b074 <__sflush_r+0xb8>
 800b022:	2200      	movs	r2, #0
 800b024:	6062      	str	r2, [r4, #4]
 800b026:	04d9      	lsls	r1, r3, #19
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	6022      	str	r2, [r4, #0]
 800b02c:	d504      	bpl.n	800b038 <__sflush_r+0x7c>
 800b02e:	1c42      	adds	r2, r0, #1
 800b030:	d101      	bne.n	800b036 <__sflush_r+0x7a>
 800b032:	682b      	ldr	r3, [r5, #0]
 800b034:	b903      	cbnz	r3, 800b038 <__sflush_r+0x7c>
 800b036:	6560      	str	r0, [r4, #84]	; 0x54
 800b038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b03a:	602f      	str	r7, [r5, #0]
 800b03c:	2900      	cmp	r1, #0
 800b03e:	d0ca      	beq.n	800afd6 <__sflush_r+0x1a>
 800b040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b044:	4299      	cmp	r1, r3
 800b046:	d002      	beq.n	800b04e <__sflush_r+0x92>
 800b048:	4628      	mov	r0, r5
 800b04a:	f001 f8fd 	bl	800c248 <_free_r>
 800b04e:	2000      	movs	r0, #0
 800b050:	6360      	str	r0, [r4, #52]	; 0x34
 800b052:	e7c1      	b.n	800afd8 <__sflush_r+0x1c>
 800b054:	6a21      	ldr	r1, [r4, #32]
 800b056:	2301      	movs	r3, #1
 800b058:	4628      	mov	r0, r5
 800b05a:	47b0      	blx	r6
 800b05c:	1c41      	adds	r1, r0, #1
 800b05e:	d1c7      	bne.n	800aff0 <__sflush_r+0x34>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0c4      	beq.n	800aff0 <__sflush_r+0x34>
 800b066:	2b1d      	cmp	r3, #29
 800b068:	d001      	beq.n	800b06e <__sflush_r+0xb2>
 800b06a:	2b16      	cmp	r3, #22
 800b06c:	d101      	bne.n	800b072 <__sflush_r+0xb6>
 800b06e:	602f      	str	r7, [r5, #0]
 800b070:	e7b1      	b.n	800afd6 <__sflush_r+0x1a>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	e7ad      	b.n	800afd8 <__sflush_r+0x1c>
 800b07c:	690f      	ldr	r7, [r1, #16]
 800b07e:	2f00      	cmp	r7, #0
 800b080:	d0a9      	beq.n	800afd6 <__sflush_r+0x1a>
 800b082:	0793      	lsls	r3, r2, #30
 800b084:	680e      	ldr	r6, [r1, #0]
 800b086:	bf08      	it	eq
 800b088:	694b      	ldreq	r3, [r1, #20]
 800b08a:	600f      	str	r7, [r1, #0]
 800b08c:	bf18      	it	ne
 800b08e:	2300      	movne	r3, #0
 800b090:	eba6 0807 	sub.w	r8, r6, r7
 800b094:	608b      	str	r3, [r1, #8]
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	dd9c      	ble.n	800afd6 <__sflush_r+0x1a>
 800b09c:	6a21      	ldr	r1, [r4, #32]
 800b09e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0a0:	4643      	mov	r3, r8
 800b0a2:	463a      	mov	r2, r7
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b0      	blx	r6
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dc06      	bgt.n	800b0ba <__sflush_r+0xfe>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e78e      	b.n	800afd8 <__sflush_r+0x1c>
 800b0ba:	4407      	add	r7, r0
 800b0bc:	eba8 0800 	sub.w	r8, r8, r0
 800b0c0:	e7e9      	b.n	800b096 <__sflush_r+0xda>
 800b0c2:	bf00      	nop
 800b0c4:	20400001 	.word	0x20400001

0800b0c8 <_fflush_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	690b      	ldr	r3, [r1, #16]
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	b913      	cbnz	r3, 800b0d8 <_fflush_r+0x10>
 800b0d2:	2500      	movs	r5, #0
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	b118      	cbz	r0, 800b0e2 <_fflush_r+0x1a>
 800b0da:	6983      	ldr	r3, [r0, #24]
 800b0dc:	b90b      	cbnz	r3, 800b0e2 <_fflush_r+0x1a>
 800b0de:	f7fd f953 	bl	8008388 <__sinit>
 800b0e2:	4b14      	ldr	r3, [pc, #80]	; (800b134 <_fflush_r+0x6c>)
 800b0e4:	429c      	cmp	r4, r3
 800b0e6:	d11b      	bne.n	800b120 <_fflush_r+0x58>
 800b0e8:	686c      	ldr	r4, [r5, #4]
 800b0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0ef      	beq.n	800b0d2 <_fflush_r+0xa>
 800b0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0f4:	07d0      	lsls	r0, r2, #31
 800b0f6:	d404      	bmi.n	800b102 <_fflush_r+0x3a>
 800b0f8:	0599      	lsls	r1, r3, #22
 800b0fa:	d402      	bmi.n	800b102 <_fflush_r+0x3a>
 800b0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0fe:	f7fd fa06 	bl	800850e <__retarget_lock_acquire_recursive>
 800b102:	4628      	mov	r0, r5
 800b104:	4621      	mov	r1, r4
 800b106:	f7ff ff59 	bl	800afbc <__sflush_r>
 800b10a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b10c:	07da      	lsls	r2, r3, #31
 800b10e:	4605      	mov	r5, r0
 800b110:	d4e0      	bmi.n	800b0d4 <_fflush_r+0xc>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	059b      	lsls	r3, r3, #22
 800b116:	d4dd      	bmi.n	800b0d4 <_fflush_r+0xc>
 800b118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b11a:	f7fd f9f9 	bl	8008510 <__retarget_lock_release_recursive>
 800b11e:	e7d9      	b.n	800b0d4 <_fflush_r+0xc>
 800b120:	4b05      	ldr	r3, [pc, #20]	; (800b138 <_fflush_r+0x70>)
 800b122:	429c      	cmp	r4, r3
 800b124:	d101      	bne.n	800b12a <_fflush_r+0x62>
 800b126:	68ac      	ldr	r4, [r5, #8]
 800b128:	e7df      	b.n	800b0ea <_fflush_r+0x22>
 800b12a:	4b04      	ldr	r3, [pc, #16]	; (800b13c <_fflush_r+0x74>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	bf08      	it	eq
 800b130:	68ec      	ldreq	r4, [r5, #12]
 800b132:	e7da      	b.n	800b0ea <_fflush_r+0x22>
 800b134:	0800cf14 	.word	0x0800cf14
 800b138:	0800cf34 	.word	0x0800cf34
 800b13c:	0800cef4 	.word	0x0800cef4

0800b140 <rshift>:
 800b140:	6903      	ldr	r3, [r0, #16]
 800b142:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b14a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b14e:	f100 0414 	add.w	r4, r0, #20
 800b152:	dd45      	ble.n	800b1e0 <rshift+0xa0>
 800b154:	f011 011f 	ands.w	r1, r1, #31
 800b158:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b15c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b160:	d10c      	bne.n	800b17c <rshift+0x3c>
 800b162:	f100 0710 	add.w	r7, r0, #16
 800b166:	4629      	mov	r1, r5
 800b168:	42b1      	cmp	r1, r6
 800b16a:	d334      	bcc.n	800b1d6 <rshift+0x96>
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	1eea      	subs	r2, r5, #3
 800b172:	4296      	cmp	r6, r2
 800b174:	bf38      	it	cc
 800b176:	2300      	movcc	r3, #0
 800b178:	4423      	add	r3, r4
 800b17a:	e015      	b.n	800b1a8 <rshift+0x68>
 800b17c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b180:	f1c1 0820 	rsb	r8, r1, #32
 800b184:	40cf      	lsrs	r7, r1
 800b186:	f105 0e04 	add.w	lr, r5, #4
 800b18a:	46a1      	mov	r9, r4
 800b18c:	4576      	cmp	r6, lr
 800b18e:	46f4      	mov	ip, lr
 800b190:	d815      	bhi.n	800b1be <rshift+0x7e>
 800b192:	1a9a      	subs	r2, r3, r2
 800b194:	0092      	lsls	r2, r2, #2
 800b196:	3a04      	subs	r2, #4
 800b198:	3501      	adds	r5, #1
 800b19a:	42ae      	cmp	r6, r5
 800b19c:	bf38      	it	cc
 800b19e:	2200      	movcc	r2, #0
 800b1a0:	18a3      	adds	r3, r4, r2
 800b1a2:	50a7      	str	r7, [r4, r2]
 800b1a4:	b107      	cbz	r7, 800b1a8 <rshift+0x68>
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	1b1a      	subs	r2, r3, r4
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1b0:	bf08      	it	eq
 800b1b2:	2300      	moveq	r3, #0
 800b1b4:	6102      	str	r2, [r0, #16]
 800b1b6:	bf08      	it	eq
 800b1b8:	6143      	streq	r3, [r0, #20]
 800b1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1be:	f8dc c000 	ldr.w	ip, [ip]
 800b1c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1c6:	ea4c 0707 	orr.w	r7, ip, r7
 800b1ca:	f849 7b04 	str.w	r7, [r9], #4
 800b1ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1d2:	40cf      	lsrs	r7, r1
 800b1d4:	e7da      	b.n	800b18c <rshift+0x4c>
 800b1d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1da:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1de:	e7c3      	b.n	800b168 <rshift+0x28>
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	e7e1      	b.n	800b1a8 <rshift+0x68>

0800b1e4 <__hexdig_fun>:
 800b1e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1e8:	2b09      	cmp	r3, #9
 800b1ea:	d802      	bhi.n	800b1f2 <__hexdig_fun+0xe>
 800b1ec:	3820      	subs	r0, #32
 800b1ee:	b2c0      	uxtb	r0, r0
 800b1f0:	4770      	bx	lr
 800b1f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d801      	bhi.n	800b1fe <__hexdig_fun+0x1a>
 800b1fa:	3847      	subs	r0, #71	; 0x47
 800b1fc:	e7f7      	b.n	800b1ee <__hexdig_fun+0xa>
 800b1fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b202:	2b05      	cmp	r3, #5
 800b204:	d801      	bhi.n	800b20a <__hexdig_fun+0x26>
 800b206:	3827      	subs	r0, #39	; 0x27
 800b208:	e7f1      	b.n	800b1ee <__hexdig_fun+0xa>
 800b20a:	2000      	movs	r0, #0
 800b20c:	4770      	bx	lr
	...

0800b210 <__gethex>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ed2d 8b02 	vpush	{d8}
 800b218:	b089      	sub	sp, #36	; 0x24
 800b21a:	ee08 0a10 	vmov	s16, r0
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	4bb4      	ldr	r3, [pc, #720]	; (800b4f4 <__gethex+0x2e4>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	468b      	mov	fp, r1
 800b22a:	4690      	mov	r8, r2
 800b22c:	f7f4 fff8 	bl	8000220 <strlen>
 800b230:	9b01      	ldr	r3, [sp, #4]
 800b232:	f8db 2000 	ldr.w	r2, [fp]
 800b236:	4403      	add	r3, r0
 800b238:	4682      	mov	sl, r0
 800b23a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	1c93      	adds	r3, r2, #2
 800b242:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b246:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b24a:	32fe      	adds	r2, #254	; 0xfe
 800b24c:	18d1      	adds	r1, r2, r3
 800b24e:	461f      	mov	r7, r3
 800b250:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b254:	9100      	str	r1, [sp, #0]
 800b256:	2830      	cmp	r0, #48	; 0x30
 800b258:	d0f8      	beq.n	800b24c <__gethex+0x3c>
 800b25a:	f7ff ffc3 	bl	800b1e4 <__hexdig_fun>
 800b25e:	4604      	mov	r4, r0
 800b260:	2800      	cmp	r0, #0
 800b262:	d13a      	bne.n	800b2da <__gethex+0xca>
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	4652      	mov	r2, sl
 800b268:	4638      	mov	r0, r7
 800b26a:	f001 f9b1 	bl	800c5d0 <strncmp>
 800b26e:	4605      	mov	r5, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d168      	bne.n	800b346 <__gethex+0x136>
 800b274:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b278:	eb07 060a 	add.w	r6, r7, sl
 800b27c:	f7ff ffb2 	bl	800b1e4 <__hexdig_fun>
 800b280:	2800      	cmp	r0, #0
 800b282:	d062      	beq.n	800b34a <__gethex+0x13a>
 800b284:	4633      	mov	r3, r6
 800b286:	7818      	ldrb	r0, [r3, #0]
 800b288:	2830      	cmp	r0, #48	; 0x30
 800b28a:	461f      	mov	r7, r3
 800b28c:	f103 0301 	add.w	r3, r3, #1
 800b290:	d0f9      	beq.n	800b286 <__gethex+0x76>
 800b292:	f7ff ffa7 	bl	800b1e4 <__hexdig_fun>
 800b296:	2301      	movs	r3, #1
 800b298:	fab0 f480 	clz	r4, r0
 800b29c:	0964      	lsrs	r4, r4, #5
 800b29e:	4635      	mov	r5, r6
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	3201      	adds	r2, #1
 800b2a8:	7830      	ldrb	r0, [r6, #0]
 800b2aa:	f7ff ff9b 	bl	800b1e4 <__hexdig_fun>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d1f8      	bne.n	800b2a4 <__gethex+0x94>
 800b2b2:	9901      	ldr	r1, [sp, #4]
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f001 f98a 	bl	800c5d0 <strncmp>
 800b2bc:	b980      	cbnz	r0, 800b2e0 <__gethex+0xd0>
 800b2be:	b94d      	cbnz	r5, 800b2d4 <__gethex+0xc4>
 800b2c0:	eb06 050a 	add.w	r5, r6, sl
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4616      	mov	r6, r2
 800b2c8:	3201      	adds	r2, #1
 800b2ca:	7830      	ldrb	r0, [r6, #0]
 800b2cc:	f7ff ff8a 	bl	800b1e4 <__hexdig_fun>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d1f8      	bne.n	800b2c6 <__gethex+0xb6>
 800b2d4:	1bad      	subs	r5, r5, r6
 800b2d6:	00ad      	lsls	r5, r5, #2
 800b2d8:	e004      	b.n	800b2e4 <__gethex+0xd4>
 800b2da:	2400      	movs	r4, #0
 800b2dc:	4625      	mov	r5, r4
 800b2de:	e7e0      	b.n	800b2a2 <__gethex+0x92>
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	d1f7      	bne.n	800b2d4 <__gethex+0xc4>
 800b2e4:	7833      	ldrb	r3, [r6, #0]
 800b2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2ea:	2b50      	cmp	r3, #80	; 0x50
 800b2ec:	d13b      	bne.n	800b366 <__gethex+0x156>
 800b2ee:	7873      	ldrb	r3, [r6, #1]
 800b2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2f2:	d02c      	beq.n	800b34e <__gethex+0x13e>
 800b2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2f6:	d02e      	beq.n	800b356 <__gethex+0x146>
 800b2f8:	1c71      	adds	r1, r6, #1
 800b2fa:	f04f 0900 	mov.w	r9, #0
 800b2fe:	7808      	ldrb	r0, [r1, #0]
 800b300:	f7ff ff70 	bl	800b1e4 <__hexdig_fun>
 800b304:	1e43      	subs	r3, r0, #1
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b18      	cmp	r3, #24
 800b30a:	d82c      	bhi.n	800b366 <__gethex+0x156>
 800b30c:	f1a0 0210 	sub.w	r2, r0, #16
 800b310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b314:	f7ff ff66 	bl	800b1e4 <__hexdig_fun>
 800b318:	1e43      	subs	r3, r0, #1
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b18      	cmp	r3, #24
 800b31e:	d91d      	bls.n	800b35c <__gethex+0x14c>
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	d000      	beq.n	800b328 <__gethex+0x118>
 800b326:	4252      	negs	r2, r2
 800b328:	4415      	add	r5, r2
 800b32a:	f8cb 1000 	str.w	r1, [fp]
 800b32e:	b1e4      	cbz	r4, 800b36a <__gethex+0x15a>
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bf14      	ite	ne
 800b336:	2700      	movne	r7, #0
 800b338:	2706      	moveq	r7, #6
 800b33a:	4638      	mov	r0, r7
 800b33c:	b009      	add	sp, #36	; 0x24
 800b33e:	ecbd 8b02 	vpop	{d8}
 800b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b346:	463e      	mov	r6, r7
 800b348:	4625      	mov	r5, r4
 800b34a:	2401      	movs	r4, #1
 800b34c:	e7ca      	b.n	800b2e4 <__gethex+0xd4>
 800b34e:	f04f 0900 	mov.w	r9, #0
 800b352:	1cb1      	adds	r1, r6, #2
 800b354:	e7d3      	b.n	800b2fe <__gethex+0xee>
 800b356:	f04f 0901 	mov.w	r9, #1
 800b35a:	e7fa      	b.n	800b352 <__gethex+0x142>
 800b35c:	230a      	movs	r3, #10
 800b35e:	fb03 0202 	mla	r2, r3, r2, r0
 800b362:	3a10      	subs	r2, #16
 800b364:	e7d4      	b.n	800b310 <__gethex+0x100>
 800b366:	4631      	mov	r1, r6
 800b368:	e7df      	b.n	800b32a <__gethex+0x11a>
 800b36a:	1bf3      	subs	r3, r6, r7
 800b36c:	3b01      	subs	r3, #1
 800b36e:	4621      	mov	r1, r4
 800b370:	2b07      	cmp	r3, #7
 800b372:	dc0b      	bgt.n	800b38c <__gethex+0x17c>
 800b374:	ee18 0a10 	vmov	r0, s16
 800b378:	f000 fa8e 	bl	800b898 <_Balloc>
 800b37c:	4604      	mov	r4, r0
 800b37e:	b940      	cbnz	r0, 800b392 <__gethex+0x182>
 800b380:	4b5d      	ldr	r3, [pc, #372]	; (800b4f8 <__gethex+0x2e8>)
 800b382:	4602      	mov	r2, r0
 800b384:	21de      	movs	r1, #222	; 0xde
 800b386:	485d      	ldr	r0, [pc, #372]	; (800b4fc <__gethex+0x2ec>)
 800b388:	f001 f944 	bl	800c614 <__assert_func>
 800b38c:	3101      	adds	r1, #1
 800b38e:	105b      	asrs	r3, r3, #1
 800b390:	e7ee      	b.n	800b370 <__gethex+0x160>
 800b392:	f100 0914 	add.w	r9, r0, #20
 800b396:	f04f 0b00 	mov.w	fp, #0
 800b39a:	f1ca 0301 	rsb	r3, sl, #1
 800b39e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3a2:	f8cd b000 	str.w	fp, [sp]
 800b3a6:	9306      	str	r3, [sp, #24]
 800b3a8:	42b7      	cmp	r7, r6
 800b3aa:	d340      	bcc.n	800b42e <__gethex+0x21e>
 800b3ac:	9802      	ldr	r0, [sp, #8]
 800b3ae:	9b00      	ldr	r3, [sp, #0]
 800b3b0:	f840 3b04 	str.w	r3, [r0], #4
 800b3b4:	eba0 0009 	sub.w	r0, r0, r9
 800b3b8:	1080      	asrs	r0, r0, #2
 800b3ba:	0146      	lsls	r6, r0, #5
 800b3bc:	6120      	str	r0, [r4, #16]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fb5c 	bl	800ba7c <__hi0bits>
 800b3c4:	1a30      	subs	r0, r6, r0
 800b3c6:	f8d8 6000 	ldr.w	r6, [r8]
 800b3ca:	42b0      	cmp	r0, r6
 800b3cc:	dd63      	ble.n	800b496 <__gethex+0x286>
 800b3ce:	1b87      	subs	r7, r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 ff00 	bl	800c1d8 <__any_on>
 800b3d8:	4682      	mov	sl, r0
 800b3da:	b1a8      	cbz	r0, 800b408 <__gethex+0x1f8>
 800b3dc:	1e7b      	subs	r3, r7, #1
 800b3de:	1159      	asrs	r1, r3, #5
 800b3e0:	f003 021f 	and.w	r2, r3, #31
 800b3e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3e8:	f04f 0a01 	mov.w	sl, #1
 800b3ec:	fa0a f202 	lsl.w	r2, sl, r2
 800b3f0:	420a      	tst	r2, r1
 800b3f2:	d009      	beq.n	800b408 <__gethex+0x1f8>
 800b3f4:	4553      	cmp	r3, sl
 800b3f6:	dd05      	ble.n	800b404 <__gethex+0x1f4>
 800b3f8:	1eb9      	subs	r1, r7, #2
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 feec 	bl	800c1d8 <__any_on>
 800b400:	2800      	cmp	r0, #0
 800b402:	d145      	bne.n	800b490 <__gethex+0x280>
 800b404:	f04f 0a02 	mov.w	sl, #2
 800b408:	4639      	mov	r1, r7
 800b40a:	4620      	mov	r0, r4
 800b40c:	f7ff fe98 	bl	800b140 <rshift>
 800b410:	443d      	add	r5, r7
 800b412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b416:	42ab      	cmp	r3, r5
 800b418:	da4c      	bge.n	800b4b4 <__gethex+0x2a4>
 800b41a:	ee18 0a10 	vmov	r0, s16
 800b41e:	4621      	mov	r1, r4
 800b420:	f000 fa7a 	bl	800b918 <_Bfree>
 800b424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b426:	2300      	movs	r3, #0
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	27a3      	movs	r7, #163	; 0xa3
 800b42c:	e785      	b.n	800b33a <__gethex+0x12a>
 800b42e:	1e73      	subs	r3, r6, #1
 800b430:	9a05      	ldr	r2, [sp, #20]
 800b432:	9303      	str	r3, [sp, #12]
 800b434:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b438:	4293      	cmp	r3, r2
 800b43a:	d019      	beq.n	800b470 <__gethex+0x260>
 800b43c:	f1bb 0f20 	cmp.w	fp, #32
 800b440:	d107      	bne.n	800b452 <__gethex+0x242>
 800b442:	9b02      	ldr	r3, [sp, #8]
 800b444:	9a00      	ldr	r2, [sp, #0]
 800b446:	f843 2b04 	str.w	r2, [r3], #4
 800b44a:	9302      	str	r3, [sp, #8]
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	469b      	mov	fp, r3
 800b452:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b456:	f7ff fec5 	bl	800b1e4 <__hexdig_fun>
 800b45a:	9b00      	ldr	r3, [sp, #0]
 800b45c:	f000 000f 	and.w	r0, r0, #15
 800b460:	fa00 f00b 	lsl.w	r0, r0, fp
 800b464:	4303      	orrs	r3, r0
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	f10b 0b04 	add.w	fp, fp, #4
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	e00d      	b.n	800b48c <__gethex+0x27c>
 800b470:	9b03      	ldr	r3, [sp, #12]
 800b472:	9a06      	ldr	r2, [sp, #24]
 800b474:	4413      	add	r3, r2
 800b476:	42bb      	cmp	r3, r7
 800b478:	d3e0      	bcc.n	800b43c <__gethex+0x22c>
 800b47a:	4618      	mov	r0, r3
 800b47c:	9901      	ldr	r1, [sp, #4]
 800b47e:	9307      	str	r3, [sp, #28]
 800b480:	4652      	mov	r2, sl
 800b482:	f001 f8a5 	bl	800c5d0 <strncmp>
 800b486:	9b07      	ldr	r3, [sp, #28]
 800b488:	2800      	cmp	r0, #0
 800b48a:	d1d7      	bne.n	800b43c <__gethex+0x22c>
 800b48c:	461e      	mov	r6, r3
 800b48e:	e78b      	b.n	800b3a8 <__gethex+0x198>
 800b490:	f04f 0a03 	mov.w	sl, #3
 800b494:	e7b8      	b.n	800b408 <__gethex+0x1f8>
 800b496:	da0a      	bge.n	800b4ae <__gethex+0x29e>
 800b498:	1a37      	subs	r7, r6, r0
 800b49a:	4621      	mov	r1, r4
 800b49c:	ee18 0a10 	vmov	r0, s16
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	f000 fc55 	bl	800bd50 <__lshift>
 800b4a6:	1bed      	subs	r5, r5, r7
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	f100 0914 	add.w	r9, r0, #20
 800b4ae:	f04f 0a00 	mov.w	sl, #0
 800b4b2:	e7ae      	b.n	800b412 <__gethex+0x202>
 800b4b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4b8:	42a8      	cmp	r0, r5
 800b4ba:	dd72      	ble.n	800b5a2 <__gethex+0x392>
 800b4bc:	1b45      	subs	r5, r0, r5
 800b4be:	42ae      	cmp	r6, r5
 800b4c0:	dc36      	bgt.n	800b530 <__gethex+0x320>
 800b4c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d02a      	beq.n	800b520 <__gethex+0x310>
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d02c      	beq.n	800b528 <__gethex+0x318>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d11c      	bne.n	800b50c <__gethex+0x2fc>
 800b4d2:	42ae      	cmp	r6, r5
 800b4d4:	d11a      	bne.n	800b50c <__gethex+0x2fc>
 800b4d6:	2e01      	cmp	r6, #1
 800b4d8:	d112      	bne.n	800b500 <__gethex+0x2f0>
 800b4da:	9a04      	ldr	r2, [sp, #16]
 800b4dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	6123      	str	r3, [r4, #16]
 800b4e6:	f8c9 3000 	str.w	r3, [r9]
 800b4ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4ec:	2762      	movs	r7, #98	; 0x62
 800b4ee:	601c      	str	r4, [r3, #0]
 800b4f0:	e723      	b.n	800b33a <__gethex+0x12a>
 800b4f2:	bf00      	nop
 800b4f4:	0800d1e0 	.word	0x0800d1e0
 800b4f8:	0800d168 	.word	0x0800d168
 800b4fc:	0800d179 	.word	0x0800d179
 800b500:	1e71      	subs	r1, r6, #1
 800b502:	4620      	mov	r0, r4
 800b504:	f000 fe68 	bl	800c1d8 <__any_on>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1e6      	bne.n	800b4da <__gethex+0x2ca>
 800b50c:	ee18 0a10 	vmov	r0, s16
 800b510:	4621      	mov	r1, r4
 800b512:	f000 fa01 	bl	800b918 <_Bfree>
 800b516:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b518:	2300      	movs	r3, #0
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	2750      	movs	r7, #80	; 0x50
 800b51e:	e70c      	b.n	800b33a <__gethex+0x12a>
 800b520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1f2      	bne.n	800b50c <__gethex+0x2fc>
 800b526:	e7d8      	b.n	800b4da <__gethex+0x2ca>
 800b528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1d5      	bne.n	800b4da <__gethex+0x2ca>
 800b52e:	e7ed      	b.n	800b50c <__gethex+0x2fc>
 800b530:	1e6f      	subs	r7, r5, #1
 800b532:	f1ba 0f00 	cmp.w	sl, #0
 800b536:	d131      	bne.n	800b59c <__gethex+0x38c>
 800b538:	b127      	cbz	r7, 800b544 <__gethex+0x334>
 800b53a:	4639      	mov	r1, r7
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fe4b 	bl	800c1d8 <__any_on>
 800b542:	4682      	mov	sl, r0
 800b544:	117b      	asrs	r3, r7, #5
 800b546:	2101      	movs	r1, #1
 800b548:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b54c:	f007 071f 	and.w	r7, r7, #31
 800b550:	fa01 f707 	lsl.w	r7, r1, r7
 800b554:	421f      	tst	r7, r3
 800b556:	4629      	mov	r1, r5
 800b558:	4620      	mov	r0, r4
 800b55a:	bf18      	it	ne
 800b55c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b560:	1b76      	subs	r6, r6, r5
 800b562:	f7ff fded 	bl	800b140 <rshift>
 800b566:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b56a:	2702      	movs	r7, #2
 800b56c:	f1ba 0f00 	cmp.w	sl, #0
 800b570:	d048      	beq.n	800b604 <__gethex+0x3f4>
 800b572:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d015      	beq.n	800b5a6 <__gethex+0x396>
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d017      	beq.n	800b5ae <__gethex+0x39e>
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d109      	bne.n	800b596 <__gethex+0x386>
 800b582:	f01a 0f02 	tst.w	sl, #2
 800b586:	d006      	beq.n	800b596 <__gethex+0x386>
 800b588:	f8d9 0000 	ldr.w	r0, [r9]
 800b58c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b590:	f01a 0f01 	tst.w	sl, #1
 800b594:	d10e      	bne.n	800b5b4 <__gethex+0x3a4>
 800b596:	f047 0710 	orr.w	r7, r7, #16
 800b59a:	e033      	b.n	800b604 <__gethex+0x3f4>
 800b59c:	f04f 0a01 	mov.w	sl, #1
 800b5a0:	e7d0      	b.n	800b544 <__gethex+0x334>
 800b5a2:	2701      	movs	r7, #1
 800b5a4:	e7e2      	b.n	800b56c <__gethex+0x35c>
 800b5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5a8:	f1c3 0301 	rsb	r3, r3, #1
 800b5ac:	9315      	str	r3, [sp, #84]	; 0x54
 800b5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0f0      	beq.n	800b596 <__gethex+0x386>
 800b5b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5b8:	f104 0314 	add.w	r3, r4, #20
 800b5bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5c4:	f04f 0c00 	mov.w	ip, #0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5d2:	d01c      	beq.n	800b60e <__gethex+0x3fe>
 800b5d4:	3201      	adds	r2, #1
 800b5d6:	6002      	str	r2, [r0, #0]
 800b5d8:	2f02      	cmp	r7, #2
 800b5da:	f104 0314 	add.w	r3, r4, #20
 800b5de:	d13f      	bne.n	800b660 <__gethex+0x450>
 800b5e0:	f8d8 2000 	ldr.w	r2, [r8]
 800b5e4:	3a01      	subs	r2, #1
 800b5e6:	42b2      	cmp	r2, r6
 800b5e8:	d10a      	bne.n	800b600 <__gethex+0x3f0>
 800b5ea:	1171      	asrs	r1, r6, #5
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5f2:	f006 061f 	and.w	r6, r6, #31
 800b5f6:	fa02 f606 	lsl.w	r6, r2, r6
 800b5fa:	421e      	tst	r6, r3
 800b5fc:	bf18      	it	ne
 800b5fe:	4617      	movne	r7, r2
 800b600:	f047 0720 	orr.w	r7, r7, #32
 800b604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b606:	601c      	str	r4, [r3, #0]
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	601d      	str	r5, [r3, #0]
 800b60c:	e695      	b.n	800b33a <__gethex+0x12a>
 800b60e:	4299      	cmp	r1, r3
 800b610:	f843 cc04 	str.w	ip, [r3, #-4]
 800b614:	d8d8      	bhi.n	800b5c8 <__gethex+0x3b8>
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	459b      	cmp	fp, r3
 800b61a:	db19      	blt.n	800b650 <__gethex+0x440>
 800b61c:	6861      	ldr	r1, [r4, #4]
 800b61e:	ee18 0a10 	vmov	r0, s16
 800b622:	3101      	adds	r1, #1
 800b624:	f000 f938 	bl	800b898 <_Balloc>
 800b628:	4681      	mov	r9, r0
 800b62a:	b918      	cbnz	r0, 800b634 <__gethex+0x424>
 800b62c:	4b1a      	ldr	r3, [pc, #104]	; (800b698 <__gethex+0x488>)
 800b62e:	4602      	mov	r2, r0
 800b630:	2184      	movs	r1, #132	; 0x84
 800b632:	e6a8      	b.n	800b386 <__gethex+0x176>
 800b634:	6922      	ldr	r2, [r4, #16]
 800b636:	3202      	adds	r2, #2
 800b638:	f104 010c 	add.w	r1, r4, #12
 800b63c:	0092      	lsls	r2, r2, #2
 800b63e:	300c      	adds	r0, #12
 800b640:	f7fc ff67 	bl	8008512 <memcpy>
 800b644:	4621      	mov	r1, r4
 800b646:	ee18 0a10 	vmov	r0, s16
 800b64a:	f000 f965 	bl	800b918 <_Bfree>
 800b64e:	464c      	mov	r4, r9
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b658:	6122      	str	r2, [r4, #16]
 800b65a:	2201      	movs	r2, #1
 800b65c:	615a      	str	r2, [r3, #20]
 800b65e:	e7bb      	b.n	800b5d8 <__gethex+0x3c8>
 800b660:	6922      	ldr	r2, [r4, #16]
 800b662:	455a      	cmp	r2, fp
 800b664:	dd0b      	ble.n	800b67e <__gethex+0x46e>
 800b666:	2101      	movs	r1, #1
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff fd69 	bl	800b140 <rshift>
 800b66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b672:	3501      	adds	r5, #1
 800b674:	42ab      	cmp	r3, r5
 800b676:	f6ff aed0 	blt.w	800b41a <__gethex+0x20a>
 800b67a:	2701      	movs	r7, #1
 800b67c:	e7c0      	b.n	800b600 <__gethex+0x3f0>
 800b67e:	f016 061f 	ands.w	r6, r6, #31
 800b682:	d0fa      	beq.n	800b67a <__gethex+0x46a>
 800b684:	4453      	add	r3, sl
 800b686:	f1c6 0620 	rsb	r6, r6, #32
 800b68a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b68e:	f000 f9f5 	bl	800ba7c <__hi0bits>
 800b692:	42b0      	cmp	r0, r6
 800b694:	dbe7      	blt.n	800b666 <__gethex+0x456>
 800b696:	e7f0      	b.n	800b67a <__gethex+0x46a>
 800b698:	0800d168 	.word	0x0800d168

0800b69c <L_shift>:
 800b69c:	f1c2 0208 	rsb	r2, r2, #8
 800b6a0:	0092      	lsls	r2, r2, #2
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	f1c2 0620 	rsb	r6, r2, #32
 800b6a8:	6843      	ldr	r3, [r0, #4]
 800b6aa:	6804      	ldr	r4, [r0, #0]
 800b6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b6b0:	432c      	orrs	r4, r5
 800b6b2:	40d3      	lsrs	r3, r2
 800b6b4:	6004      	str	r4, [r0, #0]
 800b6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6ba:	4288      	cmp	r0, r1
 800b6bc:	d3f4      	bcc.n	800b6a8 <L_shift+0xc>
 800b6be:	bd70      	pop	{r4, r5, r6, pc}

0800b6c0 <__match>:
 800b6c0:	b530      	push	{r4, r5, lr}
 800b6c2:	6803      	ldr	r3, [r0, #0]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ca:	b914      	cbnz	r4, 800b6d2 <__match+0x12>
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	bd30      	pop	{r4, r5, pc}
 800b6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6da:	2d19      	cmp	r5, #25
 800b6dc:	bf98      	it	ls
 800b6de:	3220      	addls	r2, #32
 800b6e0:	42a2      	cmp	r2, r4
 800b6e2:	d0f0      	beq.n	800b6c6 <__match+0x6>
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e7f3      	b.n	800b6d0 <__match+0x10>

0800b6e8 <__hexnan>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	680b      	ldr	r3, [r1, #0]
 800b6ee:	115e      	asrs	r6, r3, #5
 800b6f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6f4:	f013 031f 	ands.w	r3, r3, #31
 800b6f8:	b087      	sub	sp, #28
 800b6fa:	bf18      	it	ne
 800b6fc:	3604      	addne	r6, #4
 800b6fe:	2500      	movs	r5, #0
 800b700:	1f37      	subs	r7, r6, #4
 800b702:	4690      	mov	r8, r2
 800b704:	6802      	ldr	r2, [r0, #0]
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	4682      	mov	sl, r0
 800b70a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b70e:	46b9      	mov	r9, r7
 800b710:	463c      	mov	r4, r7
 800b712:	9502      	str	r5, [sp, #8]
 800b714:	46ab      	mov	fp, r5
 800b716:	7851      	ldrb	r1, [r2, #1]
 800b718:	1c53      	adds	r3, r2, #1
 800b71a:	9303      	str	r3, [sp, #12]
 800b71c:	b341      	cbz	r1, 800b770 <__hexnan+0x88>
 800b71e:	4608      	mov	r0, r1
 800b720:	9205      	str	r2, [sp, #20]
 800b722:	9104      	str	r1, [sp, #16]
 800b724:	f7ff fd5e 	bl	800b1e4 <__hexdig_fun>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d14f      	bne.n	800b7cc <__hexnan+0xe4>
 800b72c:	9904      	ldr	r1, [sp, #16]
 800b72e:	9a05      	ldr	r2, [sp, #20]
 800b730:	2920      	cmp	r1, #32
 800b732:	d818      	bhi.n	800b766 <__hexnan+0x7e>
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	459b      	cmp	fp, r3
 800b738:	dd13      	ble.n	800b762 <__hexnan+0x7a>
 800b73a:	454c      	cmp	r4, r9
 800b73c:	d206      	bcs.n	800b74c <__hexnan+0x64>
 800b73e:	2d07      	cmp	r5, #7
 800b740:	dc04      	bgt.n	800b74c <__hexnan+0x64>
 800b742:	462a      	mov	r2, r5
 800b744:	4649      	mov	r1, r9
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff ffa8 	bl	800b69c <L_shift>
 800b74c:	4544      	cmp	r4, r8
 800b74e:	d950      	bls.n	800b7f2 <__hexnan+0x10a>
 800b750:	2300      	movs	r3, #0
 800b752:	f1a4 0904 	sub.w	r9, r4, #4
 800b756:	f844 3c04 	str.w	r3, [r4, #-4]
 800b75a:	f8cd b008 	str.w	fp, [sp, #8]
 800b75e:	464c      	mov	r4, r9
 800b760:	461d      	mov	r5, r3
 800b762:	9a03      	ldr	r2, [sp, #12]
 800b764:	e7d7      	b.n	800b716 <__hexnan+0x2e>
 800b766:	2929      	cmp	r1, #41	; 0x29
 800b768:	d156      	bne.n	800b818 <__hexnan+0x130>
 800b76a:	3202      	adds	r2, #2
 800b76c:	f8ca 2000 	str.w	r2, [sl]
 800b770:	f1bb 0f00 	cmp.w	fp, #0
 800b774:	d050      	beq.n	800b818 <__hexnan+0x130>
 800b776:	454c      	cmp	r4, r9
 800b778:	d206      	bcs.n	800b788 <__hexnan+0xa0>
 800b77a:	2d07      	cmp	r5, #7
 800b77c:	dc04      	bgt.n	800b788 <__hexnan+0xa0>
 800b77e:	462a      	mov	r2, r5
 800b780:	4649      	mov	r1, r9
 800b782:	4620      	mov	r0, r4
 800b784:	f7ff ff8a 	bl	800b69c <L_shift>
 800b788:	4544      	cmp	r4, r8
 800b78a:	d934      	bls.n	800b7f6 <__hexnan+0x10e>
 800b78c:	f1a8 0204 	sub.w	r2, r8, #4
 800b790:	4623      	mov	r3, r4
 800b792:	f853 1b04 	ldr.w	r1, [r3], #4
 800b796:	f842 1f04 	str.w	r1, [r2, #4]!
 800b79a:	429f      	cmp	r7, r3
 800b79c:	d2f9      	bcs.n	800b792 <__hexnan+0xaa>
 800b79e:	1b3b      	subs	r3, r7, r4
 800b7a0:	f023 0303 	bic.w	r3, r3, #3
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	3401      	adds	r4, #1
 800b7a8:	3e03      	subs	r6, #3
 800b7aa:	42b4      	cmp	r4, r6
 800b7ac:	bf88      	it	hi
 800b7ae:	2304      	movhi	r3, #4
 800b7b0:	4443      	add	r3, r8
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f843 2b04 	str.w	r2, [r3], #4
 800b7b8:	429f      	cmp	r7, r3
 800b7ba:	d2fb      	bcs.n	800b7b4 <__hexnan+0xcc>
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	b91b      	cbnz	r3, 800b7c8 <__hexnan+0xe0>
 800b7c0:	4547      	cmp	r7, r8
 800b7c2:	d127      	bne.n	800b814 <__hexnan+0x12c>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	2005      	movs	r0, #5
 800b7ca:	e026      	b.n	800b81a <__hexnan+0x132>
 800b7cc:	3501      	adds	r5, #1
 800b7ce:	2d08      	cmp	r5, #8
 800b7d0:	f10b 0b01 	add.w	fp, fp, #1
 800b7d4:	dd06      	ble.n	800b7e4 <__hexnan+0xfc>
 800b7d6:	4544      	cmp	r4, r8
 800b7d8:	d9c3      	bls.n	800b762 <__hexnan+0x7a>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7e0:	2501      	movs	r5, #1
 800b7e2:	3c04      	subs	r4, #4
 800b7e4:	6822      	ldr	r2, [r4, #0]
 800b7e6:	f000 000f 	and.w	r0, r0, #15
 800b7ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7ee:	6022      	str	r2, [r4, #0]
 800b7f0:	e7b7      	b.n	800b762 <__hexnan+0x7a>
 800b7f2:	2508      	movs	r5, #8
 800b7f4:	e7b5      	b.n	800b762 <__hexnan+0x7a>
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d0df      	beq.n	800b7bc <__hexnan+0xd4>
 800b7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b800:	f1c3 0320 	rsb	r3, r3, #32
 800b804:	fa22 f303 	lsr.w	r3, r2, r3
 800b808:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b80c:	401a      	ands	r2, r3
 800b80e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b812:	e7d3      	b.n	800b7bc <__hexnan+0xd4>
 800b814:	3f04      	subs	r7, #4
 800b816:	e7d1      	b.n	800b7bc <__hexnan+0xd4>
 800b818:	2004      	movs	r0, #4
 800b81a:	b007      	add	sp, #28
 800b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b820 <_localeconv_r>:
 800b820:	4800      	ldr	r0, [pc, #0]	; (800b824 <_localeconv_r+0x4>)
 800b822:	4770      	bx	lr
 800b824:	20000168 	.word	0x20000168

0800b828 <_lseek_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d07      	ldr	r5, [pc, #28]	; (800b848 <_lseek_r+0x20>)
 800b82c:	4604      	mov	r4, r0
 800b82e:	4608      	mov	r0, r1
 800b830:	4611      	mov	r1, r2
 800b832:	2200      	movs	r2, #0
 800b834:	602a      	str	r2, [r5, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	f7f6 f996 	bl	8001b68 <_lseek>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d102      	bne.n	800b846 <_lseek_r+0x1e>
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	b103      	cbz	r3, 800b846 <_lseek_r+0x1e>
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	20002eb8 	.word	0x20002eb8

0800b84c <malloc>:
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <malloc+0xc>)
 800b84e:	4601      	mov	r1, r0
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	f7fc be95 	b.w	8008580 <_malloc_r>
 800b856:	bf00      	nop
 800b858:	20000010 	.word	0x20000010

0800b85c <__ascii_mbtowc>:
 800b85c:	b082      	sub	sp, #8
 800b85e:	b901      	cbnz	r1, 800b862 <__ascii_mbtowc+0x6>
 800b860:	a901      	add	r1, sp, #4
 800b862:	b142      	cbz	r2, 800b876 <__ascii_mbtowc+0x1a>
 800b864:	b14b      	cbz	r3, 800b87a <__ascii_mbtowc+0x1e>
 800b866:	7813      	ldrb	r3, [r2, #0]
 800b868:	600b      	str	r3, [r1, #0]
 800b86a:	7812      	ldrb	r2, [r2, #0]
 800b86c:	1e10      	subs	r0, r2, #0
 800b86e:	bf18      	it	ne
 800b870:	2001      	movne	r0, #1
 800b872:	b002      	add	sp, #8
 800b874:	4770      	bx	lr
 800b876:	4610      	mov	r0, r2
 800b878:	e7fb      	b.n	800b872 <__ascii_mbtowc+0x16>
 800b87a:	f06f 0001 	mvn.w	r0, #1
 800b87e:	e7f8      	b.n	800b872 <__ascii_mbtowc+0x16>

0800b880 <__malloc_lock>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__malloc_lock+0x8>)
 800b882:	f7fc be44 	b.w	800850e <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	20002eac 	.word	0x20002eac

0800b88c <__malloc_unlock>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__malloc_unlock+0x8>)
 800b88e:	f7fc be3f 	b.w	8008510 <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	20002eac 	.word	0x20002eac

0800b898 <_Balloc>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b89c:	4604      	mov	r4, r0
 800b89e:	460d      	mov	r5, r1
 800b8a0:	b976      	cbnz	r6, 800b8c0 <_Balloc+0x28>
 800b8a2:	2010      	movs	r0, #16
 800b8a4:	f7ff ffd2 	bl	800b84c <malloc>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	6260      	str	r0, [r4, #36]	; 0x24
 800b8ac:	b920      	cbnz	r0, 800b8b8 <_Balloc+0x20>
 800b8ae:	4b18      	ldr	r3, [pc, #96]	; (800b910 <_Balloc+0x78>)
 800b8b0:	4818      	ldr	r0, [pc, #96]	; (800b914 <_Balloc+0x7c>)
 800b8b2:	2166      	movs	r1, #102	; 0x66
 800b8b4:	f000 feae 	bl	800c614 <__assert_func>
 800b8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8bc:	6006      	str	r6, [r0, #0]
 800b8be:	60c6      	str	r6, [r0, #12]
 800b8c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8c2:	68f3      	ldr	r3, [r6, #12]
 800b8c4:	b183      	cbz	r3, 800b8e8 <_Balloc+0x50>
 800b8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ce:	b9b8      	cbnz	r0, 800b900 <_Balloc+0x68>
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8d6:	1d72      	adds	r2, r6, #5
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 fc9d 	bl	800c21a <_calloc_r>
 800b8e0:	b160      	cbz	r0, 800b8fc <_Balloc+0x64>
 800b8e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8e6:	e00e      	b.n	800b906 <_Balloc+0x6e>
 800b8e8:	2221      	movs	r2, #33	; 0x21
 800b8ea:	2104      	movs	r1, #4
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fc94 	bl	800c21a <_calloc_r>
 800b8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f4:	60f0      	str	r0, [r6, #12]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e4      	bne.n	800b8c6 <_Balloc+0x2e>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	6802      	ldr	r2, [r0, #0]
 800b902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b906:	2300      	movs	r3, #0
 800b908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b90c:	e7f7      	b.n	800b8fe <_Balloc+0x66>
 800b90e:	bf00      	nop
 800b910:	0800d0f6 	.word	0x0800d0f6
 800b914:	0800d1f4 	.word	0x0800d1f4

0800b918 <_Bfree>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b91c:	4605      	mov	r5, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	b976      	cbnz	r6, 800b940 <_Bfree+0x28>
 800b922:	2010      	movs	r0, #16
 800b924:	f7ff ff92 	bl	800b84c <malloc>
 800b928:	4602      	mov	r2, r0
 800b92a:	6268      	str	r0, [r5, #36]	; 0x24
 800b92c:	b920      	cbnz	r0, 800b938 <_Bfree+0x20>
 800b92e:	4b09      	ldr	r3, [pc, #36]	; (800b954 <_Bfree+0x3c>)
 800b930:	4809      	ldr	r0, [pc, #36]	; (800b958 <_Bfree+0x40>)
 800b932:	218a      	movs	r1, #138	; 0x8a
 800b934:	f000 fe6e 	bl	800c614 <__assert_func>
 800b938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b93c:	6006      	str	r6, [r0, #0]
 800b93e:	60c6      	str	r6, [r0, #12]
 800b940:	b13c      	cbz	r4, 800b952 <_Bfree+0x3a>
 800b942:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b944:	6862      	ldr	r2, [r4, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b94c:	6021      	str	r1, [r4, #0]
 800b94e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b952:	bd70      	pop	{r4, r5, r6, pc}
 800b954:	0800d0f6 	.word	0x0800d0f6
 800b958:	0800d1f4 	.word	0x0800d1f4

0800b95c <__multadd>:
 800b95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	690d      	ldr	r5, [r1, #16]
 800b962:	4607      	mov	r7, r0
 800b964:	460c      	mov	r4, r1
 800b966:	461e      	mov	r6, r3
 800b968:	f101 0c14 	add.w	ip, r1, #20
 800b96c:	2000      	movs	r0, #0
 800b96e:	f8dc 3000 	ldr.w	r3, [ip]
 800b972:	b299      	uxth	r1, r3
 800b974:	fb02 6101 	mla	r1, r2, r1, r6
 800b978:	0c1e      	lsrs	r6, r3, #16
 800b97a:	0c0b      	lsrs	r3, r1, #16
 800b97c:	fb02 3306 	mla	r3, r2, r6, r3
 800b980:	b289      	uxth	r1, r1
 800b982:	3001      	adds	r0, #1
 800b984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b988:	4285      	cmp	r5, r0
 800b98a:	f84c 1b04 	str.w	r1, [ip], #4
 800b98e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b992:	dcec      	bgt.n	800b96e <__multadd+0x12>
 800b994:	b30e      	cbz	r6, 800b9da <__multadd+0x7e>
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	42ab      	cmp	r3, r5
 800b99a:	dc19      	bgt.n	800b9d0 <__multadd+0x74>
 800b99c:	6861      	ldr	r1, [r4, #4]
 800b99e:	4638      	mov	r0, r7
 800b9a0:	3101      	adds	r1, #1
 800b9a2:	f7ff ff79 	bl	800b898 <_Balloc>
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	b928      	cbnz	r0, 800b9b6 <__multadd+0x5a>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <__multadd+0x84>)
 800b9ae:	480d      	ldr	r0, [pc, #52]	; (800b9e4 <__multadd+0x88>)
 800b9b0:	21b5      	movs	r1, #181	; 0xb5
 800b9b2:	f000 fe2f 	bl	800c614 <__assert_func>
 800b9b6:	6922      	ldr	r2, [r4, #16]
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	f104 010c 	add.w	r1, r4, #12
 800b9be:	0092      	lsls	r2, r2, #2
 800b9c0:	300c      	adds	r0, #12
 800b9c2:	f7fc fda6 	bl	8008512 <memcpy>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff ffa5 	bl	800b918 <_Bfree>
 800b9ce:	4644      	mov	r4, r8
 800b9d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	615e      	str	r6, [r3, #20]
 800b9d8:	6125      	str	r5, [r4, #16]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	0800d168 	.word	0x0800d168
 800b9e4:	0800d1f4 	.word	0x0800d1f4

0800b9e8 <__s2b>:
 800b9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	4615      	mov	r5, r2
 800b9f0:	461f      	mov	r7, r3
 800b9f2:	2209      	movs	r2, #9
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	2201      	movs	r2, #1
 800ba00:	429a      	cmp	r2, r3
 800ba02:	db09      	blt.n	800ba18 <__s2b+0x30>
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff ff47 	bl	800b898 <_Balloc>
 800ba0a:	b940      	cbnz	r0, 800ba1e <__s2b+0x36>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	4b19      	ldr	r3, [pc, #100]	; (800ba74 <__s2b+0x8c>)
 800ba10:	4819      	ldr	r0, [pc, #100]	; (800ba78 <__s2b+0x90>)
 800ba12:	21ce      	movs	r1, #206	; 0xce
 800ba14:	f000 fdfe 	bl	800c614 <__assert_func>
 800ba18:	0052      	lsls	r2, r2, #1
 800ba1a:	3101      	adds	r1, #1
 800ba1c:	e7f0      	b.n	800ba00 <__s2b+0x18>
 800ba1e:	9b08      	ldr	r3, [sp, #32]
 800ba20:	6143      	str	r3, [r0, #20]
 800ba22:	2d09      	cmp	r5, #9
 800ba24:	f04f 0301 	mov.w	r3, #1
 800ba28:	6103      	str	r3, [r0, #16]
 800ba2a:	dd16      	ble.n	800ba5a <__s2b+0x72>
 800ba2c:	f104 0909 	add.w	r9, r4, #9
 800ba30:	46c8      	mov	r8, r9
 800ba32:	442c      	add	r4, r5
 800ba34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba38:	4601      	mov	r1, r0
 800ba3a:	3b30      	subs	r3, #48	; 0x30
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7ff ff8c 	bl	800b95c <__multadd>
 800ba44:	45a0      	cmp	r8, r4
 800ba46:	d1f5      	bne.n	800ba34 <__s2b+0x4c>
 800ba48:	f1a5 0408 	sub.w	r4, r5, #8
 800ba4c:	444c      	add	r4, r9
 800ba4e:	1b2d      	subs	r5, r5, r4
 800ba50:	1963      	adds	r3, r4, r5
 800ba52:	42bb      	cmp	r3, r7
 800ba54:	db04      	blt.n	800ba60 <__s2b+0x78>
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	340a      	adds	r4, #10
 800ba5c:	2509      	movs	r5, #9
 800ba5e:	e7f6      	b.n	800ba4e <__s2b+0x66>
 800ba60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba64:	4601      	mov	r1, r0
 800ba66:	3b30      	subs	r3, #48	; 0x30
 800ba68:	220a      	movs	r2, #10
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ff76 	bl	800b95c <__multadd>
 800ba70:	e7ee      	b.n	800ba50 <__s2b+0x68>
 800ba72:	bf00      	nop
 800ba74:	0800d168 	.word	0x0800d168
 800ba78:	0800d1f4 	.word	0x0800d1f4

0800ba7c <__hi0bits>:
 800ba7c:	0c03      	lsrs	r3, r0, #16
 800ba7e:	041b      	lsls	r3, r3, #16
 800ba80:	b9d3      	cbnz	r3, 800bab8 <__hi0bits+0x3c>
 800ba82:	0400      	lsls	r0, r0, #16
 800ba84:	2310      	movs	r3, #16
 800ba86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba8a:	bf04      	itt	eq
 800ba8c:	0200      	lsleq	r0, r0, #8
 800ba8e:	3308      	addeq	r3, #8
 800ba90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba94:	bf04      	itt	eq
 800ba96:	0100      	lsleq	r0, r0, #4
 800ba98:	3304      	addeq	r3, #4
 800ba9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba9e:	bf04      	itt	eq
 800baa0:	0080      	lsleq	r0, r0, #2
 800baa2:	3302      	addeq	r3, #2
 800baa4:	2800      	cmp	r0, #0
 800baa6:	db05      	blt.n	800bab4 <__hi0bits+0x38>
 800baa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800baac:	f103 0301 	add.w	r3, r3, #1
 800bab0:	bf08      	it	eq
 800bab2:	2320      	moveq	r3, #32
 800bab4:	4618      	mov	r0, r3
 800bab6:	4770      	bx	lr
 800bab8:	2300      	movs	r3, #0
 800baba:	e7e4      	b.n	800ba86 <__hi0bits+0xa>

0800babc <__lo0bits>:
 800babc:	6803      	ldr	r3, [r0, #0]
 800babe:	f013 0207 	ands.w	r2, r3, #7
 800bac2:	4601      	mov	r1, r0
 800bac4:	d00b      	beq.n	800bade <__lo0bits+0x22>
 800bac6:	07da      	lsls	r2, r3, #31
 800bac8:	d423      	bmi.n	800bb12 <__lo0bits+0x56>
 800baca:	0798      	lsls	r0, r3, #30
 800bacc:	bf49      	itett	mi
 800bace:	085b      	lsrmi	r3, r3, #1
 800bad0:	089b      	lsrpl	r3, r3, #2
 800bad2:	2001      	movmi	r0, #1
 800bad4:	600b      	strmi	r3, [r1, #0]
 800bad6:	bf5c      	itt	pl
 800bad8:	600b      	strpl	r3, [r1, #0]
 800bada:	2002      	movpl	r0, #2
 800badc:	4770      	bx	lr
 800bade:	b298      	uxth	r0, r3
 800bae0:	b9a8      	cbnz	r0, 800bb0e <__lo0bits+0x52>
 800bae2:	0c1b      	lsrs	r3, r3, #16
 800bae4:	2010      	movs	r0, #16
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	b90a      	cbnz	r2, 800baee <__lo0bits+0x32>
 800baea:	3008      	adds	r0, #8
 800baec:	0a1b      	lsrs	r3, r3, #8
 800baee:	071a      	lsls	r2, r3, #28
 800baf0:	bf04      	itt	eq
 800baf2:	091b      	lsreq	r3, r3, #4
 800baf4:	3004      	addeq	r0, #4
 800baf6:	079a      	lsls	r2, r3, #30
 800baf8:	bf04      	itt	eq
 800bafa:	089b      	lsreq	r3, r3, #2
 800bafc:	3002      	addeq	r0, #2
 800bafe:	07da      	lsls	r2, r3, #31
 800bb00:	d403      	bmi.n	800bb0a <__lo0bits+0x4e>
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	f100 0001 	add.w	r0, r0, #1
 800bb08:	d005      	beq.n	800bb16 <__lo0bits+0x5a>
 800bb0a:	600b      	str	r3, [r1, #0]
 800bb0c:	4770      	bx	lr
 800bb0e:	4610      	mov	r0, r2
 800bb10:	e7e9      	b.n	800bae6 <__lo0bits+0x2a>
 800bb12:	2000      	movs	r0, #0
 800bb14:	4770      	bx	lr
 800bb16:	2020      	movs	r0, #32
 800bb18:	4770      	bx	lr
	...

0800bb1c <__i2b>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	460c      	mov	r4, r1
 800bb20:	2101      	movs	r1, #1
 800bb22:	f7ff feb9 	bl	800b898 <_Balloc>
 800bb26:	4602      	mov	r2, r0
 800bb28:	b928      	cbnz	r0, 800bb36 <__i2b+0x1a>
 800bb2a:	4b05      	ldr	r3, [pc, #20]	; (800bb40 <__i2b+0x24>)
 800bb2c:	4805      	ldr	r0, [pc, #20]	; (800bb44 <__i2b+0x28>)
 800bb2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb32:	f000 fd6f 	bl	800c614 <__assert_func>
 800bb36:	2301      	movs	r3, #1
 800bb38:	6144      	str	r4, [r0, #20]
 800bb3a:	6103      	str	r3, [r0, #16]
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	bf00      	nop
 800bb40:	0800d168 	.word	0x0800d168
 800bb44:	0800d1f4 	.word	0x0800d1f4

0800bb48 <__multiply>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	4691      	mov	r9, r2
 800bb4e:	690a      	ldr	r2, [r1, #16]
 800bb50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	bfb8      	it	lt
 800bb58:	460b      	movlt	r3, r1
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	bfbc      	itt	lt
 800bb5e:	464c      	movlt	r4, r9
 800bb60:	4699      	movlt	r9, r3
 800bb62:	6927      	ldr	r7, [r4, #16]
 800bb64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	6861      	ldr	r1, [r4, #4]
 800bb6c:	eb07 060a 	add.w	r6, r7, sl
 800bb70:	42b3      	cmp	r3, r6
 800bb72:	b085      	sub	sp, #20
 800bb74:	bfb8      	it	lt
 800bb76:	3101      	addlt	r1, #1
 800bb78:	f7ff fe8e 	bl	800b898 <_Balloc>
 800bb7c:	b930      	cbnz	r0, 800bb8c <__multiply+0x44>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	4b44      	ldr	r3, [pc, #272]	; (800bc94 <__multiply+0x14c>)
 800bb82:	4845      	ldr	r0, [pc, #276]	; (800bc98 <__multiply+0x150>)
 800bb84:	f240 115d 	movw	r1, #349	; 0x15d
 800bb88:	f000 fd44 	bl	800c614 <__assert_func>
 800bb8c:	f100 0514 	add.w	r5, r0, #20
 800bb90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb94:	462b      	mov	r3, r5
 800bb96:	2200      	movs	r2, #0
 800bb98:	4543      	cmp	r3, r8
 800bb9a:	d321      	bcc.n	800bbe0 <__multiply+0x98>
 800bb9c:	f104 0314 	add.w	r3, r4, #20
 800bba0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bba4:	f109 0314 	add.w	r3, r9, #20
 800bba8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbac:	9202      	str	r2, [sp, #8]
 800bbae:	1b3a      	subs	r2, r7, r4
 800bbb0:	3a15      	subs	r2, #21
 800bbb2:	f022 0203 	bic.w	r2, r2, #3
 800bbb6:	3204      	adds	r2, #4
 800bbb8:	f104 0115 	add.w	r1, r4, #21
 800bbbc:	428f      	cmp	r7, r1
 800bbbe:	bf38      	it	cc
 800bbc0:	2204      	movcc	r2, #4
 800bbc2:	9201      	str	r2, [sp, #4]
 800bbc4:	9a02      	ldr	r2, [sp, #8]
 800bbc6:	9303      	str	r3, [sp, #12]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d80c      	bhi.n	800bbe6 <__multiply+0x9e>
 800bbcc:	2e00      	cmp	r6, #0
 800bbce:	dd03      	ble.n	800bbd8 <__multiply+0x90>
 800bbd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d05a      	beq.n	800bc8e <__multiply+0x146>
 800bbd8:	6106      	str	r6, [r0, #16]
 800bbda:	b005      	add	sp, #20
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe0:	f843 2b04 	str.w	r2, [r3], #4
 800bbe4:	e7d8      	b.n	800bb98 <__multiply+0x50>
 800bbe6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbea:	f1ba 0f00 	cmp.w	sl, #0
 800bbee:	d024      	beq.n	800bc3a <__multiply+0xf2>
 800bbf0:	f104 0e14 	add.w	lr, r4, #20
 800bbf4:	46a9      	mov	r9, r5
 800bbf6:	f04f 0c00 	mov.w	ip, #0
 800bbfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbfe:	f8d9 1000 	ldr.w	r1, [r9]
 800bc02:	fa1f fb82 	uxth.w	fp, r2
 800bc06:	b289      	uxth	r1, r1
 800bc08:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc10:	f8d9 2000 	ldr.w	r2, [r9]
 800bc14:	4461      	add	r1, ip
 800bc16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc22:	b289      	uxth	r1, r1
 800bc24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc28:	4577      	cmp	r7, lr
 800bc2a:	f849 1b04 	str.w	r1, [r9], #4
 800bc2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc32:	d8e2      	bhi.n	800bbfa <__multiply+0xb2>
 800bc34:	9a01      	ldr	r2, [sp, #4]
 800bc36:	f845 c002 	str.w	ip, [r5, r2]
 800bc3a:	9a03      	ldr	r2, [sp, #12]
 800bc3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc40:	3304      	adds	r3, #4
 800bc42:	f1b9 0f00 	cmp.w	r9, #0
 800bc46:	d020      	beq.n	800bc8a <__multiply+0x142>
 800bc48:	6829      	ldr	r1, [r5, #0]
 800bc4a:	f104 0c14 	add.w	ip, r4, #20
 800bc4e:	46ae      	mov	lr, r5
 800bc50:	f04f 0a00 	mov.w	sl, #0
 800bc54:	f8bc b000 	ldrh.w	fp, [ip]
 800bc58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc5c:	fb09 220b 	mla	r2, r9, fp, r2
 800bc60:	4492      	add	sl, r2
 800bc62:	b289      	uxth	r1, r1
 800bc64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bc68:	f84e 1b04 	str.w	r1, [lr], #4
 800bc6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc70:	f8be 1000 	ldrh.w	r1, [lr]
 800bc74:	0c12      	lsrs	r2, r2, #16
 800bc76:	fb09 1102 	mla	r1, r9, r2, r1
 800bc7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bc7e:	4567      	cmp	r7, ip
 800bc80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc84:	d8e6      	bhi.n	800bc54 <__multiply+0x10c>
 800bc86:	9a01      	ldr	r2, [sp, #4]
 800bc88:	50a9      	str	r1, [r5, r2]
 800bc8a:	3504      	adds	r5, #4
 800bc8c:	e79a      	b.n	800bbc4 <__multiply+0x7c>
 800bc8e:	3e01      	subs	r6, #1
 800bc90:	e79c      	b.n	800bbcc <__multiply+0x84>
 800bc92:	bf00      	nop
 800bc94:	0800d168 	.word	0x0800d168
 800bc98:	0800d1f4 	.word	0x0800d1f4

0800bc9c <__pow5mult>:
 800bc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca0:	4615      	mov	r5, r2
 800bca2:	f012 0203 	ands.w	r2, r2, #3
 800bca6:	4606      	mov	r6, r0
 800bca8:	460f      	mov	r7, r1
 800bcaa:	d007      	beq.n	800bcbc <__pow5mult+0x20>
 800bcac:	4c25      	ldr	r4, [pc, #148]	; (800bd44 <__pow5mult+0xa8>)
 800bcae:	3a01      	subs	r2, #1
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcb6:	f7ff fe51 	bl	800b95c <__multadd>
 800bcba:	4607      	mov	r7, r0
 800bcbc:	10ad      	asrs	r5, r5, #2
 800bcbe:	d03d      	beq.n	800bd3c <__pow5mult+0xa0>
 800bcc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcc2:	b97c      	cbnz	r4, 800bce4 <__pow5mult+0x48>
 800bcc4:	2010      	movs	r0, #16
 800bcc6:	f7ff fdc1 	bl	800b84c <malloc>
 800bcca:	4602      	mov	r2, r0
 800bccc:	6270      	str	r0, [r6, #36]	; 0x24
 800bcce:	b928      	cbnz	r0, 800bcdc <__pow5mult+0x40>
 800bcd0:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <__pow5mult+0xac>)
 800bcd2:	481e      	ldr	r0, [pc, #120]	; (800bd4c <__pow5mult+0xb0>)
 800bcd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcd8:	f000 fc9c 	bl	800c614 <__assert_func>
 800bcdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bce0:	6004      	str	r4, [r0, #0]
 800bce2:	60c4      	str	r4, [r0, #12]
 800bce4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcec:	b94c      	cbnz	r4, 800bd02 <__pow5mult+0x66>
 800bcee:	f240 2171 	movw	r1, #625	; 0x271
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f7ff ff12 	bl	800bb1c <__i2b>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcfe:	4604      	mov	r4, r0
 800bd00:	6003      	str	r3, [r0, #0]
 800bd02:	f04f 0900 	mov.w	r9, #0
 800bd06:	07eb      	lsls	r3, r5, #31
 800bd08:	d50a      	bpl.n	800bd20 <__pow5mult+0x84>
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f7ff ff1a 	bl	800bb48 <__multiply>
 800bd14:	4639      	mov	r1, r7
 800bd16:	4680      	mov	r8, r0
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f7ff fdfd 	bl	800b918 <_Bfree>
 800bd1e:	4647      	mov	r7, r8
 800bd20:	106d      	asrs	r5, r5, #1
 800bd22:	d00b      	beq.n	800bd3c <__pow5mult+0xa0>
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	b938      	cbnz	r0, 800bd38 <__pow5mult+0x9c>
 800bd28:	4622      	mov	r2, r4
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff ff0b 	bl	800bb48 <__multiply>
 800bd32:	6020      	str	r0, [r4, #0]
 800bd34:	f8c0 9000 	str.w	r9, [r0]
 800bd38:	4604      	mov	r4, r0
 800bd3a:	e7e4      	b.n	800bd06 <__pow5mult+0x6a>
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd42:	bf00      	nop
 800bd44:	0800d340 	.word	0x0800d340
 800bd48:	0800d0f6 	.word	0x0800d0f6
 800bd4c:	0800d1f4 	.word	0x0800d1f4

0800bd50 <__lshift>:
 800bd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd54:	460c      	mov	r4, r1
 800bd56:	6849      	ldr	r1, [r1, #4]
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd5e:	68a3      	ldr	r3, [r4, #8]
 800bd60:	4607      	mov	r7, r0
 800bd62:	4691      	mov	r9, r2
 800bd64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd68:	f108 0601 	add.w	r6, r8, #1
 800bd6c:	42b3      	cmp	r3, r6
 800bd6e:	db0b      	blt.n	800bd88 <__lshift+0x38>
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7ff fd91 	bl	800b898 <_Balloc>
 800bd76:	4605      	mov	r5, r0
 800bd78:	b948      	cbnz	r0, 800bd8e <__lshift+0x3e>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	4b2a      	ldr	r3, [pc, #168]	; (800be28 <__lshift+0xd8>)
 800bd7e:	482b      	ldr	r0, [pc, #172]	; (800be2c <__lshift+0xdc>)
 800bd80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd84:	f000 fc46 	bl	800c614 <__assert_func>
 800bd88:	3101      	adds	r1, #1
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	e7ee      	b.n	800bd6c <__lshift+0x1c>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f100 0114 	add.w	r1, r0, #20
 800bd94:	f100 0210 	add.w	r2, r0, #16
 800bd98:	4618      	mov	r0, r3
 800bd9a:	4553      	cmp	r3, sl
 800bd9c:	db37      	blt.n	800be0e <__lshift+0xbe>
 800bd9e:	6920      	ldr	r0, [r4, #16]
 800bda0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bda4:	f104 0314 	add.w	r3, r4, #20
 800bda8:	f019 091f 	ands.w	r9, r9, #31
 800bdac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bdb4:	d02f      	beq.n	800be16 <__lshift+0xc6>
 800bdb6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdba:	468a      	mov	sl, r1
 800bdbc:	f04f 0c00 	mov.w	ip, #0
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	fa02 f209 	lsl.w	r2, r2, r9
 800bdc6:	ea42 020c 	orr.w	r2, r2, ip
 800bdca:	f84a 2b04 	str.w	r2, [sl], #4
 800bdce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdd2:	4298      	cmp	r0, r3
 800bdd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bdd8:	d8f2      	bhi.n	800bdc0 <__lshift+0x70>
 800bdda:	1b03      	subs	r3, r0, r4
 800bddc:	3b15      	subs	r3, #21
 800bdde:	f023 0303 	bic.w	r3, r3, #3
 800bde2:	3304      	adds	r3, #4
 800bde4:	f104 0215 	add.w	r2, r4, #21
 800bde8:	4290      	cmp	r0, r2
 800bdea:	bf38      	it	cc
 800bdec:	2304      	movcc	r3, #4
 800bdee:	f841 c003 	str.w	ip, [r1, r3]
 800bdf2:	f1bc 0f00 	cmp.w	ip, #0
 800bdf6:	d001      	beq.n	800bdfc <__lshift+0xac>
 800bdf8:	f108 0602 	add.w	r6, r8, #2
 800bdfc:	3e01      	subs	r6, #1
 800bdfe:	4638      	mov	r0, r7
 800be00:	612e      	str	r6, [r5, #16]
 800be02:	4621      	mov	r1, r4
 800be04:	f7ff fd88 	bl	800b918 <_Bfree>
 800be08:	4628      	mov	r0, r5
 800be0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be12:	3301      	adds	r3, #1
 800be14:	e7c1      	b.n	800bd9a <__lshift+0x4a>
 800be16:	3904      	subs	r1, #4
 800be18:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be20:	4298      	cmp	r0, r3
 800be22:	d8f9      	bhi.n	800be18 <__lshift+0xc8>
 800be24:	e7ea      	b.n	800bdfc <__lshift+0xac>
 800be26:	bf00      	nop
 800be28:	0800d168 	.word	0x0800d168
 800be2c:	0800d1f4 	.word	0x0800d1f4

0800be30 <__mcmp>:
 800be30:	b530      	push	{r4, r5, lr}
 800be32:	6902      	ldr	r2, [r0, #16]
 800be34:	690c      	ldr	r4, [r1, #16]
 800be36:	1b12      	subs	r2, r2, r4
 800be38:	d10e      	bne.n	800be58 <__mcmp+0x28>
 800be3a:	f100 0314 	add.w	r3, r0, #20
 800be3e:	3114      	adds	r1, #20
 800be40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be50:	42a5      	cmp	r5, r4
 800be52:	d003      	beq.n	800be5c <__mcmp+0x2c>
 800be54:	d305      	bcc.n	800be62 <__mcmp+0x32>
 800be56:	2201      	movs	r2, #1
 800be58:	4610      	mov	r0, r2
 800be5a:	bd30      	pop	{r4, r5, pc}
 800be5c:	4283      	cmp	r3, r0
 800be5e:	d3f3      	bcc.n	800be48 <__mcmp+0x18>
 800be60:	e7fa      	b.n	800be58 <__mcmp+0x28>
 800be62:	f04f 32ff 	mov.w	r2, #4294967295
 800be66:	e7f7      	b.n	800be58 <__mcmp+0x28>

0800be68 <__mdiff>:
 800be68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	460c      	mov	r4, r1
 800be6e:	4606      	mov	r6, r0
 800be70:	4611      	mov	r1, r2
 800be72:	4620      	mov	r0, r4
 800be74:	4690      	mov	r8, r2
 800be76:	f7ff ffdb 	bl	800be30 <__mcmp>
 800be7a:	1e05      	subs	r5, r0, #0
 800be7c:	d110      	bne.n	800bea0 <__mdiff+0x38>
 800be7e:	4629      	mov	r1, r5
 800be80:	4630      	mov	r0, r6
 800be82:	f7ff fd09 	bl	800b898 <_Balloc>
 800be86:	b930      	cbnz	r0, 800be96 <__mdiff+0x2e>
 800be88:	4b3a      	ldr	r3, [pc, #232]	; (800bf74 <__mdiff+0x10c>)
 800be8a:	4602      	mov	r2, r0
 800be8c:	f240 2132 	movw	r1, #562	; 0x232
 800be90:	4839      	ldr	r0, [pc, #228]	; (800bf78 <__mdiff+0x110>)
 800be92:	f000 fbbf 	bl	800c614 <__assert_func>
 800be96:	2301      	movs	r3, #1
 800be98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea0:	bfa4      	itt	ge
 800bea2:	4643      	movge	r3, r8
 800bea4:	46a0      	movge	r8, r4
 800bea6:	4630      	mov	r0, r6
 800bea8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800beac:	bfa6      	itte	ge
 800beae:	461c      	movge	r4, r3
 800beb0:	2500      	movge	r5, #0
 800beb2:	2501      	movlt	r5, #1
 800beb4:	f7ff fcf0 	bl	800b898 <_Balloc>
 800beb8:	b920      	cbnz	r0, 800bec4 <__mdiff+0x5c>
 800beba:	4b2e      	ldr	r3, [pc, #184]	; (800bf74 <__mdiff+0x10c>)
 800bebc:	4602      	mov	r2, r0
 800bebe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bec2:	e7e5      	b.n	800be90 <__mdiff+0x28>
 800bec4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bec8:	6926      	ldr	r6, [r4, #16]
 800beca:	60c5      	str	r5, [r0, #12]
 800becc:	f104 0914 	add.w	r9, r4, #20
 800bed0:	f108 0514 	add.w	r5, r8, #20
 800bed4:	f100 0e14 	add.w	lr, r0, #20
 800bed8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bedc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bee0:	f108 0210 	add.w	r2, r8, #16
 800bee4:	46f2      	mov	sl, lr
 800bee6:	2100      	movs	r1, #0
 800bee8:	f859 3b04 	ldr.w	r3, [r9], #4
 800beec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bef0:	fa1f f883 	uxth.w	r8, r3
 800bef4:	fa11 f18b 	uxtah	r1, r1, fp
 800bef8:	0c1b      	lsrs	r3, r3, #16
 800befa:	eba1 0808 	sub.w	r8, r1, r8
 800befe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf06:	fa1f f888 	uxth.w	r8, r8
 800bf0a:	1419      	asrs	r1, r3, #16
 800bf0c:	454e      	cmp	r6, r9
 800bf0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf12:	f84a 3b04 	str.w	r3, [sl], #4
 800bf16:	d8e7      	bhi.n	800bee8 <__mdiff+0x80>
 800bf18:	1b33      	subs	r3, r6, r4
 800bf1a:	3b15      	subs	r3, #21
 800bf1c:	f023 0303 	bic.w	r3, r3, #3
 800bf20:	3304      	adds	r3, #4
 800bf22:	3415      	adds	r4, #21
 800bf24:	42a6      	cmp	r6, r4
 800bf26:	bf38      	it	cc
 800bf28:	2304      	movcc	r3, #4
 800bf2a:	441d      	add	r5, r3
 800bf2c:	4473      	add	r3, lr
 800bf2e:	469e      	mov	lr, r3
 800bf30:	462e      	mov	r6, r5
 800bf32:	4566      	cmp	r6, ip
 800bf34:	d30e      	bcc.n	800bf54 <__mdiff+0xec>
 800bf36:	f10c 0203 	add.w	r2, ip, #3
 800bf3a:	1b52      	subs	r2, r2, r5
 800bf3c:	f022 0203 	bic.w	r2, r2, #3
 800bf40:	3d03      	subs	r5, #3
 800bf42:	45ac      	cmp	ip, r5
 800bf44:	bf38      	it	cc
 800bf46:	2200      	movcc	r2, #0
 800bf48:	441a      	add	r2, r3
 800bf4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf4e:	b17b      	cbz	r3, 800bf70 <__mdiff+0x108>
 800bf50:	6107      	str	r7, [r0, #16]
 800bf52:	e7a3      	b.n	800be9c <__mdiff+0x34>
 800bf54:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf58:	fa11 f288 	uxtah	r2, r1, r8
 800bf5c:	1414      	asrs	r4, r2, #16
 800bf5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf62:	b292      	uxth	r2, r2
 800bf64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf68:	f84e 2b04 	str.w	r2, [lr], #4
 800bf6c:	1421      	asrs	r1, r4, #16
 800bf6e:	e7e0      	b.n	800bf32 <__mdiff+0xca>
 800bf70:	3f01      	subs	r7, #1
 800bf72:	e7ea      	b.n	800bf4a <__mdiff+0xe2>
 800bf74:	0800d168 	.word	0x0800d168
 800bf78:	0800d1f4 	.word	0x0800d1f4

0800bf7c <__ulp>:
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	ed8d 0b00 	vstr	d0, [sp]
 800bf82:	9b01      	ldr	r3, [sp, #4]
 800bf84:	4912      	ldr	r1, [pc, #72]	; (800bfd0 <__ulp+0x54>)
 800bf86:	4019      	ands	r1, r3
 800bf88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	dd05      	ble.n	800bf9c <__ulp+0x20>
 800bf90:	2200      	movs	r2, #0
 800bf92:	460b      	mov	r3, r1
 800bf94:	ec43 2b10 	vmov	d0, r2, r3
 800bf98:	b002      	add	sp, #8
 800bf9a:	4770      	bx	lr
 800bf9c:	4249      	negs	r1, r1
 800bf9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bfa2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	f04f 0300 	mov.w	r3, #0
 800bfae:	da04      	bge.n	800bfba <__ulp+0x3e>
 800bfb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bfb4:	fa41 f300 	asr.w	r3, r1, r0
 800bfb8:	e7ec      	b.n	800bf94 <__ulp+0x18>
 800bfba:	f1a0 0114 	sub.w	r1, r0, #20
 800bfbe:	291e      	cmp	r1, #30
 800bfc0:	bfda      	itte	le
 800bfc2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bfc6:	fa20 f101 	lsrle.w	r1, r0, r1
 800bfca:	2101      	movgt	r1, #1
 800bfcc:	460a      	mov	r2, r1
 800bfce:	e7e1      	b.n	800bf94 <__ulp+0x18>
 800bfd0:	7ff00000 	.word	0x7ff00000

0800bfd4 <__b2d>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	6905      	ldr	r5, [r0, #16]
 800bfd8:	f100 0714 	add.w	r7, r0, #20
 800bfdc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bfe0:	1f2e      	subs	r6, r5, #4
 800bfe2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f7ff fd48 	bl	800ba7c <__hi0bits>
 800bfec:	f1c0 0320 	rsb	r3, r0, #32
 800bff0:	280a      	cmp	r0, #10
 800bff2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c070 <__b2d+0x9c>
 800bff6:	600b      	str	r3, [r1, #0]
 800bff8:	dc14      	bgt.n	800c024 <__b2d+0x50>
 800bffa:	f1c0 0e0b 	rsb	lr, r0, #11
 800bffe:	fa24 f10e 	lsr.w	r1, r4, lr
 800c002:	42b7      	cmp	r7, r6
 800c004:	ea41 030c 	orr.w	r3, r1, ip
 800c008:	bf34      	ite	cc
 800c00a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c00e:	2100      	movcs	r1, #0
 800c010:	3015      	adds	r0, #21
 800c012:	fa04 f000 	lsl.w	r0, r4, r0
 800c016:	fa21 f10e 	lsr.w	r1, r1, lr
 800c01a:	ea40 0201 	orr.w	r2, r0, r1
 800c01e:	ec43 2b10 	vmov	d0, r2, r3
 800c022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c024:	42b7      	cmp	r7, r6
 800c026:	bf3a      	itte	cc
 800c028:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c02c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c030:	2100      	movcs	r1, #0
 800c032:	380b      	subs	r0, #11
 800c034:	d017      	beq.n	800c066 <__b2d+0x92>
 800c036:	f1c0 0c20 	rsb	ip, r0, #32
 800c03a:	fa04 f500 	lsl.w	r5, r4, r0
 800c03e:	42be      	cmp	r6, r7
 800c040:	fa21 f40c 	lsr.w	r4, r1, ip
 800c044:	ea45 0504 	orr.w	r5, r5, r4
 800c048:	bf8c      	ite	hi
 800c04a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c04e:	2400      	movls	r4, #0
 800c050:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c054:	fa01 f000 	lsl.w	r0, r1, r0
 800c058:	fa24 f40c 	lsr.w	r4, r4, ip
 800c05c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c060:	ea40 0204 	orr.w	r2, r0, r4
 800c064:	e7db      	b.n	800c01e <__b2d+0x4a>
 800c066:	ea44 030c 	orr.w	r3, r4, ip
 800c06a:	460a      	mov	r2, r1
 800c06c:	e7d7      	b.n	800c01e <__b2d+0x4a>
 800c06e:	bf00      	nop
 800c070:	3ff00000 	.word	0x3ff00000

0800c074 <__d2b>:
 800c074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c078:	4689      	mov	r9, r1
 800c07a:	2101      	movs	r1, #1
 800c07c:	ec57 6b10 	vmov	r6, r7, d0
 800c080:	4690      	mov	r8, r2
 800c082:	f7ff fc09 	bl	800b898 <_Balloc>
 800c086:	4604      	mov	r4, r0
 800c088:	b930      	cbnz	r0, 800c098 <__d2b+0x24>
 800c08a:	4602      	mov	r2, r0
 800c08c:	4b25      	ldr	r3, [pc, #148]	; (800c124 <__d2b+0xb0>)
 800c08e:	4826      	ldr	r0, [pc, #152]	; (800c128 <__d2b+0xb4>)
 800c090:	f240 310a 	movw	r1, #778	; 0x30a
 800c094:	f000 fabe 	bl	800c614 <__assert_func>
 800c098:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c09c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0a0:	bb35      	cbnz	r5, 800c0f0 <__d2b+0x7c>
 800c0a2:	2e00      	cmp	r6, #0
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	d028      	beq.n	800c0fa <__d2b+0x86>
 800c0a8:	4668      	mov	r0, sp
 800c0aa:	9600      	str	r6, [sp, #0]
 800c0ac:	f7ff fd06 	bl	800babc <__lo0bits>
 800c0b0:	9900      	ldr	r1, [sp, #0]
 800c0b2:	b300      	cbz	r0, 800c0f6 <__d2b+0x82>
 800c0b4:	9a01      	ldr	r2, [sp, #4]
 800c0b6:	f1c0 0320 	rsb	r3, r0, #32
 800c0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c0be:	430b      	orrs	r3, r1
 800c0c0:	40c2      	lsrs	r2, r0
 800c0c2:	6163      	str	r3, [r4, #20]
 800c0c4:	9201      	str	r2, [sp, #4]
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	61a3      	str	r3, [r4, #24]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	bf14      	ite	ne
 800c0ce:	2202      	movne	r2, #2
 800c0d0:	2201      	moveq	r2, #1
 800c0d2:	6122      	str	r2, [r4, #16]
 800c0d4:	b1d5      	cbz	r5, 800c10c <__d2b+0x98>
 800c0d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0da:	4405      	add	r5, r0
 800c0dc:	f8c9 5000 	str.w	r5, [r9]
 800c0e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0e4:	f8c8 0000 	str.w	r0, [r8]
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	b003      	add	sp, #12
 800c0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0f4:	e7d5      	b.n	800c0a2 <__d2b+0x2e>
 800c0f6:	6161      	str	r1, [r4, #20]
 800c0f8:	e7e5      	b.n	800c0c6 <__d2b+0x52>
 800c0fa:	a801      	add	r0, sp, #4
 800c0fc:	f7ff fcde 	bl	800babc <__lo0bits>
 800c100:	9b01      	ldr	r3, [sp, #4]
 800c102:	6163      	str	r3, [r4, #20]
 800c104:	2201      	movs	r2, #1
 800c106:	6122      	str	r2, [r4, #16]
 800c108:	3020      	adds	r0, #32
 800c10a:	e7e3      	b.n	800c0d4 <__d2b+0x60>
 800c10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c114:	f8c9 0000 	str.w	r0, [r9]
 800c118:	6918      	ldr	r0, [r3, #16]
 800c11a:	f7ff fcaf 	bl	800ba7c <__hi0bits>
 800c11e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c122:	e7df      	b.n	800c0e4 <__d2b+0x70>
 800c124:	0800d168 	.word	0x0800d168
 800c128:	0800d1f4 	.word	0x0800d1f4

0800c12c <__ratio>:
 800c12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	4688      	mov	r8, r1
 800c132:	4669      	mov	r1, sp
 800c134:	4681      	mov	r9, r0
 800c136:	f7ff ff4d 	bl	800bfd4 <__b2d>
 800c13a:	a901      	add	r1, sp, #4
 800c13c:	4640      	mov	r0, r8
 800c13e:	ec55 4b10 	vmov	r4, r5, d0
 800c142:	f7ff ff47 	bl	800bfd4 <__b2d>
 800c146:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c14a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c14e:	eba3 0c02 	sub.w	ip, r3, r2
 800c152:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c156:	1a9b      	subs	r3, r3, r2
 800c158:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c15c:	ec51 0b10 	vmov	r0, r1, d0
 800c160:	2b00      	cmp	r3, #0
 800c162:	bfd6      	itet	le
 800c164:	460a      	movle	r2, r1
 800c166:	462a      	movgt	r2, r5
 800c168:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c16c:	468b      	mov	fp, r1
 800c16e:	462f      	mov	r7, r5
 800c170:	bfd4      	ite	le
 800c172:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c176:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c17a:	4620      	mov	r0, r4
 800c17c:	ee10 2a10 	vmov	r2, s0
 800c180:	465b      	mov	r3, fp
 800c182:	4639      	mov	r1, r7
 800c184:	f7f4 fb8a 	bl	800089c <__aeabi_ddiv>
 800c188:	ec41 0b10 	vmov	d0, r0, r1
 800c18c:	b003      	add	sp, #12
 800c18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c192 <__copybits>:
 800c192:	3901      	subs	r1, #1
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	1149      	asrs	r1, r1, #5
 800c198:	6914      	ldr	r4, [r2, #16]
 800c19a:	3101      	adds	r1, #1
 800c19c:	f102 0314 	add.w	r3, r2, #20
 800c1a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1a8:	1f05      	subs	r5, r0, #4
 800c1aa:	42a3      	cmp	r3, r4
 800c1ac:	d30c      	bcc.n	800c1c8 <__copybits+0x36>
 800c1ae:	1aa3      	subs	r3, r4, r2
 800c1b0:	3b11      	subs	r3, #17
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	3211      	adds	r2, #17
 800c1b8:	42a2      	cmp	r2, r4
 800c1ba:	bf88      	it	hi
 800c1bc:	2300      	movhi	r3, #0
 800c1be:	4418      	add	r0, r3
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4288      	cmp	r0, r1
 800c1c4:	d305      	bcc.n	800c1d2 <__copybits+0x40>
 800c1c6:	bd70      	pop	{r4, r5, r6, pc}
 800c1c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1d0:	e7eb      	b.n	800c1aa <__copybits+0x18>
 800c1d2:	f840 3b04 	str.w	r3, [r0], #4
 800c1d6:	e7f4      	b.n	800c1c2 <__copybits+0x30>

0800c1d8 <__any_on>:
 800c1d8:	f100 0214 	add.w	r2, r0, #20
 800c1dc:	6900      	ldr	r0, [r0, #16]
 800c1de:	114b      	asrs	r3, r1, #5
 800c1e0:	4298      	cmp	r0, r3
 800c1e2:	b510      	push	{r4, lr}
 800c1e4:	db11      	blt.n	800c20a <__any_on+0x32>
 800c1e6:	dd0a      	ble.n	800c1fe <__any_on+0x26>
 800c1e8:	f011 011f 	ands.w	r1, r1, #31
 800c1ec:	d007      	beq.n	800c1fe <__any_on+0x26>
 800c1ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1f2:	fa24 f001 	lsr.w	r0, r4, r1
 800c1f6:	fa00 f101 	lsl.w	r1, r0, r1
 800c1fa:	428c      	cmp	r4, r1
 800c1fc:	d10b      	bne.n	800c216 <__any_on+0x3e>
 800c1fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c202:	4293      	cmp	r3, r2
 800c204:	d803      	bhi.n	800c20e <__any_on+0x36>
 800c206:	2000      	movs	r0, #0
 800c208:	bd10      	pop	{r4, pc}
 800c20a:	4603      	mov	r3, r0
 800c20c:	e7f7      	b.n	800c1fe <__any_on+0x26>
 800c20e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c212:	2900      	cmp	r1, #0
 800c214:	d0f5      	beq.n	800c202 <__any_on+0x2a>
 800c216:	2001      	movs	r0, #1
 800c218:	e7f6      	b.n	800c208 <__any_on+0x30>

0800c21a <_calloc_r>:
 800c21a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c21c:	fba1 2402 	umull	r2, r4, r1, r2
 800c220:	b94c      	cbnz	r4, 800c236 <_calloc_r+0x1c>
 800c222:	4611      	mov	r1, r2
 800c224:	9201      	str	r2, [sp, #4]
 800c226:	f7fc f9ab 	bl	8008580 <_malloc_r>
 800c22a:	9a01      	ldr	r2, [sp, #4]
 800c22c:	4605      	mov	r5, r0
 800c22e:	b930      	cbnz	r0, 800c23e <_calloc_r+0x24>
 800c230:	4628      	mov	r0, r5
 800c232:	b003      	add	sp, #12
 800c234:	bd30      	pop	{r4, r5, pc}
 800c236:	220c      	movs	r2, #12
 800c238:	6002      	str	r2, [r0, #0]
 800c23a:	2500      	movs	r5, #0
 800c23c:	e7f8      	b.n	800c230 <_calloc_r+0x16>
 800c23e:	4621      	mov	r1, r4
 800c240:	f7fc f975 	bl	800852e <memset>
 800c244:	e7f4      	b.n	800c230 <_calloc_r+0x16>
	...

0800c248 <_free_r>:
 800c248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c24a:	2900      	cmp	r1, #0
 800c24c:	d044      	beq.n	800c2d8 <_free_r+0x90>
 800c24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c252:	9001      	str	r0, [sp, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f1a1 0404 	sub.w	r4, r1, #4
 800c25a:	bfb8      	it	lt
 800c25c:	18e4      	addlt	r4, r4, r3
 800c25e:	f7ff fb0f 	bl	800b880 <__malloc_lock>
 800c262:	4a1e      	ldr	r2, [pc, #120]	; (800c2dc <_free_r+0x94>)
 800c264:	9801      	ldr	r0, [sp, #4]
 800c266:	6813      	ldr	r3, [r2, #0]
 800c268:	b933      	cbnz	r3, 800c278 <_free_r+0x30>
 800c26a:	6063      	str	r3, [r4, #4]
 800c26c:	6014      	str	r4, [r2, #0]
 800c26e:	b003      	add	sp, #12
 800c270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c274:	f7ff bb0a 	b.w	800b88c <__malloc_unlock>
 800c278:	42a3      	cmp	r3, r4
 800c27a:	d908      	bls.n	800c28e <_free_r+0x46>
 800c27c:	6825      	ldr	r5, [r4, #0]
 800c27e:	1961      	adds	r1, r4, r5
 800c280:	428b      	cmp	r3, r1
 800c282:	bf01      	itttt	eq
 800c284:	6819      	ldreq	r1, [r3, #0]
 800c286:	685b      	ldreq	r3, [r3, #4]
 800c288:	1949      	addeq	r1, r1, r5
 800c28a:	6021      	streq	r1, [r4, #0]
 800c28c:	e7ed      	b.n	800c26a <_free_r+0x22>
 800c28e:	461a      	mov	r2, r3
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	b10b      	cbz	r3, 800c298 <_free_r+0x50>
 800c294:	42a3      	cmp	r3, r4
 800c296:	d9fa      	bls.n	800c28e <_free_r+0x46>
 800c298:	6811      	ldr	r1, [r2, #0]
 800c29a:	1855      	adds	r5, r2, r1
 800c29c:	42a5      	cmp	r5, r4
 800c29e:	d10b      	bne.n	800c2b8 <_free_r+0x70>
 800c2a0:	6824      	ldr	r4, [r4, #0]
 800c2a2:	4421      	add	r1, r4
 800c2a4:	1854      	adds	r4, r2, r1
 800c2a6:	42a3      	cmp	r3, r4
 800c2a8:	6011      	str	r1, [r2, #0]
 800c2aa:	d1e0      	bne.n	800c26e <_free_r+0x26>
 800c2ac:	681c      	ldr	r4, [r3, #0]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	6053      	str	r3, [r2, #4]
 800c2b2:	4421      	add	r1, r4
 800c2b4:	6011      	str	r1, [r2, #0]
 800c2b6:	e7da      	b.n	800c26e <_free_r+0x26>
 800c2b8:	d902      	bls.n	800c2c0 <_free_r+0x78>
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	6003      	str	r3, [r0, #0]
 800c2be:	e7d6      	b.n	800c26e <_free_r+0x26>
 800c2c0:	6825      	ldr	r5, [r4, #0]
 800c2c2:	1961      	adds	r1, r4, r5
 800c2c4:	428b      	cmp	r3, r1
 800c2c6:	bf04      	itt	eq
 800c2c8:	6819      	ldreq	r1, [r3, #0]
 800c2ca:	685b      	ldreq	r3, [r3, #4]
 800c2cc:	6063      	str	r3, [r4, #4]
 800c2ce:	bf04      	itt	eq
 800c2d0:	1949      	addeq	r1, r1, r5
 800c2d2:	6021      	streq	r1, [r4, #0]
 800c2d4:	6054      	str	r4, [r2, #4]
 800c2d6:	e7ca      	b.n	800c26e <_free_r+0x26>
 800c2d8:	b003      	add	sp, #12
 800c2da:	bd30      	pop	{r4, r5, pc}
 800c2dc:	20002eb0 	.word	0x20002eb0

0800c2e0 <__ssputs_r>:
 800c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e4:	688e      	ldr	r6, [r1, #8]
 800c2e6:	429e      	cmp	r6, r3
 800c2e8:	4682      	mov	sl, r0
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	4690      	mov	r8, r2
 800c2ee:	461f      	mov	r7, r3
 800c2f0:	d838      	bhi.n	800c364 <__ssputs_r+0x84>
 800c2f2:	898a      	ldrh	r2, [r1, #12]
 800c2f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2f8:	d032      	beq.n	800c360 <__ssputs_r+0x80>
 800c2fa:	6825      	ldr	r5, [r4, #0]
 800c2fc:	6909      	ldr	r1, [r1, #16]
 800c2fe:	eba5 0901 	sub.w	r9, r5, r1
 800c302:	6965      	ldr	r5, [r4, #20]
 800c304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c30c:	3301      	adds	r3, #1
 800c30e:	444b      	add	r3, r9
 800c310:	106d      	asrs	r5, r5, #1
 800c312:	429d      	cmp	r5, r3
 800c314:	bf38      	it	cc
 800c316:	461d      	movcc	r5, r3
 800c318:	0553      	lsls	r3, r2, #21
 800c31a:	d531      	bpl.n	800c380 <__ssputs_r+0xa0>
 800c31c:	4629      	mov	r1, r5
 800c31e:	f7fc f92f 	bl	8008580 <_malloc_r>
 800c322:	4606      	mov	r6, r0
 800c324:	b950      	cbnz	r0, 800c33c <__ssputs_r+0x5c>
 800c326:	230c      	movs	r3, #12
 800c328:	f8ca 3000 	str.w	r3, [sl]
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33c:	6921      	ldr	r1, [r4, #16]
 800c33e:	464a      	mov	r2, r9
 800c340:	f7fc f8e7 	bl	8008512 <memcpy>
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c34e:	81a3      	strh	r3, [r4, #12]
 800c350:	6126      	str	r6, [r4, #16]
 800c352:	6165      	str	r5, [r4, #20]
 800c354:	444e      	add	r6, r9
 800c356:	eba5 0509 	sub.w	r5, r5, r9
 800c35a:	6026      	str	r6, [r4, #0]
 800c35c:	60a5      	str	r5, [r4, #8]
 800c35e:	463e      	mov	r6, r7
 800c360:	42be      	cmp	r6, r7
 800c362:	d900      	bls.n	800c366 <__ssputs_r+0x86>
 800c364:	463e      	mov	r6, r7
 800c366:	6820      	ldr	r0, [r4, #0]
 800c368:	4632      	mov	r2, r6
 800c36a:	4641      	mov	r1, r8
 800c36c:	f000 f982 	bl	800c674 <memmove>
 800c370:	68a3      	ldr	r3, [r4, #8]
 800c372:	1b9b      	subs	r3, r3, r6
 800c374:	60a3      	str	r3, [r4, #8]
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	4433      	add	r3, r6
 800c37a:	6023      	str	r3, [r4, #0]
 800c37c:	2000      	movs	r0, #0
 800c37e:	e7db      	b.n	800c338 <__ssputs_r+0x58>
 800c380:	462a      	mov	r2, r5
 800c382:	f000 f991 	bl	800c6a8 <_realloc_r>
 800c386:	4606      	mov	r6, r0
 800c388:	2800      	cmp	r0, #0
 800c38a:	d1e1      	bne.n	800c350 <__ssputs_r+0x70>
 800c38c:	6921      	ldr	r1, [r4, #16]
 800c38e:	4650      	mov	r0, sl
 800c390:	f7ff ff5a 	bl	800c248 <_free_r>
 800c394:	e7c7      	b.n	800c326 <__ssputs_r+0x46>
	...

0800c398 <_svfiprintf_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	4698      	mov	r8, r3
 800c39e:	898b      	ldrh	r3, [r1, #12]
 800c3a0:	061b      	lsls	r3, r3, #24
 800c3a2:	b09d      	sub	sp, #116	; 0x74
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	460d      	mov	r5, r1
 800c3a8:	4614      	mov	r4, r2
 800c3aa:	d50e      	bpl.n	800c3ca <_svfiprintf_r+0x32>
 800c3ac:	690b      	ldr	r3, [r1, #16]
 800c3ae:	b963      	cbnz	r3, 800c3ca <_svfiprintf_r+0x32>
 800c3b0:	2140      	movs	r1, #64	; 0x40
 800c3b2:	f7fc f8e5 	bl	8008580 <_malloc_r>
 800c3b6:	6028      	str	r0, [r5, #0]
 800c3b8:	6128      	str	r0, [r5, #16]
 800c3ba:	b920      	cbnz	r0, 800c3c6 <_svfiprintf_r+0x2e>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c4:	e0d1      	b.n	800c56a <_svfiprintf_r+0x1d2>
 800c3c6:	2340      	movs	r3, #64	; 0x40
 800c3c8:	616b      	str	r3, [r5, #20]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ce:	2320      	movs	r3, #32
 800c3d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3d8:	2330      	movs	r3, #48	; 0x30
 800c3da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c584 <_svfiprintf_r+0x1ec>
 800c3de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3e2:	f04f 0901 	mov.w	r9, #1
 800c3e6:	4623      	mov	r3, r4
 800c3e8:	469a      	mov	sl, r3
 800c3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ee:	b10a      	cbz	r2, 800c3f4 <_svfiprintf_r+0x5c>
 800c3f0:	2a25      	cmp	r2, #37	; 0x25
 800c3f2:	d1f9      	bne.n	800c3e8 <_svfiprintf_r+0x50>
 800c3f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3f8:	d00b      	beq.n	800c412 <_svfiprintf_r+0x7a>
 800c3fa:	465b      	mov	r3, fp
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff ff6d 	bl	800c2e0 <__ssputs_r>
 800c406:	3001      	adds	r0, #1
 800c408:	f000 80aa 	beq.w	800c560 <_svfiprintf_r+0x1c8>
 800c40c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c40e:	445a      	add	r2, fp
 800c410:	9209      	str	r2, [sp, #36]	; 0x24
 800c412:	f89a 3000 	ldrb.w	r3, [sl]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 80a2 	beq.w	800c560 <_svfiprintf_r+0x1c8>
 800c41c:	2300      	movs	r3, #0
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
 800c422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c426:	f10a 0a01 	add.w	sl, sl, #1
 800c42a:	9304      	str	r3, [sp, #16]
 800c42c:	9307      	str	r3, [sp, #28]
 800c42e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c432:	931a      	str	r3, [sp, #104]	; 0x68
 800c434:	4654      	mov	r4, sl
 800c436:	2205      	movs	r2, #5
 800c438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43c:	4851      	ldr	r0, [pc, #324]	; (800c584 <_svfiprintf_r+0x1ec>)
 800c43e:	f7f3 fef7 	bl	8000230 <memchr>
 800c442:	9a04      	ldr	r2, [sp, #16]
 800c444:	b9d8      	cbnz	r0, 800c47e <_svfiprintf_r+0xe6>
 800c446:	06d0      	lsls	r0, r2, #27
 800c448:	bf44      	itt	mi
 800c44a:	2320      	movmi	r3, #32
 800c44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c450:	0711      	lsls	r1, r2, #28
 800c452:	bf44      	itt	mi
 800c454:	232b      	movmi	r3, #43	; 0x2b
 800c456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c45a:	f89a 3000 	ldrb.w	r3, [sl]
 800c45e:	2b2a      	cmp	r3, #42	; 0x2a
 800c460:	d015      	beq.n	800c48e <_svfiprintf_r+0xf6>
 800c462:	9a07      	ldr	r2, [sp, #28]
 800c464:	4654      	mov	r4, sl
 800c466:	2000      	movs	r0, #0
 800c468:	f04f 0c0a 	mov.w	ip, #10
 800c46c:	4621      	mov	r1, r4
 800c46e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c472:	3b30      	subs	r3, #48	; 0x30
 800c474:	2b09      	cmp	r3, #9
 800c476:	d94e      	bls.n	800c516 <_svfiprintf_r+0x17e>
 800c478:	b1b0      	cbz	r0, 800c4a8 <_svfiprintf_r+0x110>
 800c47a:	9207      	str	r2, [sp, #28]
 800c47c:	e014      	b.n	800c4a8 <_svfiprintf_r+0x110>
 800c47e:	eba0 0308 	sub.w	r3, r0, r8
 800c482:	fa09 f303 	lsl.w	r3, r9, r3
 800c486:	4313      	orrs	r3, r2
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	46a2      	mov	sl, r4
 800c48c:	e7d2      	b.n	800c434 <_svfiprintf_r+0x9c>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	1d19      	adds	r1, r3, #4
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	9103      	str	r1, [sp, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	bfbb      	ittet	lt
 800c49a:	425b      	neglt	r3, r3
 800c49c:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a0:	9307      	strge	r3, [sp, #28]
 800c4a2:	9307      	strlt	r3, [sp, #28]
 800c4a4:	bfb8      	it	lt
 800c4a6:	9204      	strlt	r2, [sp, #16]
 800c4a8:	7823      	ldrb	r3, [r4, #0]
 800c4aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ac:	d10c      	bne.n	800c4c8 <_svfiprintf_r+0x130>
 800c4ae:	7863      	ldrb	r3, [r4, #1]
 800c4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b2:	d135      	bne.n	800c520 <_svfiprintf_r+0x188>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	1d1a      	adds	r2, r3, #4
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	9203      	str	r2, [sp, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	bfb8      	it	lt
 800c4c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4c4:	3402      	adds	r4, #2
 800c4c6:	9305      	str	r3, [sp, #20]
 800c4c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c594 <_svfiprintf_r+0x1fc>
 800c4cc:	7821      	ldrb	r1, [r4, #0]
 800c4ce:	2203      	movs	r2, #3
 800c4d0:	4650      	mov	r0, sl
 800c4d2:	f7f3 fead 	bl	8000230 <memchr>
 800c4d6:	b140      	cbz	r0, 800c4ea <_svfiprintf_r+0x152>
 800c4d8:	2340      	movs	r3, #64	; 0x40
 800c4da:	eba0 000a 	sub.w	r0, r0, sl
 800c4de:	fa03 f000 	lsl.w	r0, r3, r0
 800c4e2:	9b04      	ldr	r3, [sp, #16]
 800c4e4:	4303      	orrs	r3, r0
 800c4e6:	3401      	adds	r4, #1
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ee:	4826      	ldr	r0, [pc, #152]	; (800c588 <_svfiprintf_r+0x1f0>)
 800c4f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4f4:	2206      	movs	r2, #6
 800c4f6:	f7f3 fe9b 	bl	8000230 <memchr>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d038      	beq.n	800c570 <_svfiprintf_r+0x1d8>
 800c4fe:	4b23      	ldr	r3, [pc, #140]	; (800c58c <_svfiprintf_r+0x1f4>)
 800c500:	bb1b      	cbnz	r3, 800c54a <_svfiprintf_r+0x1b2>
 800c502:	9b03      	ldr	r3, [sp, #12]
 800c504:	3307      	adds	r3, #7
 800c506:	f023 0307 	bic.w	r3, r3, #7
 800c50a:	3308      	adds	r3, #8
 800c50c:	9303      	str	r3, [sp, #12]
 800c50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c510:	4433      	add	r3, r6
 800c512:	9309      	str	r3, [sp, #36]	; 0x24
 800c514:	e767      	b.n	800c3e6 <_svfiprintf_r+0x4e>
 800c516:	fb0c 3202 	mla	r2, ip, r2, r3
 800c51a:	460c      	mov	r4, r1
 800c51c:	2001      	movs	r0, #1
 800c51e:	e7a5      	b.n	800c46c <_svfiprintf_r+0xd4>
 800c520:	2300      	movs	r3, #0
 800c522:	3401      	adds	r4, #1
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	4619      	mov	r1, r3
 800c528:	f04f 0c0a 	mov.w	ip, #10
 800c52c:	4620      	mov	r0, r4
 800c52e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c532:	3a30      	subs	r2, #48	; 0x30
 800c534:	2a09      	cmp	r2, #9
 800c536:	d903      	bls.n	800c540 <_svfiprintf_r+0x1a8>
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d0c5      	beq.n	800c4c8 <_svfiprintf_r+0x130>
 800c53c:	9105      	str	r1, [sp, #20]
 800c53e:	e7c3      	b.n	800c4c8 <_svfiprintf_r+0x130>
 800c540:	fb0c 2101 	mla	r1, ip, r1, r2
 800c544:	4604      	mov	r4, r0
 800c546:	2301      	movs	r3, #1
 800c548:	e7f0      	b.n	800c52c <_svfiprintf_r+0x194>
 800c54a:	ab03      	add	r3, sp, #12
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	462a      	mov	r2, r5
 800c550:	4b0f      	ldr	r3, [pc, #60]	; (800c590 <_svfiprintf_r+0x1f8>)
 800c552:	a904      	add	r1, sp, #16
 800c554:	4638      	mov	r0, r7
 800c556:	f7fc f927 	bl	80087a8 <_printf_float>
 800c55a:	1c42      	adds	r2, r0, #1
 800c55c:	4606      	mov	r6, r0
 800c55e:	d1d6      	bne.n	800c50e <_svfiprintf_r+0x176>
 800c560:	89ab      	ldrh	r3, [r5, #12]
 800c562:	065b      	lsls	r3, r3, #25
 800c564:	f53f af2c 	bmi.w	800c3c0 <_svfiprintf_r+0x28>
 800c568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c56a:	b01d      	add	sp, #116	; 0x74
 800c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c570:	ab03      	add	r3, sp, #12
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	462a      	mov	r2, r5
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <_svfiprintf_r+0x1f8>)
 800c578:	a904      	add	r1, sp, #16
 800c57a:	4638      	mov	r0, r7
 800c57c:	f7fc fbb8 	bl	8008cf0 <_printf_i>
 800c580:	e7eb      	b.n	800c55a <_svfiprintf_r+0x1c2>
 800c582:	bf00      	nop
 800c584:	0800d34c 	.word	0x0800d34c
 800c588:	0800d356 	.word	0x0800d356
 800c58c:	080087a9 	.word	0x080087a9
 800c590:	0800c2e1 	.word	0x0800c2e1
 800c594:	0800d352 	.word	0x0800d352

0800c598 <_read_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	; (800c5b8 <_read_r+0x20>)
 800c59c:	4604      	mov	r4, r0
 800c59e:	4608      	mov	r0, r1
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	602a      	str	r2, [r5, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f7f5 fa7e 	bl	8001aa8 <_read>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_read_r+0x1e>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_read_r+0x1e>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	20002eb8 	.word	0x20002eb8
 800c5bc:	00000000 	.word	0x00000000

0800c5c0 <nan>:
 800c5c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c5c8 <nan+0x8>
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	00000000 	.word	0x00000000
 800c5cc:	7ff80000 	.word	0x7ff80000

0800c5d0 <strncmp>:
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	b17a      	cbz	r2, 800c5f4 <strncmp+0x24>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	3901      	subs	r1, #1
 800c5d8:	1884      	adds	r4, r0, r2
 800c5da:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c5e2:	4290      	cmp	r0, r2
 800c5e4:	d101      	bne.n	800c5ea <strncmp+0x1a>
 800c5e6:	42a3      	cmp	r3, r4
 800c5e8:	d101      	bne.n	800c5ee <strncmp+0x1e>
 800c5ea:	1a80      	subs	r0, r0, r2
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d1f3      	bne.n	800c5da <strncmp+0xa>
 800c5f2:	e7fa      	b.n	800c5ea <strncmp+0x1a>
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	e7f9      	b.n	800c5ec <strncmp+0x1c>

0800c5f8 <__ascii_wctomb>:
 800c5f8:	b149      	cbz	r1, 800c60e <__ascii_wctomb+0x16>
 800c5fa:	2aff      	cmp	r2, #255	; 0xff
 800c5fc:	bf85      	ittet	hi
 800c5fe:	238a      	movhi	r3, #138	; 0x8a
 800c600:	6003      	strhi	r3, [r0, #0]
 800c602:	700a      	strbls	r2, [r1, #0]
 800c604:	f04f 30ff 	movhi.w	r0, #4294967295
 800c608:	bf98      	it	ls
 800c60a:	2001      	movls	r0, #1
 800c60c:	4770      	bx	lr
 800c60e:	4608      	mov	r0, r1
 800c610:	4770      	bx	lr
	...

0800c614 <__assert_func>:
 800c614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c616:	4614      	mov	r4, r2
 800c618:	461a      	mov	r2, r3
 800c61a:	4b09      	ldr	r3, [pc, #36]	; (800c640 <__assert_func+0x2c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4605      	mov	r5, r0
 800c620:	68d8      	ldr	r0, [r3, #12]
 800c622:	b14c      	cbz	r4, 800c638 <__assert_func+0x24>
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <__assert_func+0x30>)
 800c626:	9100      	str	r1, [sp, #0]
 800c628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c62c:	4906      	ldr	r1, [pc, #24]	; (800c648 <__assert_func+0x34>)
 800c62e:	462b      	mov	r3, r5
 800c630:	f000 f80e 	bl	800c650 <fiprintf>
 800c634:	f000 fa80 	bl	800cb38 <abort>
 800c638:	4b04      	ldr	r3, [pc, #16]	; (800c64c <__assert_func+0x38>)
 800c63a:	461c      	mov	r4, r3
 800c63c:	e7f3      	b.n	800c626 <__assert_func+0x12>
 800c63e:	bf00      	nop
 800c640:	20000010 	.word	0x20000010
 800c644:	0800d35d 	.word	0x0800d35d
 800c648:	0800d36a 	.word	0x0800d36a
 800c64c:	0800d398 	.word	0x0800d398

0800c650 <fiprintf>:
 800c650:	b40e      	push	{r1, r2, r3}
 800c652:	b503      	push	{r0, r1, lr}
 800c654:	4601      	mov	r1, r0
 800c656:	ab03      	add	r3, sp, #12
 800c658:	4805      	ldr	r0, [pc, #20]	; (800c670 <fiprintf+0x20>)
 800c65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65e:	6800      	ldr	r0, [r0, #0]
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	f000 f879 	bl	800c758 <_vfiprintf_r>
 800c666:	b002      	add	sp, #8
 800c668:	f85d eb04 	ldr.w	lr, [sp], #4
 800c66c:	b003      	add	sp, #12
 800c66e:	4770      	bx	lr
 800c670:	20000010 	.word	0x20000010

0800c674 <memmove>:
 800c674:	4288      	cmp	r0, r1
 800c676:	b510      	push	{r4, lr}
 800c678:	eb01 0402 	add.w	r4, r1, r2
 800c67c:	d902      	bls.n	800c684 <memmove+0x10>
 800c67e:	4284      	cmp	r4, r0
 800c680:	4623      	mov	r3, r4
 800c682:	d807      	bhi.n	800c694 <memmove+0x20>
 800c684:	1e43      	subs	r3, r0, #1
 800c686:	42a1      	cmp	r1, r4
 800c688:	d008      	beq.n	800c69c <memmove+0x28>
 800c68a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c68e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c692:	e7f8      	b.n	800c686 <memmove+0x12>
 800c694:	4402      	add	r2, r0
 800c696:	4601      	mov	r1, r0
 800c698:	428a      	cmp	r2, r1
 800c69a:	d100      	bne.n	800c69e <memmove+0x2a>
 800c69c:	bd10      	pop	{r4, pc}
 800c69e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6a6:	e7f7      	b.n	800c698 <memmove+0x24>

0800c6a8 <_realloc_r>:
 800c6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ac:	4680      	mov	r8, r0
 800c6ae:	4614      	mov	r4, r2
 800c6b0:	460e      	mov	r6, r1
 800c6b2:	b921      	cbnz	r1, 800c6be <_realloc_r+0x16>
 800c6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	f7fb bf61 	b.w	8008580 <_malloc_r>
 800c6be:	b92a      	cbnz	r2, 800c6cc <_realloc_r+0x24>
 800c6c0:	f7ff fdc2 	bl	800c248 <_free_r>
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6cc:	f000 faa0 	bl	800cc10 <_malloc_usable_size_r>
 800c6d0:	4284      	cmp	r4, r0
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	d802      	bhi.n	800c6dc <_realloc_r+0x34>
 800c6d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6da:	d812      	bhi.n	800c702 <_realloc_r+0x5a>
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4640      	mov	r0, r8
 800c6e0:	f7fb ff4e 	bl	8008580 <_malloc_r>
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d0ed      	beq.n	800c6c6 <_realloc_r+0x1e>
 800c6ea:	42bc      	cmp	r4, r7
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	bf28      	it	cs
 800c6f2:	463a      	movcs	r2, r7
 800c6f4:	f7fb ff0d 	bl	8008512 <memcpy>
 800c6f8:	4631      	mov	r1, r6
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f7ff fda4 	bl	800c248 <_free_r>
 800c700:	e7e1      	b.n	800c6c6 <_realloc_r+0x1e>
 800c702:	4635      	mov	r5, r6
 800c704:	e7df      	b.n	800c6c6 <_realloc_r+0x1e>

0800c706 <__sfputc_r>:
 800c706:	6893      	ldr	r3, [r2, #8]
 800c708:	3b01      	subs	r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	b410      	push	{r4}
 800c70e:	6093      	str	r3, [r2, #8]
 800c710:	da08      	bge.n	800c724 <__sfputc_r+0x1e>
 800c712:	6994      	ldr	r4, [r2, #24]
 800c714:	42a3      	cmp	r3, r4
 800c716:	db01      	blt.n	800c71c <__sfputc_r+0x16>
 800c718:	290a      	cmp	r1, #10
 800c71a:	d103      	bne.n	800c724 <__sfputc_r+0x1e>
 800c71c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c720:	f000 b94a 	b.w	800c9b8 <__swbuf_r>
 800c724:	6813      	ldr	r3, [r2, #0]
 800c726:	1c58      	adds	r0, r3, #1
 800c728:	6010      	str	r0, [r2, #0]
 800c72a:	7019      	strb	r1, [r3, #0]
 800c72c:	4608      	mov	r0, r1
 800c72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <__sfputs_r>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	4614      	mov	r4, r2
 800c73c:	18d5      	adds	r5, r2, r3
 800c73e:	42ac      	cmp	r4, r5
 800c740:	d101      	bne.n	800c746 <__sfputs_r+0x12>
 800c742:	2000      	movs	r0, #0
 800c744:	e007      	b.n	800c756 <__sfputs_r+0x22>
 800c746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74a:	463a      	mov	r2, r7
 800c74c:	4630      	mov	r0, r6
 800c74e:	f7ff ffda 	bl	800c706 <__sfputc_r>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d1f3      	bne.n	800c73e <__sfputs_r+0xa>
 800c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c758 <_vfiprintf_r>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	460d      	mov	r5, r1
 800c75e:	b09d      	sub	sp, #116	; 0x74
 800c760:	4614      	mov	r4, r2
 800c762:	4698      	mov	r8, r3
 800c764:	4606      	mov	r6, r0
 800c766:	b118      	cbz	r0, 800c770 <_vfiprintf_r+0x18>
 800c768:	6983      	ldr	r3, [r0, #24]
 800c76a:	b90b      	cbnz	r3, 800c770 <_vfiprintf_r+0x18>
 800c76c:	f7fb fe0c 	bl	8008388 <__sinit>
 800c770:	4b89      	ldr	r3, [pc, #548]	; (800c998 <_vfiprintf_r+0x240>)
 800c772:	429d      	cmp	r5, r3
 800c774:	d11b      	bne.n	800c7ae <_vfiprintf_r+0x56>
 800c776:	6875      	ldr	r5, [r6, #4]
 800c778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c77a:	07d9      	lsls	r1, r3, #31
 800c77c:	d405      	bmi.n	800c78a <_vfiprintf_r+0x32>
 800c77e:	89ab      	ldrh	r3, [r5, #12]
 800c780:	059a      	lsls	r2, r3, #22
 800c782:	d402      	bmi.n	800c78a <_vfiprintf_r+0x32>
 800c784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c786:	f7fb fec2 	bl	800850e <__retarget_lock_acquire_recursive>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	071b      	lsls	r3, r3, #28
 800c78e:	d501      	bpl.n	800c794 <_vfiprintf_r+0x3c>
 800c790:	692b      	ldr	r3, [r5, #16]
 800c792:	b9eb      	cbnz	r3, 800c7d0 <_vfiprintf_r+0x78>
 800c794:	4629      	mov	r1, r5
 800c796:	4630      	mov	r0, r6
 800c798:	f000 f960 	bl	800ca5c <__swsetup_r>
 800c79c:	b1c0      	cbz	r0, 800c7d0 <_vfiprintf_r+0x78>
 800c79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a0:	07dc      	lsls	r4, r3, #31
 800c7a2:	d50e      	bpl.n	800c7c2 <_vfiprintf_r+0x6a>
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a8:	b01d      	add	sp, #116	; 0x74
 800c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ae:	4b7b      	ldr	r3, [pc, #492]	; (800c99c <_vfiprintf_r+0x244>)
 800c7b0:	429d      	cmp	r5, r3
 800c7b2:	d101      	bne.n	800c7b8 <_vfiprintf_r+0x60>
 800c7b4:	68b5      	ldr	r5, [r6, #8]
 800c7b6:	e7df      	b.n	800c778 <_vfiprintf_r+0x20>
 800c7b8:	4b79      	ldr	r3, [pc, #484]	; (800c9a0 <_vfiprintf_r+0x248>)
 800c7ba:	429d      	cmp	r5, r3
 800c7bc:	bf08      	it	eq
 800c7be:	68f5      	ldreq	r5, [r6, #12]
 800c7c0:	e7da      	b.n	800c778 <_vfiprintf_r+0x20>
 800c7c2:	89ab      	ldrh	r3, [r5, #12]
 800c7c4:	0598      	lsls	r0, r3, #22
 800c7c6:	d4ed      	bmi.n	800c7a4 <_vfiprintf_r+0x4c>
 800c7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ca:	f7fb fea1 	bl	8008510 <__retarget_lock_release_recursive>
 800c7ce:	e7e9      	b.n	800c7a4 <_vfiprintf_r+0x4c>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7de:	2330      	movs	r3, #48	; 0x30
 800c7e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9a4 <_vfiprintf_r+0x24c>
 800c7e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e8:	f04f 0901 	mov.w	r9, #1
 800c7ec:	4623      	mov	r3, r4
 800c7ee:	469a      	mov	sl, r3
 800c7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f4:	b10a      	cbz	r2, 800c7fa <_vfiprintf_r+0xa2>
 800c7f6:	2a25      	cmp	r2, #37	; 0x25
 800c7f8:	d1f9      	bne.n	800c7ee <_vfiprintf_r+0x96>
 800c7fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c7fe:	d00b      	beq.n	800c818 <_vfiprintf_r+0xc0>
 800c800:	465b      	mov	r3, fp
 800c802:	4622      	mov	r2, r4
 800c804:	4629      	mov	r1, r5
 800c806:	4630      	mov	r0, r6
 800c808:	f7ff ff94 	bl	800c734 <__sfputs_r>
 800c80c:	3001      	adds	r0, #1
 800c80e:	f000 80aa 	beq.w	800c966 <_vfiprintf_r+0x20e>
 800c812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c814:	445a      	add	r2, fp
 800c816:	9209      	str	r2, [sp, #36]	; 0x24
 800c818:	f89a 3000 	ldrb.w	r3, [sl]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 80a2 	beq.w	800c966 <_vfiprintf_r+0x20e>
 800c822:	2300      	movs	r3, #0
 800c824:	f04f 32ff 	mov.w	r2, #4294967295
 800c828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c82c:	f10a 0a01 	add.w	sl, sl, #1
 800c830:	9304      	str	r3, [sp, #16]
 800c832:	9307      	str	r3, [sp, #28]
 800c834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c838:	931a      	str	r3, [sp, #104]	; 0x68
 800c83a:	4654      	mov	r4, sl
 800c83c:	2205      	movs	r2, #5
 800c83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c842:	4858      	ldr	r0, [pc, #352]	; (800c9a4 <_vfiprintf_r+0x24c>)
 800c844:	f7f3 fcf4 	bl	8000230 <memchr>
 800c848:	9a04      	ldr	r2, [sp, #16]
 800c84a:	b9d8      	cbnz	r0, 800c884 <_vfiprintf_r+0x12c>
 800c84c:	06d1      	lsls	r1, r2, #27
 800c84e:	bf44      	itt	mi
 800c850:	2320      	movmi	r3, #32
 800c852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c856:	0713      	lsls	r3, r2, #28
 800c858:	bf44      	itt	mi
 800c85a:	232b      	movmi	r3, #43	; 0x2b
 800c85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c860:	f89a 3000 	ldrb.w	r3, [sl]
 800c864:	2b2a      	cmp	r3, #42	; 0x2a
 800c866:	d015      	beq.n	800c894 <_vfiprintf_r+0x13c>
 800c868:	9a07      	ldr	r2, [sp, #28]
 800c86a:	4654      	mov	r4, sl
 800c86c:	2000      	movs	r0, #0
 800c86e:	f04f 0c0a 	mov.w	ip, #10
 800c872:	4621      	mov	r1, r4
 800c874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c878:	3b30      	subs	r3, #48	; 0x30
 800c87a:	2b09      	cmp	r3, #9
 800c87c:	d94e      	bls.n	800c91c <_vfiprintf_r+0x1c4>
 800c87e:	b1b0      	cbz	r0, 800c8ae <_vfiprintf_r+0x156>
 800c880:	9207      	str	r2, [sp, #28]
 800c882:	e014      	b.n	800c8ae <_vfiprintf_r+0x156>
 800c884:	eba0 0308 	sub.w	r3, r0, r8
 800c888:	fa09 f303 	lsl.w	r3, r9, r3
 800c88c:	4313      	orrs	r3, r2
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	46a2      	mov	sl, r4
 800c892:	e7d2      	b.n	800c83a <_vfiprintf_r+0xe2>
 800c894:	9b03      	ldr	r3, [sp, #12]
 800c896:	1d19      	adds	r1, r3, #4
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	9103      	str	r1, [sp, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	bfbb      	ittet	lt
 800c8a0:	425b      	neglt	r3, r3
 800c8a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a6:	9307      	strge	r3, [sp, #28]
 800c8a8:	9307      	strlt	r3, [sp, #28]
 800c8aa:	bfb8      	it	lt
 800c8ac:	9204      	strlt	r2, [sp, #16]
 800c8ae:	7823      	ldrb	r3, [r4, #0]
 800c8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b2:	d10c      	bne.n	800c8ce <_vfiprintf_r+0x176>
 800c8b4:	7863      	ldrb	r3, [r4, #1]
 800c8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b8:	d135      	bne.n	800c926 <_vfiprintf_r+0x1ce>
 800c8ba:	9b03      	ldr	r3, [sp, #12]
 800c8bc:	1d1a      	adds	r2, r3, #4
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	9203      	str	r2, [sp, #12]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bfb8      	it	lt
 800c8c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8ca:	3402      	adds	r4, #2
 800c8cc:	9305      	str	r3, [sp, #20]
 800c8ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9b4 <_vfiprintf_r+0x25c>
 800c8d2:	7821      	ldrb	r1, [r4, #0]
 800c8d4:	2203      	movs	r2, #3
 800c8d6:	4650      	mov	r0, sl
 800c8d8:	f7f3 fcaa 	bl	8000230 <memchr>
 800c8dc:	b140      	cbz	r0, 800c8f0 <_vfiprintf_r+0x198>
 800c8de:	2340      	movs	r3, #64	; 0x40
 800c8e0:	eba0 000a 	sub.w	r0, r0, sl
 800c8e4:	fa03 f000 	lsl.w	r0, r3, r0
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	4303      	orrs	r3, r0
 800c8ec:	3401      	adds	r4, #1
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f4:	482c      	ldr	r0, [pc, #176]	; (800c9a8 <_vfiprintf_r+0x250>)
 800c8f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8fa:	2206      	movs	r2, #6
 800c8fc:	f7f3 fc98 	bl	8000230 <memchr>
 800c900:	2800      	cmp	r0, #0
 800c902:	d03f      	beq.n	800c984 <_vfiprintf_r+0x22c>
 800c904:	4b29      	ldr	r3, [pc, #164]	; (800c9ac <_vfiprintf_r+0x254>)
 800c906:	bb1b      	cbnz	r3, 800c950 <_vfiprintf_r+0x1f8>
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	3307      	adds	r3, #7
 800c90c:	f023 0307 	bic.w	r3, r3, #7
 800c910:	3308      	adds	r3, #8
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c916:	443b      	add	r3, r7
 800c918:	9309      	str	r3, [sp, #36]	; 0x24
 800c91a:	e767      	b.n	800c7ec <_vfiprintf_r+0x94>
 800c91c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c920:	460c      	mov	r4, r1
 800c922:	2001      	movs	r0, #1
 800c924:	e7a5      	b.n	800c872 <_vfiprintf_r+0x11a>
 800c926:	2300      	movs	r3, #0
 800c928:	3401      	adds	r4, #1
 800c92a:	9305      	str	r3, [sp, #20]
 800c92c:	4619      	mov	r1, r3
 800c92e:	f04f 0c0a 	mov.w	ip, #10
 800c932:	4620      	mov	r0, r4
 800c934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c938:	3a30      	subs	r2, #48	; 0x30
 800c93a:	2a09      	cmp	r2, #9
 800c93c:	d903      	bls.n	800c946 <_vfiprintf_r+0x1ee>
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0c5      	beq.n	800c8ce <_vfiprintf_r+0x176>
 800c942:	9105      	str	r1, [sp, #20]
 800c944:	e7c3      	b.n	800c8ce <_vfiprintf_r+0x176>
 800c946:	fb0c 2101 	mla	r1, ip, r1, r2
 800c94a:	4604      	mov	r4, r0
 800c94c:	2301      	movs	r3, #1
 800c94e:	e7f0      	b.n	800c932 <_vfiprintf_r+0x1da>
 800c950:	ab03      	add	r3, sp, #12
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	462a      	mov	r2, r5
 800c956:	4b16      	ldr	r3, [pc, #88]	; (800c9b0 <_vfiprintf_r+0x258>)
 800c958:	a904      	add	r1, sp, #16
 800c95a:	4630      	mov	r0, r6
 800c95c:	f7fb ff24 	bl	80087a8 <_printf_float>
 800c960:	4607      	mov	r7, r0
 800c962:	1c78      	adds	r0, r7, #1
 800c964:	d1d6      	bne.n	800c914 <_vfiprintf_r+0x1bc>
 800c966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c968:	07d9      	lsls	r1, r3, #31
 800c96a:	d405      	bmi.n	800c978 <_vfiprintf_r+0x220>
 800c96c:	89ab      	ldrh	r3, [r5, #12]
 800c96e:	059a      	lsls	r2, r3, #22
 800c970:	d402      	bmi.n	800c978 <_vfiprintf_r+0x220>
 800c972:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c974:	f7fb fdcc 	bl	8008510 <__retarget_lock_release_recursive>
 800c978:	89ab      	ldrh	r3, [r5, #12]
 800c97a:	065b      	lsls	r3, r3, #25
 800c97c:	f53f af12 	bmi.w	800c7a4 <_vfiprintf_r+0x4c>
 800c980:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c982:	e711      	b.n	800c7a8 <_vfiprintf_r+0x50>
 800c984:	ab03      	add	r3, sp, #12
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	462a      	mov	r2, r5
 800c98a:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <_vfiprintf_r+0x258>)
 800c98c:	a904      	add	r1, sp, #16
 800c98e:	4630      	mov	r0, r6
 800c990:	f7fc f9ae 	bl	8008cf0 <_printf_i>
 800c994:	e7e4      	b.n	800c960 <_vfiprintf_r+0x208>
 800c996:	bf00      	nop
 800c998:	0800cf14 	.word	0x0800cf14
 800c99c:	0800cf34 	.word	0x0800cf34
 800c9a0:	0800cef4 	.word	0x0800cef4
 800c9a4:	0800d34c 	.word	0x0800d34c
 800c9a8:	0800d356 	.word	0x0800d356
 800c9ac:	080087a9 	.word	0x080087a9
 800c9b0:	0800c735 	.word	0x0800c735
 800c9b4:	0800d352 	.word	0x0800d352

0800c9b8 <__swbuf_r>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	460e      	mov	r6, r1
 800c9bc:	4614      	mov	r4, r2
 800c9be:	4605      	mov	r5, r0
 800c9c0:	b118      	cbz	r0, 800c9ca <__swbuf_r+0x12>
 800c9c2:	6983      	ldr	r3, [r0, #24]
 800c9c4:	b90b      	cbnz	r3, 800c9ca <__swbuf_r+0x12>
 800c9c6:	f7fb fcdf 	bl	8008388 <__sinit>
 800c9ca:	4b21      	ldr	r3, [pc, #132]	; (800ca50 <__swbuf_r+0x98>)
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	d12b      	bne.n	800ca28 <__swbuf_r+0x70>
 800c9d0:	686c      	ldr	r4, [r5, #4]
 800c9d2:	69a3      	ldr	r3, [r4, #24]
 800c9d4:	60a3      	str	r3, [r4, #8]
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	071a      	lsls	r2, r3, #28
 800c9da:	d52f      	bpl.n	800ca3c <__swbuf_r+0x84>
 800c9dc:	6923      	ldr	r3, [r4, #16]
 800c9de:	b36b      	cbz	r3, 800ca3c <__swbuf_r+0x84>
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	6820      	ldr	r0, [r4, #0]
 800c9e4:	1ac0      	subs	r0, r0, r3
 800c9e6:	6963      	ldr	r3, [r4, #20]
 800c9e8:	b2f6      	uxtb	r6, r6
 800c9ea:	4283      	cmp	r3, r0
 800c9ec:	4637      	mov	r7, r6
 800c9ee:	dc04      	bgt.n	800c9fa <__swbuf_r+0x42>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f7fe fb68 	bl	800b0c8 <_fflush_r>
 800c9f8:	bb30      	cbnz	r0, 800ca48 <__swbuf_r+0x90>
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	60a3      	str	r3, [r4, #8]
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	6022      	str	r2, [r4, #0]
 800ca06:	701e      	strb	r6, [r3, #0]
 800ca08:	6963      	ldr	r3, [r4, #20]
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	4283      	cmp	r3, r0
 800ca0e:	d004      	beq.n	800ca1a <__swbuf_r+0x62>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	07db      	lsls	r3, r3, #31
 800ca14:	d506      	bpl.n	800ca24 <__swbuf_r+0x6c>
 800ca16:	2e0a      	cmp	r6, #10
 800ca18:	d104      	bne.n	800ca24 <__swbuf_r+0x6c>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f7fe fb53 	bl	800b0c8 <_fflush_r>
 800ca22:	b988      	cbnz	r0, 800ca48 <__swbuf_r+0x90>
 800ca24:	4638      	mov	r0, r7
 800ca26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca28:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <__swbuf_r+0x9c>)
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	d101      	bne.n	800ca32 <__swbuf_r+0x7a>
 800ca2e:	68ac      	ldr	r4, [r5, #8]
 800ca30:	e7cf      	b.n	800c9d2 <__swbuf_r+0x1a>
 800ca32:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <__swbuf_r+0xa0>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	bf08      	it	eq
 800ca38:	68ec      	ldreq	r4, [r5, #12]
 800ca3a:	e7ca      	b.n	800c9d2 <__swbuf_r+0x1a>
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f000 f80c 	bl	800ca5c <__swsetup_r>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d0cb      	beq.n	800c9e0 <__swbuf_r+0x28>
 800ca48:	f04f 37ff 	mov.w	r7, #4294967295
 800ca4c:	e7ea      	b.n	800ca24 <__swbuf_r+0x6c>
 800ca4e:	bf00      	nop
 800ca50:	0800cf14 	.word	0x0800cf14
 800ca54:	0800cf34 	.word	0x0800cf34
 800ca58:	0800cef4 	.word	0x0800cef4

0800ca5c <__swsetup_r>:
 800ca5c:	4b32      	ldr	r3, [pc, #200]	; (800cb28 <__swsetup_r+0xcc>)
 800ca5e:	b570      	push	{r4, r5, r6, lr}
 800ca60:	681d      	ldr	r5, [r3, #0]
 800ca62:	4606      	mov	r6, r0
 800ca64:	460c      	mov	r4, r1
 800ca66:	b125      	cbz	r5, 800ca72 <__swsetup_r+0x16>
 800ca68:	69ab      	ldr	r3, [r5, #24]
 800ca6a:	b913      	cbnz	r3, 800ca72 <__swsetup_r+0x16>
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	f7fb fc8b 	bl	8008388 <__sinit>
 800ca72:	4b2e      	ldr	r3, [pc, #184]	; (800cb2c <__swsetup_r+0xd0>)
 800ca74:	429c      	cmp	r4, r3
 800ca76:	d10f      	bne.n	800ca98 <__swsetup_r+0x3c>
 800ca78:	686c      	ldr	r4, [r5, #4]
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca80:	0719      	lsls	r1, r3, #28
 800ca82:	d42c      	bmi.n	800cade <__swsetup_r+0x82>
 800ca84:	06dd      	lsls	r5, r3, #27
 800ca86:	d411      	bmi.n	800caac <__swsetup_r+0x50>
 800ca88:	2309      	movs	r3, #9
 800ca8a:	6033      	str	r3, [r6, #0]
 800ca8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	f04f 30ff 	mov.w	r0, #4294967295
 800ca96:	e03e      	b.n	800cb16 <__swsetup_r+0xba>
 800ca98:	4b25      	ldr	r3, [pc, #148]	; (800cb30 <__swsetup_r+0xd4>)
 800ca9a:	429c      	cmp	r4, r3
 800ca9c:	d101      	bne.n	800caa2 <__swsetup_r+0x46>
 800ca9e:	68ac      	ldr	r4, [r5, #8]
 800caa0:	e7eb      	b.n	800ca7a <__swsetup_r+0x1e>
 800caa2:	4b24      	ldr	r3, [pc, #144]	; (800cb34 <__swsetup_r+0xd8>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	bf08      	it	eq
 800caa8:	68ec      	ldreq	r4, [r5, #12]
 800caaa:	e7e6      	b.n	800ca7a <__swsetup_r+0x1e>
 800caac:	0758      	lsls	r0, r3, #29
 800caae:	d512      	bpl.n	800cad6 <__swsetup_r+0x7a>
 800cab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab2:	b141      	cbz	r1, 800cac6 <__swsetup_r+0x6a>
 800cab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cab8:	4299      	cmp	r1, r3
 800caba:	d002      	beq.n	800cac2 <__swsetup_r+0x66>
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff fbc3 	bl	800c248 <_free_r>
 800cac2:	2300      	movs	r3, #0
 800cac4:	6363      	str	r3, [r4, #52]	; 0x34
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	2300      	movs	r3, #0
 800cad0:	6063      	str	r3, [r4, #4]
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	f043 0308 	orr.w	r3, r3, #8
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	6923      	ldr	r3, [r4, #16]
 800cae0:	b94b      	cbnz	r3, 800caf6 <__swsetup_r+0x9a>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caec:	d003      	beq.n	800caf6 <__swsetup_r+0x9a>
 800caee:	4621      	mov	r1, r4
 800caf0:	4630      	mov	r0, r6
 800caf2:	f000 f84d 	bl	800cb90 <__smakebuf_r>
 800caf6:	89a0      	ldrh	r0, [r4, #12]
 800caf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cafc:	f010 0301 	ands.w	r3, r0, #1
 800cb00:	d00a      	beq.n	800cb18 <__swsetup_r+0xbc>
 800cb02:	2300      	movs	r3, #0
 800cb04:	60a3      	str	r3, [r4, #8]
 800cb06:	6963      	ldr	r3, [r4, #20]
 800cb08:	425b      	negs	r3, r3
 800cb0a:	61a3      	str	r3, [r4, #24]
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	b943      	cbnz	r3, 800cb22 <__swsetup_r+0xc6>
 800cb10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb14:	d1ba      	bne.n	800ca8c <__swsetup_r+0x30>
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	0781      	lsls	r1, r0, #30
 800cb1a:	bf58      	it	pl
 800cb1c:	6963      	ldrpl	r3, [r4, #20]
 800cb1e:	60a3      	str	r3, [r4, #8]
 800cb20:	e7f4      	b.n	800cb0c <__swsetup_r+0xb0>
 800cb22:	2000      	movs	r0, #0
 800cb24:	e7f7      	b.n	800cb16 <__swsetup_r+0xba>
 800cb26:	bf00      	nop
 800cb28:	20000010 	.word	0x20000010
 800cb2c:	0800cf14 	.word	0x0800cf14
 800cb30:	0800cf34 	.word	0x0800cf34
 800cb34:	0800cef4 	.word	0x0800cef4

0800cb38 <abort>:
 800cb38:	b508      	push	{r3, lr}
 800cb3a:	2006      	movs	r0, #6
 800cb3c:	f000 f898 	bl	800cc70 <raise>
 800cb40:	2001      	movs	r0, #1
 800cb42:	f7f4 ffa7 	bl	8001a94 <_exit>

0800cb46 <__swhatbuf_r>:
 800cb46:	b570      	push	{r4, r5, r6, lr}
 800cb48:	460e      	mov	r6, r1
 800cb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	b096      	sub	sp, #88	; 0x58
 800cb52:	4614      	mov	r4, r2
 800cb54:	461d      	mov	r5, r3
 800cb56:	da08      	bge.n	800cb6a <__swhatbuf_r+0x24>
 800cb58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	602a      	str	r2, [r5, #0]
 800cb60:	061a      	lsls	r2, r3, #24
 800cb62:	d410      	bmi.n	800cb86 <__swhatbuf_r+0x40>
 800cb64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb68:	e00e      	b.n	800cb88 <__swhatbuf_r+0x42>
 800cb6a:	466a      	mov	r2, sp
 800cb6c:	f000 f89c 	bl	800cca8 <_fstat_r>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	dbf1      	blt.n	800cb58 <__swhatbuf_r+0x12>
 800cb74:	9a01      	ldr	r2, [sp, #4]
 800cb76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb7e:	425a      	negs	r2, r3
 800cb80:	415a      	adcs	r2, r3
 800cb82:	602a      	str	r2, [r5, #0]
 800cb84:	e7ee      	b.n	800cb64 <__swhatbuf_r+0x1e>
 800cb86:	2340      	movs	r3, #64	; 0x40
 800cb88:	2000      	movs	r0, #0
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	b016      	add	sp, #88	; 0x58
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}

0800cb90 <__smakebuf_r>:
 800cb90:	898b      	ldrh	r3, [r1, #12]
 800cb92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb94:	079d      	lsls	r5, r3, #30
 800cb96:	4606      	mov	r6, r0
 800cb98:	460c      	mov	r4, r1
 800cb9a:	d507      	bpl.n	800cbac <__smakebuf_r+0x1c>
 800cb9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	6123      	str	r3, [r4, #16]
 800cba4:	2301      	movs	r3, #1
 800cba6:	6163      	str	r3, [r4, #20]
 800cba8:	b002      	add	sp, #8
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}
 800cbac:	ab01      	add	r3, sp, #4
 800cbae:	466a      	mov	r2, sp
 800cbb0:	f7ff ffc9 	bl	800cb46 <__swhatbuf_r>
 800cbb4:	9900      	ldr	r1, [sp, #0]
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7fb fce1 	bl	8008580 <_malloc_r>
 800cbbe:	b948      	cbnz	r0, 800cbd4 <__smakebuf_r+0x44>
 800cbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc4:	059a      	lsls	r2, r3, #22
 800cbc6:	d4ef      	bmi.n	800cba8 <__smakebuf_r+0x18>
 800cbc8:	f023 0303 	bic.w	r3, r3, #3
 800cbcc:	f043 0302 	orr.w	r3, r3, #2
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	e7e3      	b.n	800cb9c <__smakebuf_r+0xc>
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <__smakebuf_r+0x7c>)
 800cbd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	6020      	str	r0, [r4, #0]
 800cbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe0:	81a3      	strh	r3, [r4, #12]
 800cbe2:	9b00      	ldr	r3, [sp, #0]
 800cbe4:	6163      	str	r3, [r4, #20]
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	6120      	str	r0, [r4, #16]
 800cbea:	b15b      	cbz	r3, 800cc04 <__smakebuf_r+0x74>
 800cbec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f000 f86b 	bl	800cccc <_isatty_r>
 800cbf6:	b128      	cbz	r0, 800cc04 <__smakebuf_r+0x74>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f023 0303 	bic.w	r3, r3, #3
 800cbfe:	f043 0301 	orr.w	r3, r3, #1
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	89a0      	ldrh	r0, [r4, #12]
 800cc06:	4305      	orrs	r5, r0
 800cc08:	81a5      	strh	r5, [r4, #12]
 800cc0a:	e7cd      	b.n	800cba8 <__smakebuf_r+0x18>
 800cc0c:	08008321 	.word	0x08008321

0800cc10 <_malloc_usable_size_r>:
 800cc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc14:	1f18      	subs	r0, r3, #4
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	bfbc      	itt	lt
 800cc1a:	580b      	ldrlt	r3, [r1, r0]
 800cc1c:	18c0      	addlt	r0, r0, r3
 800cc1e:	4770      	bx	lr

0800cc20 <_raise_r>:
 800cc20:	291f      	cmp	r1, #31
 800cc22:	b538      	push	{r3, r4, r5, lr}
 800cc24:	4604      	mov	r4, r0
 800cc26:	460d      	mov	r5, r1
 800cc28:	d904      	bls.n	800cc34 <_raise_r+0x14>
 800cc2a:	2316      	movs	r3, #22
 800cc2c:	6003      	str	r3, [r0, #0]
 800cc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc36:	b112      	cbz	r2, 800cc3e <_raise_r+0x1e>
 800cc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc3c:	b94b      	cbnz	r3, 800cc52 <_raise_r+0x32>
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 f830 	bl	800cca4 <_getpid_r>
 800cc44:	462a      	mov	r2, r5
 800cc46:	4601      	mov	r1, r0
 800cc48:	4620      	mov	r0, r4
 800cc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc4e:	f000 b817 	b.w	800cc80 <_kill_r>
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d00a      	beq.n	800cc6c <_raise_r+0x4c>
 800cc56:	1c59      	adds	r1, r3, #1
 800cc58:	d103      	bne.n	800cc62 <_raise_r+0x42>
 800cc5a:	2316      	movs	r3, #22
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	2001      	movs	r0, #1
 800cc60:	e7e7      	b.n	800cc32 <_raise_r+0x12>
 800cc62:	2400      	movs	r4, #0
 800cc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc68:	4628      	mov	r0, r5
 800cc6a:	4798      	blx	r3
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7e0      	b.n	800cc32 <_raise_r+0x12>

0800cc70 <raise>:
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <raise+0xc>)
 800cc72:	4601      	mov	r1, r0
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	f7ff bfd3 	b.w	800cc20 <_raise_r>
 800cc7a:	bf00      	nop
 800cc7c:	20000010 	.word	0x20000010

0800cc80 <_kill_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_kill_r+0x20>)
 800cc84:	2300      	movs	r3, #0
 800cc86:	4604      	mov	r4, r0
 800cc88:	4608      	mov	r0, r1
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	602b      	str	r3, [r5, #0]
 800cc8e:	f7f4 fef1 	bl	8001a74 <_kill>
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	d102      	bne.n	800cc9c <_kill_r+0x1c>
 800cc96:	682b      	ldr	r3, [r5, #0]
 800cc98:	b103      	cbz	r3, 800cc9c <_kill_r+0x1c>
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	bf00      	nop
 800cca0:	20002eb8 	.word	0x20002eb8

0800cca4 <_getpid_r>:
 800cca4:	f7f4 bede 	b.w	8001a64 <_getpid>

0800cca8 <_fstat_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	; (800ccc8 <_fstat_r+0x20>)
 800ccac:	2300      	movs	r3, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f4 ff3c 	bl	8001b32 <_fstat>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_fstat_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_fstat_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20002eb8 	.word	0x20002eb8

0800cccc <_isatty_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d06      	ldr	r5, [pc, #24]	; (800cce8 <_isatty_r+0x1c>)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f4 ff3b 	bl	8001b52 <_isatty>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_isatty_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_isatty_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	20002eb8 	.word	0x20002eb8

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
