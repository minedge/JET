
EngineInterfaceBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0800d8c8  0800d8c8  0001d8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df5c  0800df5c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df5c  0800df5c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df64  0800df64  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df64  0800df64  0001df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df68  0800df68  0001df68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800df6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c98  200001e4  0800e150  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e7c  0800e150  00022e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f3b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000421e  00000000  00000000  0004414f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00048370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  00049f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005655  00000000  00000000  0004b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe71  00000000  00000000  00050ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d531e  00000000  00000000  00070e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014618c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c04  00000000  00000000  001461dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d8ac 	.word	0x0800d8ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800d8ac 	.word	0x0800d8ac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 ff59 	bl	8001f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f888 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f000 faac 	bl	80015b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001058:	f000 fa5e 	bl	8001518 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800105c:	f000 f90e 	bl	800127c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001060:	f000 fa0e 	bl	8001480 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001064:	f000 f9ba 	bl	80013dc <MX_TIM2_Init>
  MX_I2C1_Init();
 8001068:	f000 f8c8 	bl	80011fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800106c:	f005 f8e8 	bl	8006240 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Q_Sensors */
  Q_SensorsHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Sensors_attributes);
 8001070:	4a25      	ldr	r2, [pc, #148]	; (8001108 <main+0xc0>)
 8001072:	2114      	movs	r1, #20
 8001074:	2003      	movs	r0, #3
 8001076:	f005 f9da 	bl	800642e <osMessageQueueNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a23      	ldr	r2, [pc, #140]	; (800110c <main+0xc4>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Q_Commands */
  Q_CommandsHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Commands_attributes);
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <main+0xc8>)
 8001082:	2114      	movs	r1, #20
 8001084:	2003      	movs	r0, #3
 8001086:	f005 f9d2 	bl	800642e <osMessageQueueNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <main+0xcc>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of Q_Output */
  Q_OutputHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Output_attributes);
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <main+0xd0>)
 8001092:	2114      	movs	r1, #20
 8001094:	2003      	movs	r0, #3
 8001096:	f005 f9ca 	bl	800642e <osMessageQueueNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <main+0xd4>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of Q_Controller */
  Q_ControllerHandle = osMessageQueueNew (3, sizeof(MMS), &Q_Controller_attributes);
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <main+0xd8>)
 80010a2:	2114      	movs	r1, #20
 80010a4:	2003      	movs	r0, #3
 80010a6:	f005 f9c2 	bl	800642e <osMessageQueueNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <main+0xdc>)
 80010ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Commander */
  CommanderHandle = osThreadNew(StartCommander, NULL, &Commander_attributes);
 80010b0:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <main+0xe0>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	481d      	ldr	r0, [pc, #116]	; (800112c <main+0xe4>)
 80010b6:	f005 f90d 	bl	80062d4 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <main+0xe8>)
 80010be:	6013      	str	r3, [r2, #0]

  /* creation of Controller */
  ControllerHandle = osThreadNew(StartController, NULL, &Controller_attributes);
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <main+0xec>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	481c      	ldr	r0, [pc, #112]	; (8001138 <main+0xf0>)
 80010c6:	f005 f905 	bl	80062d4 <osThreadNew>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <main+0xf4>)
 80010ce:	6013      	str	r3, [r2, #0]

  /* creation of SensorCollector */
  SensorCollectorHandle = osThreadNew(StartSensorCollector, NULL, &SensorCollector_attributes);
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <main+0xf8>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	481b      	ldr	r0, [pc, #108]	; (8001144 <main+0xfc>)
 80010d6:	f005 f8fd 	bl	80062d4 <osThreadNew>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <main+0x100>)
 80010de:	6013      	str	r3, [r2, #0]

  /* creation of Output */
  OutputHandle = osThreadNew(StartOutput, NULL, &Output_attributes);
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <main+0x104>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <main+0x108>)
 80010e6:	f005 f8f5 	bl	80062d4 <osThreadNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <main+0x10c>)
 80010ee:	6013      	str	r3, [r2, #0]

  /* creation of MessageManager */
  MessageManagerHandle = osThreadNew(StartMessageManager, NULL, &MessageManager_attributes);
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <main+0x110>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <main+0x114>)
 80010f6:	f005 f8ed 	bl	80062d4 <osThreadNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a18      	ldr	r2, [pc, #96]	; (8001160 <main+0x118>)
 80010fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001100:	f005 f8c2 	bl	8006288 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001104:	e7fe      	b.n	8001104 <main+0xbc>
 8001106:	bf00      	nop
 8001108:	0800da14 	.word	0x0800da14
 800110c:	200011c4 	.word	0x200011c4
 8001110:	0800da2c 	.word	0x0800da2c
 8001114:	20001254 	.word	0x20001254
 8001118:	0800da44 	.word	0x0800da44
 800111c:	200012e4 	.word	0x200012e4
 8001120:	0800da5c 	.word	0x0800da5c
 8001124:	20001374 	.word	0x20001374
 8001128:	0800d960 	.word	0x0800d960
 800112c:	0800164d 	.word	0x0800164d
 8001130:	20000404 	.word	0x20000404
 8001134:	0800d984 	.word	0x0800d984
 8001138:	0800165d 	.word	0x0800165d
 800113c:	200006c4 	.word	0x200006c4
 8001140:	0800d9a8 	.word	0x0800d9a8
 8001144:	0800166d 	.word	0x0800166d
 8001148:	20000984 	.word	0x20000984
 800114c:	0800d9cc 	.word	0x0800d9cc
 8001150:	08001701 	.word	0x08001701
 8001154:	20000c44 	.word	0x20000c44
 8001158:	0800d9f0 	.word	0x0800d9f0
 800115c:	08001721 	.word	0x08001721
 8001160:	20000f04 	.word	0x20000f04

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2238      	movs	r2, #56	; 0x38
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f007 ffbb 	bl	80090ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001186:	2000      	movs	r0, #0
 8001188:	f001 fe18 	bl	8002dbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011a6:	2355      	movs	r3, #85	; 0x55
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 feb2 	bl	8002f24 <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011c6:	f000 fac5 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2303      	movs	r3, #3
 80011d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2104      	movs	r1, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f9b6 	bl	8003554 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ee:	f000 fab1 	bl	8001754 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_I2C1_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <MX_I2C1_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_I2C1_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <MX_I2C1_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_I2C1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_I2C1_Init+0x74>)
 8001238:	f001 f92c 	bl	8002494 <HAL_I2C_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001242:	f000 fa87 	bl	8001754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_I2C1_Init+0x74>)
 800124a:	f001 fd1f 	bl	8002c8c <HAL_I2CEx_ConfigAnalogFilter>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 fa7e 	bl	8001754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_I2C1_Init+0x74>)
 800125c:	f001 fd61 	bl	8002d22 <HAL_I2CEx_ConfigDigitalFilter>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fa75 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000200 	.word	0x20000200
 8001274:	40005400 	.word	0x40005400
 8001278:	10802d9b 	.word	0x10802d9b

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09c      	sub	sp, #112	; 0x70
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2234      	movs	r2, #52	; 0x34
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 ff19 	bl	80090ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012be:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012c4:	22a9      	movs	r2, #169	; 0xa9
 80012c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012d0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80012d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e8:	483a      	ldr	r0, [pc, #232]	; (80013d4 <MX_TIM1_Init+0x158>)
 80012ea:	f002 fd71 	bl	8003dd0 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012f4:	f000 fa2e 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001302:	4619      	mov	r1, r3
 8001304:	4833      	ldr	r0, [pc, #204]	; (80013d4 <MX_TIM1_Init+0x158>)
 8001306:	f003 fa1b 	bl	8004740 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001310:	f000 fa20 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001314:	482f      	ldr	r0, [pc, #188]	; (80013d4 <MX_TIM1_Init+0x158>)
 8001316:	f002 fe1d 	bl	8003f54 <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001320:	f000 fa18 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001330:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001334:	4619      	mov	r1, r3
 8001336:	4827      	ldr	r0, [pc, #156]	; (80013d4 <MX_TIM1_Init+0x158>)
 8001338:	f003 ff6c 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001342:	f000 fa07 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2360      	movs	r3, #96	; 0x60
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001362:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_TIM1_Init+0x158>)
 800136c:	f003 f8d4 	bl	8004518 <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001376:	f000 f9ed 	bl	8001754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM1_Init+0x158>)
 80013b8:	f003 ffae 	bl	8005318 <HAL_TIMEx_ConfigBreakDeadTime>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80013c2:	f000 f9c7 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM1_Init+0x158>)
 80013c8:	f000 faa2 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3770      	adds	r7, #112	; 0x70
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000024c 	.word	0x2000024c
 80013d8:	40012c00 	.word	0x40012c00

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_TIM2_Init+0xa0>)
 80013fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM2_Init+0xa0>)
 8001404:	2210      	movs	r2, #16
 8001406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_TIM2_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM2_Init+0xa0>)
 8001410:	2263      	movs	r2, #99	; 0x63
 8001412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM2_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_TIM2_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <MX_TIM2_Init+0xa0>)
 8001422:	f002 fcd5 	bl	8003dd0 <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800142c:	f000 f992 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	4619      	mov	r1, r3
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <MX_TIM2_Init+0xa0>)
 800143e:	f003 f97f 	bl	8004740 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001448:	f000 f984 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <MX_TIM2_Init+0xa0>)
 800145a:	f003 fedb 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 f976 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_MspInit(&htim2);
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_TIM2_Init+0xa0>)
 800146a:	f000 fa19 	bl	80018a0 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM2_Init+0xa0>)
 8001470:	f002 fd06 	bl	8003e80 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000298 	.word	0x20000298

08001480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_USART1_UART_Init+0x90>)
 8001486:	4a23      	ldr	r2, [pc, #140]	; (8001514 <MX_USART1_UART_Init+0x94>)
 8001488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_USART1_UART_Init+0x90>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <MX_USART1_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_USART1_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014ca:	f004 f80b 	bl	80054e4 <HAL_UART_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014d4:	f000 f93e 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014dc:	f004 fda2 	bl	8006024 <HAL_UARTEx_SetTxFifoThreshold>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014e6:	f000 f935 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014ee:	f004 fdd7 	bl	80060a0 <HAL_UARTEx_SetRxFifoThreshold>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014f8:	f000 f92c 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_USART1_UART_Init+0x90>)
 80014fe:	f004 fd58 	bl	8005fb2 <HAL_UARTEx_DisableFifoMode>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001508:	f000 f924 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002e4 	.word	0x200002e4
 8001514:	40013800 	.word	0x40013800

08001518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <MX_USART2_UART_Init+0x94>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001562:	f003 ffbf 	bl	80054e4 <HAL_UART_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800156c:	f000 f8f2 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001570:	2100      	movs	r1, #0
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001574:	f004 fd56 	bl	8006024 <HAL_UARTEx_SetTxFifoThreshold>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800157e:	f000 f8e9 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001586:	f004 fd8b 	bl	80060a0 <HAL_UARTEx_SetRxFifoThreshold>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001590:	f000 f8e0 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_USART2_UART_Init+0x90>)
 8001596:	f004 fd0c 	bl	8005fb2 <HAL_UARTEx_DisableFifoMode>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 f8d8 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000374 	.word	0x20000374
 80015ac:	40004400 	.word	0x40004400

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_GPIO_Init+0x94>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <MX_GPIO_Init+0x94>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_GPIO_Init+0x94>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_GPIO_Init+0x94>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_GPIO_Init+0x94>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_GPIO_Init+0x94>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	4812      	ldr	r0, [pc, #72]	; (8001648 <MX_GPIO_Init+0x98>)
 80015fe:	f000 ff31 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001602:	2302      	movs	r3, #2
 8001604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f000 fd8a 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_GPIO_Init+0x98>)
 8001636:	f000 fd7b 	bl	8002130 <HAL_GPIO_Init>

}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	48000400 	.word	0x48000400

0800164c <StartCommander>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommander */
void StartCommander(void *argument)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f004 fecf 	bl	80063f8 <osDelay>
 800165a:	e7fb      	b.n	8001654 <StartCommander+0x8>

0800165c <StartController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartController */
void StartController(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartController */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001664:	2001      	movs	r0, #1
 8001666:	f004 fec7 	bl	80063f8 <osDelay>
 800166a:	e7fb      	b.n	8001664 <StartController+0x8>

0800166c <StartSensorCollector>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorCollector */
void StartSensorCollector(void *argument)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorCollector */
  int value = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	647b      	str	r3, [r7, #68]	; 0x44
  ENGINE_STATE state;
  int rpm_time = 0, real_count = 0, pre_count = 1;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001680:	2301      	movs	r3, #1
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t buffer[30] = {0,};
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	831a      	strh	r2, [r3, #24]

  /* Infinite loop */
  for(;;)
  {
	value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800169c:	2102      	movs	r1, #2
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f000 fec7 	bl	8002434 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44

	state = getState();
 80016aa:	f000 fbdf 	bl	8001e6c <getState>
 80016ae:	eef0 6a40 	vmov.f32	s13, s0
 80016b2:	eeb0 7a60 	vmov.f32	s14, s1
 80016b6:	eef0 7a41 	vmov.f32	s15, s2
 80016ba:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80016be:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80016c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	sprintf((char*)buffer, "%d | %f\r\n", value, state.temperature);
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff65 	bl	8000598 <__aeabi_f2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f107 000c 	add.w	r0, r7, #12
 80016d6:	e9cd 2300 	strd	r2, r3, [sp]
 80016da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016dc:	4906      	ldr	r1, [pc, #24]	; (80016f8 <StartSensorCollector+0x8c>)
 80016de:	f008 fc9d 	bl	800a01c <siprintf>
	HAL_UART_Transmit(&huart2, buffer, 30, HAL_TIMEOUT);
 80016e2:	f107 010c 	add.w	r1, r7, #12
 80016e6:	2303      	movs	r3, #3
 80016e8:	221e      	movs	r2, #30
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <StartSensorCollector+0x90>)
 80016ec:	f003 ff4a 	bl	8005584 <HAL_UART_Transmit>

    osDelay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f004 fe81 	bl	80063f8 <osDelay>
	value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80016f6:	e7d1      	b.n	800169c <StartSensorCollector+0x30>
 80016f8:	0800d93c 	.word	0x0800d93c
 80016fc:	20000374 	.word	0x20000374

08001700 <StartOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutput */
void StartOutput(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutput */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001708:	2100      	movs	r1, #0
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <StartOutput+0x1c>)
 800170c:	f002 fc84 	bl	8004018 <HAL_TIM_PWM_Start>
  htim1.Instance->CCR1 =  1000;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <StartOutput+0x1c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  for(;;)
 800171a:	e7fe      	b.n	800171a <StartOutput+0x1a>
 800171c:	2000024c 	.word	0x2000024c

08001720 <StartMessageManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessageManager */
void StartMessageManager(void *argument)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMessageManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f004 fe65 	bl	80063f8 <osDelay>
 800172e:	e7fb      	b.n	8001728 <StartMessageManager+0x8>

08001730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001742:	f000 fbf7 	bl	8001f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40013400 	.word	0x40013400

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_MspInit+0x50>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_MspInit+0x50>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x50>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_MspInit+0x50>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_MspInit+0x50>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x50>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	210f      	movs	r1, #15
 800179a:	f06f 0001 	mvn.w	r0, #1
 800179e:	f000 fc9f 	bl	80020e0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017a2:	f001 fbaf 	bl	8002f04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09c      	sub	sp, #112	; 0x70
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	2244      	movs	r2, #68	; 0x44
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 fc8a 	bl	80090ee <memset>
  if(hi2c->Instance==I2C1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <HAL_I2C_MspInit+0xe0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d153      	bne.n	800188c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 f8fd 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017fc:	f7ff ffaa 	bl	8001754 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001834:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001842:	2304      	movs	r3, #4
 8001844:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f000 fc6e 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001858:	2312      	movs	r3, #18
 800185a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001864:	2304      	movs	r3, #4
 8001866:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800186c:	4619      	mov	r1, r3
 800186e:	480b      	ldr	r0, [pc, #44]	; (800189c <HAL_I2C_MspInit+0xe8>)
 8001870:	f000 fc5e 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 800187a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187e:	6593      	str	r3, [r2, #88]	; 0x58
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_I2C_MspInit+0xe4>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3770      	adds	r7, #112	; 0x70
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40005400 	.word	0x40005400
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10c      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018bc:	6613      	str	r3, [r2, #96]	; 0x60
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ca:	e018      	b.n	80018fe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	d113      	bne.n	80018fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2105      	movs	r1, #5
 80018f2:	201c      	movs	r0, #28
 80018f4:	f000 fbf4 	bl	80020e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f8:	201c      	movs	r0, #28
 80018fa:	f000 fc0b 	bl	8002114 <HAL_NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_TIM_MspPostInit+0x68>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11d      	bne.n	800196e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_TIM_MspPostInit+0x6c>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_TIM_MspPostInit+0x6c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_TIM_MspPostInit+0x6c>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Start_Motor_Pin;
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800195c:	2306      	movs	r3, #6
 800195e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Start_Motor_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f000 fbe1 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09c      	sub	sp, #112	; 0x70
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	2244      	movs	r2, #68	; 0x44
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f007 fba4 	bl	80090ee <memset>
  if(huart->Instance==USART1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <HAL_UART_MspInit+0x124>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d138      	bne.n	8001a22 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 f817 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fec4 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 80019ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d0:	4a35      	ldr	r2, [pc, #212]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6613      	str	r3, [r2, #96]	; 0x60
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 80019da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1c:	f000 fb88 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a20:	e03b      	b.n	8001a9a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_UART_MspInit+0x12c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d136      	bne.n	8001a9a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 ffd9 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001a44:	f7ff fe86 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 8001a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a52:	6593      	str	r3, [r2, #88]	; 0x58
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_UART_MspInit+0x128>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001a78:	230c      	movs	r3, #12
 8001a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f000 fb4b 	bl	8002130 <HAL_GPIO_Init>
}
 8001a9a:	bf00      	nop
 8001a9c:	3770      	adds	r7, #112	; 0x70
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40004400 	.word	0x40004400

08001ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_InitTick+0xcc>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <HAL_InitTick+0xcc>)
 8001acc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_InitTick+0xcc>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ade:	f107 020c 	add.w	r2, r7, #12
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 ff09 	bl	8003900 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001aee:	f001 fef1 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8001af2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_InitTick+0xd0>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9b      	lsrs	r3, r3, #18
 8001afe:	3b01      	subs	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b04:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <HAL_InitTick+0xd8>)
 8001b06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0e:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 8001b22:	4818      	ldr	r0, [pc, #96]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b24:	f002 f954 	bl	8003dd0 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11b      	bne.n	8001b6e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8001b36:	4813      	ldr	r0, [pc, #76]	; (8001b84 <HAL_InitTick+0xd4>)
 8001b38:	f002 f9a2 	bl	8003e80 <HAL_TIM_Base_Start_IT>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d111      	bne.n	8001b6e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001b4a:	202c      	movs	r0, #44	; 0x2c
 8001b4c:	f000 fae2 	bl	8002114 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d808      	bhi.n	8001b68 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8001b56:	2200      	movs	r2, #0
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	202c      	movs	r0, #44	; 0x2c
 8001b5c:	f000 fac0 	bl	80020e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_InitTick+0xdc>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e002      	b.n	8001b6e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	431bde83 	.word	0x431bde83
 8001b84:	20001404 	.word	0x20001404
 8001b88:	40013400 	.word	0x40013400
 8001b8c:	20000004 	.word	0x20000004

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f002 fb29 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000298 	.word	0x20000298

08001bd0 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM8_UP_IRQHandler+0x10>)
 8001bd6:	f002 fb1f 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20001404 	.word	0x20001404

08001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_kill>:

int _kill(int pid, int sig)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bfe:	f007 f945 	bl	8008e8c <__errno>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2216      	movs	r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
	return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_exit>:

void _exit (int status)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffe7 	bl	8001bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c26:	e7fe      	b.n	8001c26 <_exit+0x12>

08001c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
	}

return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
	}
	return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f007 f8aa 	bl	8008e8c <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20008000 	.word	0x20008000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20001450 	.word	0x20001450
 8001d6c:	20002e80 	.word	0x20002e80

08001d70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <readCelsius>:

extern I2C_HandleTypeDef hi2c1;

unsigned char rxbuf[4] = {0};

float readCelsius(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af04      	add	r7, sp, #16

  HAL_I2C_Mem_Read(&hi2c1, MAX31855_Addr, 0x00, I2C_MEMADD_SIZE_8BIT, rxbuf, 4, HAL_TIMEOUT);
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2304      	movs	r3, #4
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <readCelsius+0xcc>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2301      	movs	r3, #1
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	482d      	ldr	r0, [pc, #180]	; (8001e64 <readCelsius+0xd0>)
 8001dae:	f000 fc01 	bl	80025b4 <HAL_I2C_Mem_Read>

  if(rxbuf[3]&0x7){
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <readCelsius+0xcc>)
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <readCelsius+0x30>
	return 0;
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e046      	b.n	8001e52 <readCelsius+0xbe>
  }

  if(rxbuf[0]&0x80){
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <readCelsius+0xcc>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da27      	bge.n	8001e1e <readCelsius+0x8a>
	rxbuf[0] = 0xff - rxbuf[0];
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <readCelsius+0xcc>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <readCelsius+0xcc>)
 8001dd8:	701a      	strb	r2, [r3, #0]
	rxbuf[1] = 0xff - rxbuf[1];
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <readCelsius+0xcc>)
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <readCelsius+0xcc>)
 8001de4:	705a      	strb	r2, [r3, #1]
	float temp =  -((((rxbuf[0] << 8)|(rxbuf[1] & 0xfc)) >> 2) + 1) * 0.25;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <readCelsius+0xcc>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	021a      	lsls	r2, r3, #8
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <readCelsius+0xcc>)
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001df4:	4313      	orrs	r3, r2
 8001df6:	109b      	asrs	r3, r3, #2
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fbba 	bl	8000574 <__aeabi_i2d>
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <readCelsius+0xd4>)
 8001e06:	f7fe fc1f 	bl	8000648 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe ff11 	bl	8000c38 <__aeabi_d2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	603b      	str	r3, [r7, #0]
	return temp;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	e019      	b.n	8001e52 <readCelsius+0xbe>
  }

  float temp =(((rxbuf[0] << 8 )| (rxbuf[1] & 0xfc)) >> 2)*0.25;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <readCelsius+0xcc>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	021a      	lsls	r2, r3, #8
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <readCelsius+0xcc>)
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	109b      	asrs	r3, r3, #2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb9f 	bl	8000574 <__aeabi_i2d>
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <readCelsius+0xd4>)
 8001e3c:	f7fe fc04 	bl	8000648 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fef6 	bl	8000c38 <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	607b      	str	r3, [r7, #4]

  return temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20001454 	.word	0x20001454
 8001e64:	20000200 	.word	0x20000200
 8001e68:	3fd00000 	.word	0x3fd00000

08001e6c <getState>:
 */


#include "sensor/sensor.h"

ENGINE_STATE getState(){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
	ENGINE_STATE state;

	state.temperature = readCelsius();
 8001e72:	f7ff ff8f 	bl	8001d94 <readCelsius>
 8001e76:	eef0 7a40 	vmov.f32	s15, s0
 8001e7a:	edc7 7a05 	vstr	s15, [r7, #20]

	return state;
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	f107 0210 	add.w	r2, r7, #16
 8001e86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e8c:	69f9      	ldr	r1, [r7, #28]
 8001e8e:	6a3a      	ldr	r2, [r7, #32]
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	ee06 1a90 	vmov	s13, r1
 8001e96:	ee07 2a10 	vmov	s14, r2
 8001e9a:	ee07 3a90 	vmov	s15, r3
}
 8001e9e:	eeb0 0a66 	vmov.f32	s0, s13
 8001ea2:	eef0 0a47 	vmov.f32	s1, s14
 8001ea6:	eeb0 1a67 	vmov.f32	s2, s15
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb0:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ecc:	4c0b      	ldr	r4, [pc, #44]	; (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eda:	f7ff ff49 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f007 f8d1 	bl	8009084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7ff f8b1 	bl	8001048 <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   r0, =_estack
 8001ee8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ef4:	0800df6c 	.word	0x0800df6c
  ldr r2, =_sbss
 8001ef8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001efc:	20002e7c 	.word	0x20002e7c

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>

08001f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f8dc 	bl	80020ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f12:	200f      	movs	r0, #15
 8001f14:	f7ff fdcc 	bl	8001ab0 <HAL_InitTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e001      	b.n	8001f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f24:	f7ff fc1c 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f28:	79fb      	ldrb	r3, [r7, #7]

}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_IncTick+0x1c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_IncTick+0x1c>)
 8001f44:	6013      	str	r3, [r2, #0]
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20001458 	.word	0x20001458
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20001458 	.word	0x20001458

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff4c 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ee:	f7ff ff63 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 80020f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7ff ffb3 	bl	8002064 <NVIC_EncodePriority>
 80020fe:	4602      	mov	r2, r0
 8002100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff82 	bl	8002010 <__NVIC_SetPriority>
}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff56 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800213e:	e15a      	b.n	80023f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 814c 	beq.w	80023f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800216c:	2b02      	cmp	r3, #2
 800216e:	d130      	bne.n	80021d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a6:	2201      	movs	r2, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0201 	and.w	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d017      	beq.n	800220e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d123      	bne.n	8002262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0203 	and.w	r2, r3, #3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a6 	beq.w	80023f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_GPIO_Init+0x2e4>)
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	4a5a      	ldr	r2, [pc, #360]	; (8002414 <HAL_GPIO_Init+0x2e4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6613      	str	r3, [r2, #96]	; 0x60
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_GPIO_Init+0x2e4>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022bc:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_GPIO_Init+0x2e8>)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e6:	d01f      	beq.n	8002328 <HAL_GPIO_Init+0x1f8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_GPIO_Init+0x2ec>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d019      	beq.n	8002324 <HAL_GPIO_Init+0x1f4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <HAL_GPIO_Init+0x2f0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <HAL_GPIO_Init+0x1f0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_GPIO_Init+0x2f4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00d      	beq.n	800231c <HAL_GPIO_Init+0x1ec>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_GPIO_Init+0x2f8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x1e8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2fc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_GPIO_Init+0x1e4>
 8002310:	2305      	movs	r3, #5
 8002312:	e00a      	b.n	800232a <HAL_GPIO_Init+0x1fa>
 8002314:	2306      	movs	r3, #6
 8002316:	e008      	b.n	800232a <HAL_GPIO_Init+0x1fa>
 8002318:	2304      	movs	r3, #4
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x1fa>
 800231c:	2303      	movs	r3, #3
 800231e:	e004      	b.n	800232a <HAL_GPIO_Init+0x1fa>
 8002320:	2302      	movs	r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x1fa>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_GPIO_Init+0x1fa>
 8002328:	2300      	movs	r3, #0
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233a:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_GPIO_Init+0x2e8>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_GPIO_Init+0x300>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800236c:	4a30      	ldr	r2, [pc, #192]	; (8002430 <HAL_GPIO_Init+0x300>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_GPIO_Init+0x300>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_GPIO_Init+0x300>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_GPIO_Init+0x300>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_GPIO_Init+0x300>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_GPIO_Init+0x300>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_GPIO_Init+0x300>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	f47f ae9d 	bne.w	8002140 <HAL_GPIO_Init+0x10>
  }
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000
 800241c:	48000400 	.word	0x48000400
 8002420:	48000800 	.word	0x48000800
 8002424:	48000c00 	.word	0x48000c00
 8002428:	48001000 	.word	0x48001000
 800242c:	48001400 	.word	0x48001400
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e001      	b.n	8002456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002480:	e002      	b.n	8002488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e081      	b.n	80025aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff f97a 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	e006      	b.n	800251c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800251a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d104      	bne.n	800252e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800252c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002540:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002550:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69d9      	ldr	r1, [r3, #28]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1a      	ldr	r2, [r3, #32]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	817b      	strh	r3, [r7, #10]
 80025c6:	460b      	mov	r3, r1
 80025c8:	813b      	strh	r3, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	f040 80fd 	bne.w	80027d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_I2C_Mem_Read+0x34>
 80025e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0f1      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Mem_Read+0x4e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0ea      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800260a:	f7ff fca5 	bl	8001f58 <HAL_GetTick>
 800260e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2319      	movs	r3, #25
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f95b 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d5      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2222      	movs	r2, #34	; 0x22
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a3a      	ldr	r2, [r7, #32]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800264c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002654:	88f8      	ldrh	r0, [r7, #6]
 8002656:	893a      	ldrh	r2, [r7, #8]
 8002658:	8979      	ldrh	r1, [r7, #10]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4603      	mov	r3, r0
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f8bf 	bl	80027e8 <I2C_RequestMemoryRead>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0ad      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2bff      	cmp	r3, #255	; 0xff
 8002684:	d90e      	bls.n	80026a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	22ff      	movs	r2, #255	; 0xff
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	b2da      	uxtb	r2, r3
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <HAL_I2C_Mem_Read+0x22c>)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fac3 	bl	8002c28 <I2C_TransferConfig>
 80026a2:	e00f      	b.n	80026c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	8979      	ldrh	r1, [r7, #10]
 80026b6:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <HAL_I2C_Mem_Read+0x22c>)
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fab2 	bl	8002c28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	2200      	movs	r2, #0
 80026cc:	2104      	movs	r1, #4
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f902 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07c      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d034      	beq.n	8002784 <HAL_I2C_Mem_Read+0x1d0>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d130      	bne.n	8002784 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	2200      	movs	r2, #0
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f8d3 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e04d      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d90e      	bls.n	8002764 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	22ff      	movs	r2, #255	; 0xff
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	b2da      	uxtb	r2, r3
 8002752:	8979      	ldrh	r1, [r7, #10]
 8002754:	2300      	movs	r3, #0
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fa63 	bl	8002c28 <I2C_TransferConfig>
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	b2da      	uxtb	r2, r3
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fa52 	bl	8002c28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d19a      	bne.n	80026c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f920 	bl	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e01a      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2220      	movs	r2, #32
 80027a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_I2C_Mem_Read+0x230>)
 80027b6:	400b      	ands	r3, r1
 80027b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	80002400 	.word	0x80002400
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <I2C_RequestMemoryRead+0xa4>)
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa0a 	bl	8002c28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f89d 	bl	8002958 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e02c      	b.n	8002882 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d105      	bne.n	800283a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800282e:	893b      	ldrh	r3, [r7, #8]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
 8002838:	e015      	b.n	8002866 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800283a:	893b      	ldrh	r3, [r7, #8]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	b29b      	uxth	r3, r3
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f883 	bl	8002958 <I2C_WaitOnTXISFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e012      	b.n	8002882 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800285c:	893b      	ldrh	r3, [r7, #8]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2200      	movs	r2, #0
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f831 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	80002000 	.word	0x80002000

08002890 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d103      	bne.n	80028ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2200      	movs	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d007      	beq.n	80028cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	619a      	str	r2, [r3, #24]
  }
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	e022      	b.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d01e      	beq.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff fb31 	bl	8001f58 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00f      	b.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d0cd      	beq.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002964:	e02c      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f870 	bl	8002a50 <I2C_IsErrorOccurred>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e02a      	b.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d01e      	beq.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7ff fae9 	bl	8001f58 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d113      	bne.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d1cb      	bne.n	8002966 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e4:	e028      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f830 	bl	8002a50 <I2C_IsErrorOccurred>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e026      	b.n	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff faad 	bl	8001f58 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d113      	bne.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d1cf      	bne.n	80029e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d075      	beq.n	8002b68 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2210      	movs	r2, #16
 8002a82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a84:	e056      	b.n	8002b34 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d052      	beq.n	8002b34 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7ff fa63 	bl	8001f58 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_IsErrorOccurred+0x54>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d147      	bne.n	8002b34 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac6:	d12e      	bne.n	8002b26 <I2C_IsErrorOccurred+0xd6>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ace:	d02a      	beq.n	8002b26 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d027      	beq.n	8002b26 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ae6:	f7ff fa37 	bl	8001f58 <HAL_GetTick>
 8002aea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aec:	e01b      	b.n	8002b26 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aee:	f7ff fa33 	bl	8001f58 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b19      	cmp	r3, #25
 8002afa:	d914      	bls.n	8002b26 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d1dc      	bne.n	8002aee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d003      	beq.n	8002b4a <I2C_IsErrorOccurred+0xfa>
 8002b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d09d      	beq.n	8002a86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01c      	beq.n	8002c18 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fe56 	bl	8002890 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <I2C_IsErrorOccurred+0x1d4>)
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	fe00e800 	.word	0xfe00e800

08002c28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	4613      	mov	r3, r2
 8002c38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c40:	7a7b      	ldrb	r3, [r7, #9]
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c48:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c56:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	0d5b      	lsrs	r3, r3, #21
 8002c62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <I2C_TransferConfig+0x60>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	ea02 0103 	and.w	r1, r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	03ff63ff 	.word	0x03ff63ff

08002c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d138      	bne.n	8002d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e032      	b.n	8002d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	; 0x24
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d139      	bne.n	8002dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e033      	b.n	8002dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d141      	bne.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dca:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d131      	bne.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df0:	4a41      	ldr	r2, [pc, #260]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2232      	movs	r2, #50	; 0x32
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	0c9b      	lsrs	r3, r3, #18
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	e002      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d102      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f2      	bne.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d158      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e057      	b.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e42:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e4c:	e04d      	b.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d141      	bne.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d131      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6a:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e74:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e7c:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2232      	movs	r2, #50	; 0x32
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	0c9b      	lsrs	r3, r3, #18
 8002e96:	3301      	adds	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9a:	e002      	b.n	8002ea2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eae:	d102      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f2      	bne.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec2:	d112      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e011      	b.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ed8:	e007      	b.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	20000000 	.word	0x20000000
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f12:	6093      	str	r3, [r2, #8]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40007000 	.word	0x40007000

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e306      	b.n	8003544 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d075      	beq.n	800302e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b97      	ldr	r3, [pc, #604]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b94      	ldr	r3, [pc, #592]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3e>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_OscConfig+0x44>
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b8d      	ldr	r3, [pc, #564]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e2e1      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x74>
 8002f8a:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a84      	ldr	r2, [pc, #528]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7e      	ldr	r2, [pc, #504]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7b      	ldr	r2, [pc, #492]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a77      	ldr	r2, [pc, #476]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a74      	ldr	r2, [pc, #464]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe ffbc 	bl	8001f58 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe ffb8 	bl	8001f58 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e2a6      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xc0>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe ffa8 	bl	8001f58 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe ffa4 	bl	8001f58 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e292      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301e:	4b60      	ldr	r3, [pc, #384]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0xe8>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d075      	beq.n	8003126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303a:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003044:	4b56      	ldr	r3, [pc, #344]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d102      	bne.n	800305a <HAL_RCC_OscConfig+0x136>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d002      	beq.n	8003060 <HAL_RCC_OscConfig+0x13c>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d11f      	bne.n	80030a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003060:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x154>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e265      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	4946      	ldr	r1, [pc, #280]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800308c:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fd0d 	bl	8001ab0 <HAL_InitTick>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d043      	beq.n	8003124 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e251      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3c      	ldr	r2, [pc, #240]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe ff50 	bl	8001f58 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe ff4c 	bl	8001f58 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e23a      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	492d      	ldr	r1, [pc, #180]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
 80030ee:	e01a      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 80030f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe ff2c 	bl	8001f58 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7fe ff28 	bl	8001f58 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e216      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1e0>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d041      	beq.n	80031b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01c      	beq.n	8003174 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 800313c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe ff05 	bl	8001f58 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003152:	f7fe ff01 	bl	8001f58 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1ef      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ef      	beq.n	8003152 <HAL_RCC_OscConfig+0x22e>
 8003172:	e020      	b.n	80031b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fee8 	bl	8001f58 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318a:	e00d      	b.n	80031a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe fee4 	bl	8001f58 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d906      	bls.n	80031a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1d2      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a8:	4b8c      	ldr	r3, [pc, #560]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ea      	bne.n	800318c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80a6 	beq.w	8003310 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031c8:	4b84      	ldr	r3, [pc, #528]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x2b4>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x2b6>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	4a7e      	ldr	r2, [pc, #504]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ea:	4b7c      	ldr	r3, [pc, #496]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031f6:	2301      	movs	r3, #1
 80031f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fa:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_RCC_OscConfig+0x4bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d118      	bne.n	8003238 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x4bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a75      	ldr	r2, [pc, #468]	; (80033e0 <HAL_RCC_OscConfig+0x4bc>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003212:	f7fe fea1 	bl	8001f58 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fe fe9d 	bl	8001f58 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e18b      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0x4bc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d108      	bne.n	8003252 <HAL_RCC_OscConfig+0x32e>
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a65      	ldr	r2, [pc, #404]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	e024      	b.n	800329c <HAL_RCC_OscConfig+0x378>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d110      	bne.n	800327c <HAL_RCC_OscConfig+0x358>
 800325a:	4b60      	ldr	r3, [pc, #384]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a5a      	ldr	r2, [pc, #360]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327a:	e00f      	b.n	800329c <HAL_RCC_OscConfig+0x378>
 800327c:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a56      	ldr	r2, [pc, #344]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe fe58 	bl	8001f58 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe fe54 	bl	8001f58 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e140      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ed      	beq.n	80032ac <HAL_RCC_OscConfig+0x388>
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe fe41 	bl	8001f58 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe fe3d 	bl	8001f58 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e129      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1ed      	bne.n	80032da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03c      	beq.n	8003396 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01c      	beq.n	800335e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003324:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332a:	4a2c      	ldr	r2, [pc, #176]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fe10 	bl	8001f58 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333c:	f7fe fe0c 	bl	8001f58 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0fa      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x418>
 800335c:	e01b      	b.n	8003396 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800335e:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe fdf3 	bl	8001f58 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003376:	f7fe fdef 	bl	8001f58 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0dd      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 800338a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ef      	bne.n	8003376 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80d1 	beq.w	8003542 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	f000 808b 	beq.w	80034c4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d15e      	bne.n	8003474 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe fdc9 	bl	8001f58 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	e00c      	b.n	80033e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fdc5 	bl	8001f58 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d905      	bls.n	80033e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0b3      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ec      	bne.n	80033ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f0:	4b56      	ldr	r3, [pc, #344]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_RCC_OscConfig+0x62c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6a11      	ldr	r1, [r2, #32]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003400:	3a01      	subs	r2, #1
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800340a:	0212      	lsls	r2, r2, #8
 800340c:	4311      	orrs	r1, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003412:	0852      	lsrs	r2, r2, #1
 8003414:	3a01      	subs	r2, #1
 8003416:	0552      	lsls	r2, r2, #21
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800341e:	0852      	lsrs	r2, r2, #1
 8003420:	3a01      	subs	r2, #1
 8003422:	0652      	lsls	r2, r2, #25
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800342a:	06d2      	lsls	r2, r2, #27
 800342c:	430a      	orrs	r2, r1
 800342e:	4947      	ldr	r1, [pc, #284]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003430:	4313      	orrs	r3, r2
 8003432:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b45      	ldr	r3, [pc, #276]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a44      	ldr	r2, [pc, #272]	; (800354c <HAL_RCC_OscConfig+0x628>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a41      	ldr	r2, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe fd84 	bl	8001f58 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe fd80 	bl	8001f58 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e06e      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x530>
 8003472:	e066      	b.n	8003542 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a34      	ldr	r2, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x628>)
 800347a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a31      	ldr	r2, [pc, #196]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_RCC_OscConfig+0x628>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a2e      	ldr	r2, [pc, #184]	; (800354c <HAL_RCC_OscConfig+0x628>)
 8003492:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fd5c 	bl	8001f58 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fd58 	bl	8001f58 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e046      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x580>
 80034c2:	e03e      	b.n	8003542 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e039      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <HAL_RCC_OscConfig+0x628>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d12c      	bne.n	800353e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	3b01      	subs	r3, #1
 80034f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d123      	bne.n	800353e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d11b      	bne.n	800353e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d113      	bne.n	800353e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d109      	bne.n	800353e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	019f800c 	.word	0x019f800c

08003554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e11e      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b91      	ldr	r3, [pc, #580]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d910      	bls.n	800359c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 020f 	bic.w	r2, r3, #15
 8003582:	498c      	ldr	r1, [pc, #560]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e106      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d073      	beq.n	8003690 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d129      	bne.n	8003604 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b0:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0f4      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035c0:	f000 f9d0 	bl	8003964 <RCC_GetSysClockFreqFromPLLSource>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4a7c      	ldr	r2, [pc, #496]	; (80037bc <HAL_RCC_ClockConfig+0x268>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d93f      	bls.n	800364e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ce:	4b7a      	ldr	r3, [pc, #488]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d033      	beq.n	800364e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d12f      	bne.n	800364e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f6:	4a70      	ldr	r2, [pc, #448]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80035f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e024      	b.n	800364e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360c:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0c6      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361c:	4b66      	ldr	r3, [pc, #408]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0be      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800362c:	f000 f8ce 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4a61      	ldr	r2, [pc, #388]	; (80037bc <HAL_RCC_ClockConfig+0x268>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d909      	bls.n	800364e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003642:	4a5d      	ldr	r2, [pc, #372]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 8003644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003648:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4957      	ldr	r1, [pc, #348]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fe fc7a 	bl	8001f58 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe fc76 	bl	8001f58 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e095      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a42      	ldr	r2, [pc, #264]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036c8:	4a3b      	ldr	r2, [pc, #236]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4936      	ldr	r1, [pc, #216]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d105      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ea:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4a32      	ldr	r2, [pc, #200]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 80036f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d21d      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003704:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 020f 	bic.w	r2, r3, #15
 800370c:	4929      	ldr	r1, [pc, #164]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003714:	f7fe fc20 	bl	8001f58 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fc1c 	bl	8001f58 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e03b      	b.n	80037aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d1ed      	bne.n	800371c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4917      	ldr	r1, [pc, #92]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490f      	ldr	r1, [pc, #60]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800377e:	f000 f825 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003782:	4602      	mov	r2, r0
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_ClockConfig+0x264>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	490c      	ldr	r1, [pc, #48]	; (80037c0 <HAL_RCC_ClockConfig+0x26c>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x270>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_ClockConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe f984 	bl	8001ab0 <HAL_InitTick>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40021000 	.word	0x40021000
 80037bc:	04c4b400 	.word	0x04c4b400
 80037c0:	0800da74 	.word	0x0800da74
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000004 	.word	0x20000004

080037cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d102      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037de:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e047      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e03e      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d136      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	3301      	adds	r3, #1
 8003818:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d10c      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	68d2      	ldr	r2, [r2, #12]
 800382c:	0a12      	lsrs	r2, r2, #8
 800382e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
      break;
 8003838:	e00c      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4a10      	ldr	r2, [pc, #64]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	0a12      	lsrs	r2, r2, #8
 8003848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
      break;
 8003852:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0e5b      	lsrs	r3, r3, #25
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e001      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003874:	693b      	ldr	r3, [r7, #16]
}
 8003876:	4618      	mov	r0, r3
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	00f42400 	.word	0x00f42400
 800388c:	007a1200 	.word	0x007a1200

08003890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038ac:	f7ff fff0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	0800da84 	.word	0x0800da84

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038d8:	f7ff ffda 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0adb      	lsrs	r3, r3, #11
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	0800da84 	.word	0x0800da84

08003900 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	220f      	movs	r2, #15
 800390e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_RCC_GetClockConfig+0x60>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 020f 	and.w	r2, r3, #15
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40022000 	.word	0x40022000

08003964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d10c      	bne.n	80039a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003992:	68d2      	ldr	r2, [r2, #12]
 8003994:	0a12      	lsrs	r2, r2, #8
 8003996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
    break;
 80039a0:	e00c      	b.n	80039bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0a12      	lsrs	r2, r2, #8
 80039b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    break;
 80039ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039d6:	687b      	ldr	r3, [r7, #4]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	00f42400 	.word	0x00f42400

080039f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f8:	2300      	movs	r3, #0
 80039fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039fc:	2300      	movs	r3, #0
 80039fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8098 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	4a3f      	ldr	r2, [pc, #252]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a46:	f7fe fa87 	bl	8001f58 <HAL_GetTick>
 8003a4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4c:	e009      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fe fa83 	bl	8001f58 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d902      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a60:	e005      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a62:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ef      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d159      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01e      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a90:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aac:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003abc:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fe fa43 	bl	8001f58 <HAL_GetTick>
 8003ad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad4:	e00b      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fe fa3f 	bl	8001f58 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d902      	bls.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	74fb      	strb	r3, [r7, #19]
            break;
 8003aec:	e006      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ec      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	74bb      	strb	r3, [r7, #18]
 8003b1e:	e005      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2c:	7c7b      	ldrb	r3, [r7, #17]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b32:	4ba6      	ldr	r3, [pc, #664]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4aa5      	ldr	r2, [pc, #660]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b4a:	4ba0      	ldr	r3, [pc, #640]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f023 0203 	bic.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	499c      	ldr	r1, [pc, #624]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b6c:	4b97      	ldr	r3, [pc, #604]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 020c 	bic.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4994      	ldr	r1, [pc, #592]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b8e:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	498b      	ldr	r1, [pc, #556]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bb0:	4b86      	ldr	r3, [pc, #536]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4983      	ldr	r1, [pc, #524]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd2:	4b7e      	ldr	r3, [pc, #504]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	497a      	ldr	r1, [pc, #488]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf4:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	4972      	ldr	r1, [pc, #456]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	4969      	ldr	r1, [pc, #420]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4961      	ldr	r1, [pc, #388]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	4958      	ldr	r1, [pc, #352]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	4950      	ldr	r1, [pc, #320]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cb4:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4942      	ldr	r1, [pc, #264]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	4926      	ldr	r1, [pc, #152]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	4918      	ldr	r1, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	490a      	ldr	r1, [pc, #40]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e049      	b.n	8003e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fd52 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 fdb8 	bl	8004984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04a      	b.n	8003f2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d013      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d115      	bne.n	8003f18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d015      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0xaa>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d011      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	e008      	b.n	8003f2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e000      	b.n	8003f2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	00010007 	.word	0x00010007

08003f54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e049      	b.n	8003ffa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f841 	bl	8004002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fcf6 	bl	8004984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_PWM_Start+0x24>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e03c      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d109      	bne.n	8004056 <HAL_TIM_PWM_Start+0x3e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e02f      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start+0x58>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e022      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d109      	bne.n	800408a <HAL_TIM_PWM_Start+0x72>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e015      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d109      	bne.n	80040a4 <HAL_TIM_PWM_Start+0x8c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e008      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e097      	b.n	80041ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0xb6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	e023      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0xc6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	e01b      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xd6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	e013      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0xe6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040fc:	e00b      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xf6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800410c:	e003      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f001 f852 	bl	80051c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a33      	ldr	r2, [pc, #204]	; (80041f8 <HAL_TIM_PWM_Start+0x1e0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_TIM_PWM_Start+0x13e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_TIM_PWM_Start+0x1e4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_TIM_PWM_Start+0x13e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a30      	ldr	r2, [pc, #192]	; (8004200 <HAL_TIM_PWM_Start+0x1e8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_TIM_PWM_Start+0x13e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2f      	ldr	r2, [pc, #188]	; (8004204 <HAL_TIM_PWM_Start+0x1ec>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIM_PWM_Start+0x13e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <HAL_TIM_PWM_Start+0x1f0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_Start+0x142>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_TIM_PWM_Start+0x144>
 800415a:	2300      	movs	r3, #0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800416e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <HAL_TIM_PWM_Start+0x1e0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <HAL_TIM_PWM_Start+0x194>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d013      	beq.n	80041ac <HAL_TIM_PWM_Start+0x194>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_TIM_PWM_Start+0x1f4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <HAL_TIM_PWM_Start+0x194>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_TIM_PWM_Start+0x1f8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_TIM_PWM_Start+0x194>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <HAL_TIM_PWM_Start+0x1e4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_TIM_PWM_Start+0x194>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <HAL_TIM_PWM_Start+0x1e8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d115      	bne.n	80041d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_TIM_PWM_Start+0x1fc>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d015      	beq.n	80041ea <HAL_TIM_PWM_Start+0x1d2>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d011      	beq.n	80041ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d6:	e008      	b.n	80041ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e000      	b.n	80041ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40013400 	.word	0x40013400
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	00010007 	.word	0x00010007

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fb74 	bl	8004948 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb66 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb77 	bl	800495c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb4a 	bl	8004948 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb3c 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb4d 	bl	800495c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb20 	bl	8004948 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fb12 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fb23 	bl	800495c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0210 	mvn.w	r2, #16
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2208      	movs	r2, #8
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 faf6 	bl	8004948 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fae8 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 faf9 	bl	800495c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd f9ca 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 f852 	bl	800546c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d10e      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 f845 	bl	8005480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d10e      	bne.n	8004422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d107      	bne.n	8004422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 faa7 	bl	8004970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0220 	mvn.w	r2, #32
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 f805 	bl	8005458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445c:	d10f      	bne.n	800447e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446c:	d107      	bne.n	800447e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f001 f80b 	bl	8005494 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448c:	d10f      	bne.n	80044ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d107      	bne.n	80044ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fffd 	bl	80054a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044bc:	d10f      	bne.n	80044de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044cc:	d107      	bne.n	80044de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 ffef 	bl	80054bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ec:	d10f      	bne.n	800450e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 ffe1 	bl	80054d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004532:	2302      	movs	r3, #2
 8004534:	e0ff      	b.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b14      	cmp	r3, #20
 8004542:	f200 80f0 	bhi.w	8004726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	080045a1 	.word	0x080045a1
 8004550:	08004727 	.word	0x08004727
 8004554:	08004727 	.word	0x08004727
 8004558:	08004727 	.word	0x08004727
 800455c:	080045e1 	.word	0x080045e1
 8004560:	08004727 	.word	0x08004727
 8004564:	08004727 	.word	0x08004727
 8004568:	08004727 	.word	0x08004727
 800456c:	08004623 	.word	0x08004623
 8004570:	08004727 	.word	0x08004727
 8004574:	08004727 	.word	0x08004727
 8004578:	08004727 	.word	0x08004727
 800457c:	08004663 	.word	0x08004663
 8004580:	08004727 	.word	0x08004727
 8004584:	08004727 	.word	0x08004727
 8004588:	08004727 	.word	0x08004727
 800458c:	080046a5 	.word	0x080046a5
 8004590:	08004727 	.word	0x08004727
 8004594:	08004727 	.word	0x08004727
 8004598:	08004727 	.word	0x08004727
 800459c:	080046e5 	.word	0x080046e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa7c 	bl	8004aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	619a      	str	r2, [r3, #24]
      break;
 80045de:	e0a5      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 faec 	bl	8004bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6999      	ldr	r1, [r3, #24]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	619a      	str	r2, [r3, #24]
      break;
 8004620:	e084      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fb55 	bl	8004cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0208 	orr.w	r2, r2, #8
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0204 	bic.w	r2, r2, #4
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	61da      	str	r2, [r3, #28]
      break;
 8004660:	e064      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fbbd 	bl	8004de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69d9      	ldr	r1, [r3, #28]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	021a      	lsls	r2, r3, #8
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	61da      	str	r2, [r3, #28]
      break;
 80046a2:	e043      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fc26 	bl	8004efc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80046e2:	e023      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fc6a 	bl	8004fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004724:	e002      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      break;
 800472a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop

08004740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e0de      	b.n	800491a <HAL_TIM_ConfigClockSource+0x1da>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800477a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a63      	ldr	r2, [pc, #396]	; (8004924 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	f000 80a9 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 800479c:	4a61      	ldr	r2, [pc, #388]	; (8004924 <HAL_TIM_ConfigClockSource+0x1e4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	f200 80ae 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 80047a4:	4a60      	ldr	r2, [pc, #384]	; (8004928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	f000 80a1 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 80047ac:	4a5e      	ldr	r2, [pc, #376]	; (8004928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	f200 80a6 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_TIM_ConfigClockSource+0x1ec>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	f000 8099 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 80047bc:	4a5b      	ldr	r2, [pc, #364]	; (800492c <HAL_TIM_ConfigClockSource+0x1ec>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f200 809e 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 80047c4:	4a5a      	ldr	r2, [pc, #360]	; (8004930 <HAL_TIM_ConfigClockSource+0x1f0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	f000 8091 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_TIM_ConfigClockSource+0x1f0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	f200 8096 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 80047d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047d8:	f000 8089 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 80047dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047e0:	f200 808e 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 80047e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e8:	d03e      	beq.n	8004868 <HAL_TIM_ConfigClockSource+0x128>
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ee:	f200 8087 	bhi.w	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	f000 8086 	beq.w	8004906 <HAL_TIM_ConfigClockSource+0x1c6>
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fe:	d87f      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004800:	2b70      	cmp	r3, #112	; 0x70
 8004802:	d01a      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xfa>
 8004804:	2b70      	cmp	r3, #112	; 0x70
 8004806:	d87b      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004808:	2b60      	cmp	r3, #96	; 0x60
 800480a:	d050      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x16e>
 800480c:	2b60      	cmp	r3, #96	; 0x60
 800480e:	d877      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d03c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x14e>
 8004814:	2b50      	cmp	r3, #80	; 0x50
 8004816:	d873      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d058      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x18e>
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d86f      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d064      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 8004824:	2b30      	cmp	r3, #48	; 0x30
 8004826:	d86b      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d060      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 800482c:	2b20      	cmp	r3, #32
 800482e:	d867      	bhi.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05c      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 8004834:	2b10      	cmp	r3, #16
 8004836:	d05a      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x1ae>
 8004838:	e062      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f000 fc9d 	bl	8005188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800485c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
      break;
 8004866:	e04f      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6899      	ldr	r1, [r3, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f000 fc86 	bl	8005188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488a:	609a      	str	r2, [r3, #8]
      break;
 800488c:	e03c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 fbf8 	bl	8005090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2150      	movs	r1, #80	; 0x50
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fc51 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 80048ac:	e02c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 fc17 	bl	80050ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2160      	movs	r1, #96	; 0x60
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fc41 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 80048cc:	e01c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fbd8 	bl	8005090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2140      	movs	r1, #64	; 0x40
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fc31 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 80048ec:	e00c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 fc28 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 80048fe:	e003      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e000      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	00100070 	.word	0x00100070
 8004928:	00100040 	.word	0x00100040
 800492c:	00100030 	.word	0x00100030
 8004930:	00100020 	.word	0x00100020

08004934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <TIM_Base_SetConfig+0x104>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0x38>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0x38>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <TIM_Base_SetConfig+0x108>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0x38>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a38      	ldr	r2, [pc, #224]	; (8004a90 <TIM_Base_SetConfig+0x10c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0x38>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a37      	ldr	r2, [pc, #220]	; (8004a94 <TIM_Base_SetConfig+0x110>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <TIM_Base_SetConfig+0x104>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01b      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d017      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <TIM_Base_SetConfig+0x108>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <TIM_Base_SetConfig+0x10c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <TIM_Base_SetConfig+0x110>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <TIM_Base_SetConfig+0x114>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <TIM_Base_SetConfig+0x118>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_Base_SetConfig+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a25      	ldr	r2, [pc, #148]	; (8004aa0 <TIM_Base_SetConfig+0x11c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <TIM_Base_SetConfig+0x104>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0xe8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <TIM_Base_SetConfig+0x110>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0xe8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <TIM_Base_SetConfig+0x114>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0xe8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <TIM_Base_SetConfig+0x118>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0xe8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <TIM_Base_SetConfig+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d103      	bne.n	8004a74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	615a      	str	r2, [r3, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40013400 	.word	0x40013400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800

08004aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 0302 	bic.w	r3, r3, #2
 8004af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <TIM_OC1_SetConfig+0x10c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00f      	beq.n	8004b24 <TIM_OC1_SetConfig+0x80>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <TIM_OC1_SetConfig+0x110>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <TIM_OC1_SetConfig+0x80>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <TIM_OC1_SetConfig+0x114>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d007      	beq.n	8004b24 <TIM_OC1_SetConfig+0x80>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <TIM_OC1_SetConfig+0x118>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC1_SetConfig+0x80>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <TIM_OC1_SetConfig+0x11c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10c      	bne.n	8004b3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 0308 	bic.w	r3, r3, #8
 8004b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 0304 	bic.w	r3, r3, #4
 8004b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <TIM_OC1_SetConfig+0x10c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00f      	beq.n	8004b66 <TIM_OC1_SetConfig+0xc2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <TIM_OC1_SetConfig+0x110>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00b      	beq.n	8004b66 <TIM_OC1_SetConfig+0xc2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <TIM_OC1_SetConfig+0x114>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_OC1_SetConfig+0xc2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <TIM_OC1_SetConfig+0x118>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC1_SetConfig+0xc2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <TIM_OC1_SetConfig+0x11c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d111      	bne.n	8004b8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40013400 	.word	0x40013400
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800

08004bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0210 	bic.w	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <TIM_OC2_SetConfig+0x100>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_OC2_SetConfig+0x6c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <TIM_OC2_SetConfig+0x104>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <TIM_OC2_SetConfig+0x100>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00f      	beq.n	8004c74 <TIM_OC2_SetConfig+0xb0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <TIM_OC2_SetConfig+0x104>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00b      	beq.n	8004c74 <TIM_OC2_SetConfig+0xb0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <TIM_OC2_SetConfig+0x108>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d007      	beq.n	8004c74 <TIM_OC2_SetConfig+0xb0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <TIM_OC2_SetConfig+0x10c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_OC2_SetConfig+0xb0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <TIM_OC2_SetConfig+0x110>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d113      	bne.n	8004c9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40013400 	.word	0x40013400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a27      	ldr	r2, [pc, #156]	; (8004dd4 <TIM_OC3_SetConfig+0xfc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_OC3_SetConfig+0x6a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a26      	ldr	r2, [pc, #152]	; (8004dd8 <TIM_OC3_SetConfig+0x100>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10d      	bne.n	8004d5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <TIM_OC3_SetConfig+0xfc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00f      	beq.n	8004d86 <TIM_OC3_SetConfig+0xae>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <TIM_OC3_SetConfig+0x100>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <TIM_OC3_SetConfig+0xae>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <TIM_OC3_SetConfig+0x104>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d007      	beq.n	8004d86 <TIM_OC3_SetConfig+0xae>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <TIM_OC3_SetConfig+0x108>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d003      	beq.n	8004d86 <TIM_OC3_SetConfig+0xae>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <TIM_OC3_SetConfig+0x10c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d113      	bne.n	8004dae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	621a      	str	r2, [r3, #32]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800

08004de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a28      	ldr	r2, [pc, #160]	; (8004ee8 <TIM_OC4_SetConfig+0x100>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_OC4_SetConfig+0x6c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a27      	ldr	r2, [pc, #156]	; (8004eec <TIM_OC4_SetConfig+0x104>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10d      	bne.n	8004e70 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <TIM_OC4_SetConfig+0x100>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_OC4_SetConfig+0xb0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <TIM_OC4_SetConfig+0x104>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_OC4_SetConfig+0xb0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <TIM_OC4_SetConfig+0x108>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_OC4_SetConfig+0xb0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <TIM_OC4_SetConfig+0x10c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC4_SetConfig+0xb0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <TIM_OC4_SetConfig+0x110>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d113      	bne.n	8004ec0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ea6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	019b      	lsls	r3, r3, #6
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40013400 	.word	0x40013400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800

08004efc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <TIM_OC5_SetConfig+0xb4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_OC5_SetConfig+0x7a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <TIM_OC5_SetConfig+0xb8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_OC5_SetConfig+0x7a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <TIM_OC5_SetConfig+0xbc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_OC5_SetConfig+0x7a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <TIM_OC5_SetConfig+0xc0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC5_SetConfig+0x7a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <TIM_OC5_SetConfig+0xc4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d109      	bne.n	8004f8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800500a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a18      	ldr	r2, [pc, #96]	; (800507c <TIM_OC6_SetConfig+0xb8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00f      	beq.n	8005040 <TIM_OC6_SetConfig+0x7c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a17      	ldr	r2, [pc, #92]	; (8005080 <TIM_OC6_SetConfig+0xbc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00b      	beq.n	8005040 <TIM_OC6_SetConfig+0x7c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a16      	ldr	r2, [pc, #88]	; (8005084 <TIM_OC6_SetConfig+0xc0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_OC6_SetConfig+0x7c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <TIM_OC6_SetConfig+0xc4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_OC6_SetConfig+0x7c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a14      	ldr	r2, [pc, #80]	; (800508c <TIM_OC6_SetConfig+0xc8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d109      	bne.n	8005054 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005046:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800

08005090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 030a 	bic.w	r3, r3, #10
 80050cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b087      	sub	sp, #28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0210 	bic.w	r2, r3, #16
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	f043 0307 	orr.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2201      	movs	r2, #1
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	401a      	ands	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1a      	ldr	r2, [r3, #32]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005228:	2302      	movs	r3, #2
 800522a:	e065      	b.n	80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d108      	bne.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d013      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a17      	ldr	r2, [pc, #92]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10c      	bne.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40014000 	.word	0x40014000

08005318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005330:	2302      	movs	r3, #2
 8005332:	e087      	b.n	8005444 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d106      	bne.n	80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d126      	bne.n	8005432 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	051b      	lsls	r3, r3, #20
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d106      	bne.n	8005432 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40013400 	.word	0x40013400

08005458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e042      	b.n	800557c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fc fa39 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2224      	movs	r2, #36	; 0x24
 8005512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8c2 	bl	80056b0 <UART_SetConfig>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e022      	b.n	800557c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb82 	bl	8005c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fc09 	bl	8005d8c <UART_CheckIdleState>
 800557a:	4603      	mov	r3, r0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559a:	2b20      	cmp	r3, #32
 800559c:	f040 8083 	bne.w	80056a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Transmit+0x28>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e07b      	b.n	80056a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UART_Transmit+0x3a>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e074      	b.n	80056a8 <HAL_UART_Transmit+0x124>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2221      	movs	r2, #33	; 0x21
 80055d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d6:	f7fc fcbf 	bl	8001f58 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	d108      	bne.n	8005608 <HAL_UART_Transmit+0x84>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	e003      	b.n	8005610 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005618:	e02c      	b.n	8005674 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2200      	movs	r2, #0
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fbfc 	bl	8005e22 <UART_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e039      	b.n	80056a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	3302      	adds	r3, #2
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e007      	b.n	8005662 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1cc      	bne.n	800561a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2200      	movs	r2, #0
 8005688:	2140      	movs	r1, #64	; 0x40
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fbc9 	bl	8005e22 <UART_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e006      	b.n	80056a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e000      	b.n	80056a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056a6:	2302      	movs	r3, #2
  }
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b4:	b08c      	sub	sp, #48	; 0x30
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4bab      	ldr	r3, [pc, #684]	; (800598c <UART_SetConfig+0x2dc>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4aa0      	ldr	r2, [pc, #640]	; (8005990 <UART_SetConfig+0x2e0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005718:	4313      	orrs	r3, r2
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005726:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005730:	430b      	orrs	r3, r1
 8005732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f023 010f 	bic.w	r1, r3, #15
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a91      	ldr	r2, [pc, #580]	; (8005994 <UART_SetConfig+0x2e4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d125      	bne.n	80057a0 <UART_SetConfig+0xf0>
 8005754:	4b90      	ldr	r3, [pc, #576]	; (8005998 <UART_SetConfig+0x2e8>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d81a      	bhi.n	8005798 <UART_SetConfig+0xe8>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0xb8>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005779 	.word	0x08005779
 800576c:	08005789 	.word	0x08005789
 8005770:	08005781 	.word	0x08005781
 8005774:	08005791 	.word	0x08005791
 8005778:	2301      	movs	r3, #1
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577e:	e0d6      	b.n	800592e <UART_SetConfig+0x27e>
 8005780:	2302      	movs	r3, #2
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005786:	e0d2      	b.n	800592e <UART_SetConfig+0x27e>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578e:	e0ce      	b.n	800592e <UART_SetConfig+0x27e>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e0ca      	b.n	800592e <UART_SetConfig+0x27e>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e0c6      	b.n	800592e <UART_SetConfig+0x27e>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a7d      	ldr	r2, [pc, #500]	; (800599c <UART_SetConfig+0x2ec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d138      	bne.n	800581c <UART_SetConfig+0x16c>
 80057aa:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <UART_SetConfig+0x2e8>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d82d      	bhi.n	8005814 <UART_SetConfig+0x164>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x110>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	08005815 	.word	0x08005815
 80057c8:	08005815 	.word	0x08005815
 80057cc:	08005815 	.word	0x08005815
 80057d0:	08005805 	.word	0x08005805
 80057d4:	08005815 	.word	0x08005815
 80057d8:	08005815 	.word	0x08005815
 80057dc:	08005815 	.word	0x08005815
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	08005815 	.word	0x08005815
 80057e8:	08005815 	.word	0x08005815
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fa:	e098      	b.n	800592e <UART_SetConfig+0x27e>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005802:	e094      	b.n	800592e <UART_SetConfig+0x27e>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580a:	e090      	b.n	800592e <UART_SetConfig+0x27e>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005812:	e08c      	b.n	800592e <UART_SetConfig+0x27e>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e088      	b.n	800592e <UART_SetConfig+0x27e>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a5f      	ldr	r2, [pc, #380]	; (80059a0 <UART_SetConfig+0x2f0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d125      	bne.n	8005872 <UART_SetConfig+0x1c2>
 8005826:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <UART_SetConfig+0x2e8>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d016      	beq.n	8005862 <UART_SetConfig+0x1b2>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d818      	bhi.n	800586a <UART_SetConfig+0x1ba>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d00a      	beq.n	8005852 <UART_SetConfig+0x1a2>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d814      	bhi.n	800586a <UART_SetConfig+0x1ba>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <UART_SetConfig+0x19a>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d008      	beq.n	800585a <UART_SetConfig+0x1aa>
 8005848:	e00f      	b.n	800586a <UART_SetConfig+0x1ba>
 800584a:	2300      	movs	r3, #0
 800584c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005850:	e06d      	b.n	800592e <UART_SetConfig+0x27e>
 8005852:	2302      	movs	r3, #2
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005858:	e069      	b.n	800592e <UART_SetConfig+0x27e>
 800585a:	2304      	movs	r3, #4
 800585c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005860:	e065      	b.n	800592e <UART_SetConfig+0x27e>
 8005862:	2308      	movs	r3, #8
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005868:	e061      	b.n	800592e <UART_SetConfig+0x27e>
 800586a:	2310      	movs	r3, #16
 800586c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005870:	e05d      	b.n	800592e <UART_SetConfig+0x27e>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4b      	ldr	r2, [pc, #300]	; (80059a4 <UART_SetConfig+0x2f4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d125      	bne.n	80058c8 <UART_SetConfig+0x218>
 800587c:	4b46      	ldr	r3, [pc, #280]	; (8005998 <UART_SetConfig+0x2e8>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005886:	2bc0      	cmp	r3, #192	; 0xc0
 8005888:	d016      	beq.n	80058b8 <UART_SetConfig+0x208>
 800588a:	2bc0      	cmp	r3, #192	; 0xc0
 800588c:	d818      	bhi.n	80058c0 <UART_SetConfig+0x210>
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d00a      	beq.n	80058a8 <UART_SetConfig+0x1f8>
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d814      	bhi.n	80058c0 <UART_SetConfig+0x210>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <UART_SetConfig+0x1f0>
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d008      	beq.n	80058b0 <UART_SetConfig+0x200>
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0x210>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a6:	e042      	b.n	800592e <UART_SetConfig+0x27e>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ae:	e03e      	b.n	800592e <UART_SetConfig+0x27e>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e03a      	b.n	800592e <UART_SetConfig+0x27e>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e036      	b.n	800592e <UART_SetConfig+0x27e>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e032      	b.n	800592e <UART_SetConfig+0x27e>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a30      	ldr	r2, [pc, #192]	; (8005990 <UART_SetConfig+0x2e0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d12a      	bne.n	8005928 <UART_SetConfig+0x278>
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <UART_SetConfig+0x2e8>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e0:	d01a      	beq.n	8005918 <UART_SetConfig+0x268>
 80058e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e6:	d81b      	bhi.n	8005920 <UART_SetConfig+0x270>
 80058e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ec:	d00c      	beq.n	8005908 <UART_SetConfig+0x258>
 80058ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f2:	d815      	bhi.n	8005920 <UART_SetConfig+0x270>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <UART_SetConfig+0x250>
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fc:	d008      	beq.n	8005910 <UART_SetConfig+0x260>
 80058fe:	e00f      	b.n	8005920 <UART_SetConfig+0x270>
 8005900:	2300      	movs	r3, #0
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e012      	b.n	800592e <UART_SetConfig+0x27e>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e00e      	b.n	800592e <UART_SetConfig+0x27e>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e00a      	b.n	800592e <UART_SetConfig+0x27e>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e006      	b.n	800592e <UART_SetConfig+0x27e>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e002      	b.n	800592e <UART_SetConfig+0x27e>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <UART_SetConfig+0x2e0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	f040 80a8 	bne.w	8005a8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800593a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800593e:	2b08      	cmp	r3, #8
 8005940:	d834      	bhi.n	80059ac <UART_SetConfig+0x2fc>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0x298>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800596d 	.word	0x0800596d
 800594c:	080059ad 	.word	0x080059ad
 8005950:	08005975 	.word	0x08005975
 8005954:	080059ad 	.word	0x080059ad
 8005958:	0800597b 	.word	0x0800597b
 800595c:	080059ad 	.word	0x080059ad
 8005960:	080059ad 	.word	0x080059ad
 8005964:	080059ad 	.word	0x080059ad
 8005968:	08005983 	.word	0x08005983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7fd ff9c 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8005970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005972:	e021      	b.n	80059b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <UART_SetConfig+0x2f8>)
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005978:	e01e      	b.n	80059b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597a:	f7fd ff27 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005980:	e01a      	b.n	80059b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005988:	e016      	b.n	80059b8 <UART_SetConfig+0x308>
 800598a:	bf00      	nop
 800598c:	cfff69f3 	.word	0xcfff69f3
 8005990:	40008000 	.word	0x40008000
 8005994:	40013800 	.word	0x40013800
 8005998:	40021000 	.word	0x40021000
 800599c:	40004400 	.word	0x40004400
 80059a0:	40004800 	.word	0x40004800
 80059a4:	40004c00 	.word	0x40004c00
 80059a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 812a 	beq.w	8005c14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	4a9e      	ldr	r2, [pc, #632]	; (8005c40 <UART_SetConfig+0x590>)
 80059c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	4413      	add	r3, r2
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d305      	bcc.n	80059f0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d903      	bls.n	80059f8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059f6:	e10d      	b.n	8005c14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	2200      	movs	r2, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	4a8e      	ldr	r2, [pc, #568]	; (8005c40 <UART_SetConfig+0x590>)
 8005a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a1a:	f7fb f95d 	bl	8000cd8 <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	020b      	lsls	r3, r1, #8
 8005a30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a34:	0202      	lsls	r2, r0, #8
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	6849      	ldr	r1, [r1, #4]
 8005a3a:	0849      	lsrs	r1, r1, #1
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4605      	mov	r5, r0
 8005a42:	eb12 0804 	adds.w	r8, r2, r4
 8005a46:	eb43 0905 	adc.w	r9, r3, r5
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	469a      	mov	sl, r3
 8005a52:	4693      	mov	fp, r2
 8005a54:	4652      	mov	r2, sl
 8005a56:	465b      	mov	r3, fp
 8005a58:	4640      	mov	r0, r8
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	f7fb f93c 	bl	8000cd8 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6e:	d308      	bcc.n	8005a82 <UART_SetConfig+0x3d2>
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a76:	d204      	bcs.n	8005a82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	e0c8      	b.n	8005c14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a88:	e0c4      	b.n	8005c14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a92:	d167      	bne.n	8005b64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005a94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d828      	bhi.n	8005aee <UART_SetConfig+0x43e>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x3f4>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fd feee 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8005acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ace:	e014      	b.n	8005afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fd ff00 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b5a      	ldr	r3, [pc, #360]	; (8005c44 <UART_SetConfig+0x594>)
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005adc:	e00d      	b.n	8005afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fd fe75 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8005ae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8089 	beq.w	8005c14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	4a4e      	ldr	r2, [pc, #312]	; (8005c40 <UART_SetConfig+0x590>)
 8005b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b14:	005a      	lsls	r2, r3, #1
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	441a      	add	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	2b0f      	cmp	r3, #15
 8005b2c:	d916      	bls.n	8005b5c <UART_SetConfig+0x4ac>
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d212      	bcs.n	8005b5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	8bfb      	ldrh	r3, [r7, #30]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	8bfa      	ldrh	r2, [r7, #30]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	e05b      	b.n	8005c14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b62:	e057      	b.n	8005c14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d828      	bhi.n	8005bbe <UART_SetConfig+0x50e>
 8005b6c:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x4c4>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	08005bbf 	.word	0x08005bbf
 8005b84:	08005baf 	.word	0x08005baf
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005bbf 	.word	0x08005bbf
 8005b90:	08005bbf 	.word	0x08005bbf
 8005b94:	08005bb7 	.word	0x08005bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b98:	f7fd fe86 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b9e:	e014      	b.n	8005bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba0:	f7fd fe98 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba6:	e010      	b.n	8005bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba8:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <UART_SetConfig+0x594>)
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bac:	e00d      	b.n	8005bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bae:	f7fd fe0d 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8005bb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bb4:	e009      	b.n	8005bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bbc:	e005      	b.n	8005bca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d021      	beq.n	8005c14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	4a1a      	ldr	r2, [pc, #104]	; (8005c40 <UART_SetConfig+0x590>)
 8005bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d909      	bls.n	8005c0e <UART_SetConfig+0x55e>
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d205      	bcs.n	8005c0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	e002      	b.n	8005c14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3730      	adds	r7, #48	; 0x30
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3e:	bf00      	nop
 8005c40:	0800da8c 	.word	0x0800da8c
 8005c44:	00f42400 	.word	0x00f42400

08005c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d46:	d10a      	bne.n	8005d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d9c:	f7fc f8dc 	bl	8001f58 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d10e      	bne.n	8005dce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f82f 	bl	8005e22 <UART_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e025      	b.n	8005e1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d10e      	bne.n	8005dfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f819 	bl	8005e22 <UART_WaitOnFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e00f      	b.n	8005e1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b09c      	sub	sp, #112	; 0x70
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e32:	e0a9      	b.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	f000 80a5 	beq.w	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7fc f88b 	bl	8001f58 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d140      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e68:	667b      	str	r3, [r7, #100]	; 0x64
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e6      	bne.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ea6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e069      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d051      	beq.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d149      	bne.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f50:	623a      	str	r2, [r7, #32]
 8005f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e010      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	f43f af46 	beq.w	8005e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3770      	adds	r7, #112	; 0x70
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e027      	b.n	8006018 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ff6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006038:	2302      	movs	r3, #2
 800603a:	e02d      	b.n	8006098 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	; 0x24
 8006048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f84f 	bl	800611c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e02d      	b.n	8006114 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f811 	bl	800611c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800613c:	e031      	b.n	80061a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800613e:	2308      	movs	r3, #8
 8006140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006142:	2308      	movs	r3, #8
 8006144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	0e5b      	lsrs	r3, r3, #25
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0f5b      	lsrs	r3, r3, #29
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	7b3a      	ldrb	r2, [r7, #12]
 800616a:	4911      	ldr	r1, [pc, #68]	; (80061b0 <UARTEx_SetNbDataToProcess+0x94>)
 800616c:	5c8a      	ldrb	r2, [r1, r2]
 800616e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006172:	7b3a      	ldrb	r2, [r7, #12]
 8006174:	490f      	ldr	r1, [pc, #60]	; (80061b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006178:	fb93 f3f2 	sdiv	r3, r3, r2
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	7b7a      	ldrb	r2, [r7, #13]
 8006188:	4909      	ldr	r1, [pc, #36]	; (80061b0 <UARTEx_SetNbDataToProcess+0x94>)
 800618a:	5c8a      	ldrb	r2, [r1, r2]
 800618c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006190:	7b7a      	ldrb	r2, [r7, #13]
 8006192:	4908      	ldr	r1, [pc, #32]	; (80061b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006196:	fb93 f3f2 	sdiv	r3, r3, r2
 800619a:	b29a      	uxth	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	0800daa4 	.word	0x0800daa4
 80061b4:	0800daac 	.word	0x0800daac

080061b8 <__NVIC_SetPriority>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	db0a      	blt.n	80061e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	490c      	ldr	r1, [pc, #48]	; (8006204 <__NVIC_SetPriority+0x4c>)
 80061d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d6:	0112      	lsls	r2, r2, #4
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	440b      	add	r3, r1
 80061dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061e0:	e00a      	b.n	80061f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	4908      	ldr	r1, [pc, #32]	; (8006208 <__NVIC_SetPriority+0x50>)
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	3b04      	subs	r3, #4
 80061f0:	0112      	lsls	r2, r2, #4
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	440b      	add	r3, r1
 80061f6:	761a      	strb	r2, [r3, #24]
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	e000e100 	.word	0xe000e100
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <SysTick_Handler+0x1c>)
 8006212:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006214:	f001 fdd4 	bl	8007dc0 <xTaskGetSchedulerState>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d001      	beq.n	8006222 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800621e:	f002 fbbb 	bl	8008998 <xPortSysTickHandler>
  }
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000e010 	.word	0xe000e010

0800622c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006230:	2100      	movs	r1, #0
 8006232:	f06f 0004 	mvn.w	r0, #4
 8006236:	f7ff ffbf 	bl	80061b8 <__NVIC_SetPriority>
#endif
}
 800623a:	bf00      	nop
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006246:	f3ef 8305 	mrs	r3, IPSR
 800624a:	603b      	str	r3, [r7, #0]
  return(result);
 800624c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006252:	f06f 0305 	mvn.w	r3, #5
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	e00c      	b.n	8006274 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <osKernelInitialize+0x44>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <osKernelInitialize+0x44>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006268:	2300      	movs	r3, #0
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	e002      	b.n	8006274 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006274:	687b      	ldr	r3, [r7, #4]
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000145c 	.word	0x2000145c

08006288 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628e:	f3ef 8305 	mrs	r3, IPSR
 8006292:	603b      	str	r3, [r7, #0]
  return(result);
 8006294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800629a:	f06f 0305 	mvn.w	r3, #5
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	e010      	b.n	80062c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <osKernelStart+0x48>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d109      	bne.n	80062be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062aa:	f7ff ffbf 	bl	800622c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <osKernelStart+0x48>)
 80062b0:	2202      	movs	r2, #2
 80062b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062b4:	f001 f928 	bl	8007508 <vTaskStartScheduler>
      stat = osOK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	607b      	str	r3, [r7, #4]
 80062bc:	e002      	b.n	80062c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062be:	f04f 33ff 	mov.w	r3, #4294967295
 80062c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062c4:	687b      	ldr	r3, [r7, #4]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	2000145c 	.word	0x2000145c

080062d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08e      	sub	sp, #56	; 0x38
 80062d8:	af04      	add	r7, sp, #16
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e4:	f3ef 8305 	mrs	r3, IPSR
 80062e8:	617b      	str	r3, [r7, #20]
  return(result);
 80062ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d17e      	bne.n	80063ee <osThreadNew+0x11a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d07b      	beq.n	80063ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062fa:	2318      	movs	r3, #24
 80062fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006302:	f04f 33ff 	mov.w	r3, #4294967295
 8006306:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d045      	beq.n	800639a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <osThreadNew+0x48>
        name = attr->name;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <osThreadNew+0x6e>
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b38      	cmp	r3, #56	; 0x38
 8006334:	d805      	bhi.n	8006342 <osThreadNew+0x6e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <osThreadNew+0x72>
        return (NULL);
 8006342:	2300      	movs	r3, #0
 8006344:	e054      	b.n	80063f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	089b      	lsrs	r3, r3, #2
 8006354:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00e      	beq.n	800637c <osThreadNew+0xa8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2bbb      	cmp	r3, #187	; 0xbb
 8006364:	d90a      	bls.n	800637c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800636a:	2b00      	cmp	r3, #0
 800636c:	d006      	beq.n	800637c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <osThreadNew+0xa8>
        mem = 1;
 8006376:	2301      	movs	r3, #1
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e010      	b.n	800639e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10c      	bne.n	800639e <osThreadNew+0xca>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <osThreadNew+0xca>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <osThreadNew+0xca>
          mem = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e001      	b.n	800639e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d110      	bne.n	80063c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063ac:	9202      	str	r2, [sp, #8]
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 feb8 	bl	8007130 <xTaskCreateStatic>
 80063c0:	4603      	mov	r3, r0
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	e013      	b.n	80063ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d110      	bne.n	80063ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f107 0310 	add.w	r3, r7, #16
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 ff03 	bl	80071ea <xTaskCreate>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d001      	beq.n	80063ee <osThreadNew+0x11a>
            hTask = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ee:	693b      	ldr	r3, [r7, #16]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3728      	adds	r7, #40	; 0x28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006400:	f3ef 8305 	mrs	r3, IPSR
 8006404:	60bb      	str	r3, [r7, #8]
  return(result);
 8006406:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <osDelay+0x1c>
    stat = osErrorISR;
 800640c:	f06f 0305 	mvn.w	r3, #5
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	e007      	b.n	8006424 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <osDelay+0x2c>
      vTaskDelay(ticks);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f83e 	bl	80074a0 <vTaskDelay>
    }
  }

  return (stat);
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800642e:	b580      	push	{r7, lr}
 8006430:	b08a      	sub	sp, #40	; 0x28
 8006432:	af02      	add	r7, sp, #8
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800643e:	f3ef 8305 	mrs	r3, IPSR
 8006442:	613b      	str	r3, [r7, #16]
  return(result);
 8006444:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006446:	2b00      	cmp	r3, #0
 8006448:	d15f      	bne.n	800650a <osMessageQueueNew+0xdc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05c      	beq.n	800650a <osMessageQueueNew+0xdc>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d059      	beq.n	800650a <osMessageQueueNew+0xdc>
    mem = -1;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295
 800645a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d029      	beq.n	80064b6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d012      	beq.n	8006490 <osMessageQueueNew+0x62>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b4f      	cmp	r3, #79	; 0x4f
 8006470:	d90e      	bls.n	8006490 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <osMessageQueueNew+0x62>
        mem = 1;
 800648a:	2301      	movs	r3, #1
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	e014      	b.n	80064ba <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d110      	bne.n	80064ba <osMessageQueueNew+0x8c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10c      	bne.n	80064ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d108      	bne.n	80064ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <osMessageQueueNew+0x8c>
          mem = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e001      	b.n	80064ba <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10b      	bne.n	80064d8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2100      	movs	r1, #0
 80064ca:	9100      	str	r1, [sp, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f970 	bl	80067b4 <xQueueGenericCreateStatic>
 80064d4:	61f8      	str	r0, [r7, #28]
 80064d6:	e008      	b.n	80064ea <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80064de:	2200      	movs	r2, #0
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f9de 	bl	80068a4 <xQueueGenericCreate>
 80064e8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00c      	beq.n	800650a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osMessageQueueNew+0xd0>
        name = attr->name;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e001      	b.n	8006502 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006502:	6979      	ldr	r1, [r7, #20]
 8006504:	69f8      	ldr	r0, [r7, #28]
 8006506:	f000 fdb5 	bl	8007074 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800650a:	69fb      	ldr	r3, [r7, #28]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a07      	ldr	r2, [pc, #28]	; (8006540 <vApplicationGetIdleTaskMemory+0x2c>)
 8006524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4a06      	ldr	r2, [pc, #24]	; (8006544 <vApplicationGetIdleTaskMemory+0x30>)
 800652a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	601a      	str	r2, [r3, #0]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20001460 	.word	0x20001460
 8006544:	2000151c 	.word	0x2000151c

08006548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <vApplicationGetTimerTaskMemory+0x2c>)
 8006558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <vApplicationGetTimerTaskMemory+0x30>)
 800655e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006566:	601a      	str	r2, [r3, #0]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	2000171c 	.word	0x2000171c
 8006578:	200017d8 	.word	0x200017d8

0800657c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f103 0208 	add.w	r2, r3, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f04f 32ff 	mov.w	r2, #4294967295
 8006594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f103 0208 	add.w	r2, r3, #8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f103 0208 	add.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d103      	bne.n	800663e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e00c      	b.n	8006658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3308      	adds	r3, #8
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e002      	b.n	800664c <vListInsert+0x2e>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	429a      	cmp	r2, r3
 8006656:	d2f6      	bcs.n	8006646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6892      	ldr	r2, [r2, #8]
 80066a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6852      	ldr	r2, [r2, #4]
 80066b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d103      	bne.n	80066c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800670e:	f002 f8b1 	bl	8008874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	441a      	add	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	3b01      	subs	r3, #1
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	441a      	add	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	22ff      	movs	r2, #255	; 0xff
 8006752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d114      	bne.n	800678e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01a      	beq.n	80067a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3310      	adds	r3, #16
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f963 	bl	8007a3c <xTaskRemoveFromEventList>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d012      	beq.n	80067a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800677c:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <xQueueGenericReset+0xcc>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	e009      	b.n	80067a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3310      	adds	r3, #16
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fef2 	bl	800657c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3324      	adds	r3, #36	; 0x24
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff feed 	bl	800657c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067a2:	f002 f897 	bl	80088d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067a6:	2301      	movs	r3, #1
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08e      	sub	sp, #56	; 0x38
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <xQueueGenericCreateStatic+0x52>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <xQueueGenericCreateStatic+0x56>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <xQueueGenericCreateStatic+0x58>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <xQueueGenericCreateStatic+0x7e>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <xQueueGenericCreateStatic+0x82>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <xQueueGenericCreateStatic+0x84>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	61fb      	str	r3, [r7, #28]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006852:	2350      	movs	r3, #80	; 0x50
 8006854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b50      	cmp	r3, #80	; 0x50
 800685a:	d00a      	beq.n	8006872 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	61bb      	str	r3, [r7, #24]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006872:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006886:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f83f 	bl	8006918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800689c:	4618      	mov	r0, r3
 800689e:	3730      	adds	r7, #48	; 0x30
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08a      	sub	sp, #40	; 0x28
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	613b      	str	r3, [r7, #16]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	3350      	adds	r3, #80	; 0x50
 80068dc:	4618      	mov	r0, r3
 80068de:	f002 f8eb 	bl	8008ab8 <pvPortMalloc>
 80068e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	3350      	adds	r3, #80	; 0x50
 80068f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068fc:	79fa      	ldrb	r2, [r7, #7]
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4613      	mov	r3, r2
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f805 	bl	8006918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800690e:	69bb      	ldr	r3, [r7, #24]
	}
 8006910:	4618      	mov	r0, r3
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d103      	bne.n	8006934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e002      	b.n	800693a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006946:	2101      	movs	r1, #1
 8006948:	69b8      	ldr	r0, [r7, #24]
 800694a:	f7ff fecb 	bl	80066e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	; 0x38
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <xQueueGenericSend+0x32>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <xQueueGenericSend+0x40>
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <xQueueGenericSend+0x44>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <xQueueGenericSend+0x46>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <xQueueGenericSend+0x60>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x6e>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <xQueueGenericSend+0x72>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericSend+0x74>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericSend+0x8e>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	623b      	str	r3, [r7, #32]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ee:	f001 f9e7 	bl	8007dc0 <xTaskGetSchedulerState>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <xQueueGenericSend+0x9e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <xQueueGenericSend+0xa2>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <xQueueGenericSend+0xa4>
 8006a02:	2300      	movs	r3, #0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <xQueueGenericSend+0xbe>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	61fb      	str	r3, [r7, #28]
}
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a1e:	f001 ff29 	bl	8008874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <xQueueGenericSend+0xd4>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d129      	bne.n	8006a88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3a:	f000 fa0b 	bl	8006e54 <prvCopyDataToQueue>
 8006a3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d010      	beq.n	8006a6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	3324      	adds	r3, #36	; 0x24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fff5 	bl	8007a3c <xTaskRemoveFromEventList>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d013      	beq.n	8006a80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a58:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <xQueueGenericSend+0x1f8>)
 8006a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	e00a      	b.n	8006a80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a70:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <xQueueGenericSend+0x1f8>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a80:	f001 ff28 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e063      	b.n	8006b50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a8e:	f001 ff21 	bl	80088d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e05c      	b.n	8006b50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f82f 	bl	8007b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aaa:	f001 ff13 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aae:	f000 fd9b 	bl	80075e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab2:	f001 fedf 	bl	8008874 <vPortEnterCritical>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac2:	d103      	bne.n	8006acc <xQueueGenericSend+0x16c>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSend+0x182>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae2:	f001 fef7 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ae6:	1d3a      	adds	r2, r7, #4
 8006ae8:	f107 0314 	add.w	r3, r7, #20
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 f81e 	bl	8007b30 <xTaskCheckForTimeOut>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d124      	bne.n	8006b44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006afc:	f000 faa2 	bl	8007044 <prvIsQueueFull>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d018      	beq.n	8006b38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	3310      	adds	r3, #16
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 ff44 	bl	800799c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b16:	f000 fa2d 	bl	8006f74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b1a:	f000 fd73 	bl	8007604 <xTaskResumeAll>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f47f af7c 	bne.w	8006a1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <xQueueGenericSend+0x1f8>)
 8006b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	e772      	b.n	8006a1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b3a:	f000 fa1b 	bl	8006f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b3e:	f000 fd61 	bl	8007604 <xTaskResumeAll>
 8006b42:	e76c      	b.n	8006a1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b46:	f000 fa15 	bl	8006f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4a:	f000 fd5b 	bl	8007604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3738      	adds	r7, #56	; 0x38
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b090      	sub	sp, #64	; 0x40
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <xQueueGenericSendFromISR+0x3c>
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <xQueueGenericSendFromISR+0x40>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <xQueueGenericSendFromISR+0x42>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d103      	bne.n	8006bc6 <xQueueGenericSendFromISR+0x6a>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <xQueueGenericSendFromISR+0x6e>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueGenericSendFromISR+0x70>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	623b      	str	r3, [r7, #32]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006be6:	f001 ff27 	bl	8008a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006bea:	f3ef 8211 	mrs	r2, BASEPRI
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fa      	str	r2, [r7, #28]
 8006c00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <xQueueGenericSendFromISR+0xbc>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d12f      	bne.n	8006c78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c2e:	f000 f911 	bl	8006e54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d112      	bne.n	8006c62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d016      	beq.n	8006c72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	3324      	adds	r3, #36	; 0x24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fef7 	bl	8007a3c <xTaskRemoveFromEventList>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00e      	beq.n	8006c72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e007      	b.n	8006c72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c66:	3301      	adds	r3, #1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	b25a      	sxtb	r2, r3
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c72:	2301      	movs	r3, #1
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c76:	e001      	b.n	8006c7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3740      	adds	r7, #64	; 0x40
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08c      	sub	sp, #48	; 0x30
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <xQueueReceive+0x30>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	623b      	str	r3, [r7, #32]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <xQueueReceive+0x3e>
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <xQueueReceive+0x42>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <xQueueReceive+0x44>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <xQueueReceive+0x5e>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	61fb      	str	r3, [r7, #28]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf2:	f001 f865 	bl	8007dc0 <xTaskGetSchedulerState>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <xQueueReceive+0x6e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <xQueueReceive+0x72>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <xQueueReceive+0x74>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xQueueReceive+0x8e>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	61bb      	str	r3, [r7, #24]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d22:	f001 fda7 	bl	8008874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01f      	beq.n	8006d72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d36:	f000 f8f7 	bl	8006f28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	1e5a      	subs	r2, r3, #1
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	3310      	adds	r3, #16
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fe74 	bl	8007a3c <xTaskRemoveFromEventList>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	; (8006e50 <xQueueReceive+0x1bc>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d6a:	f001 fdb3 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e069      	b.n	8006e46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d103      	bne.n	8006d80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d78:	f001 fdac 	bl	80088d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e062      	b.n	8006e46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d86:	f107 0310 	add.w	r3, r7, #16
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 feba 	bl	8007b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d94:	f001 fd9e 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d98:	f000 fc26 	bl	80075e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d9c:	f001 fd6a 	bl	8008874 <vPortEnterCritical>
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da6:	b25b      	sxtb	r3, r3
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d103      	bne.n	8006db6 <xQueueReceive+0x122>
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dbc:	b25b      	sxtb	r3, r3
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d103      	bne.n	8006dcc <xQueueReceive+0x138>
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dcc:	f001 fd82 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd0:	1d3a      	adds	r2, r7, #4
 8006dd2:	f107 0310 	add.w	r3, r7, #16
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fea9 	bl	8007b30 <xTaskCheckForTimeOut>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d123      	bne.n	8006e2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de6:	f000 f917 	bl	8007018 <prvIsQueueEmpty>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4611      	mov	r1, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fdcf 	bl	800799c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e00:	f000 f8b8 	bl	8006f74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e04:	f000 fbfe 	bl	8007604 <xTaskResumeAll>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d189      	bne.n	8006d22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e0e:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <xQueueReceive+0x1bc>)
 8006e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	e780      	b.n	8006d22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e22:	f000 f8a7 	bl	8006f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e26:	f000 fbed 	bl	8007604 <xTaskResumeAll>
 8006e2a:	e77a      	b.n	8006d22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e2e:	f000 f8a1 	bl	8006f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e32:	f000 fbe7 	bl	8007604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e38:	f000 f8ee 	bl	8007018 <prvIsQueueEmpty>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f43f af6f 	beq.w	8006d22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3730      	adds	r7, #48	; 0x30
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10d      	bne.n	8006e8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d14d      	bne.n	8006f16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 ffbc 	bl	8007dfc <xTaskPriorityDisinherit>
 8006e84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	609a      	str	r2, [r3, #8]
 8006e8c:	e043      	b.n	8006f16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d119      	bne.n	8006ec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6858      	ldr	r0, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	f002 f917 	bl	80090d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	441a      	add	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d32b      	bcc.n	8006f16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	e026      	b.n	8006f16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68d8      	ldr	r0, [r3, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	f002 f8fd 	bl	80090d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	441a      	add	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d207      	bcs.n	8006f04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	425b      	negs	r3, r3
 8006efe:	441a      	add	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d105      	bne.n	8006f16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f1e:	697b      	ldr	r3, [r7, #20]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d018      	beq.n	8006f6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	441a      	add	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d303      	bcc.n	8006f5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68d9      	ldr	r1, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	461a      	mov	r2, r3
 8006f66:	6838      	ldr	r0, [r7, #0]
 8006f68:	f002 f8b3 	bl	80090d2 <memcpy>
	}
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f7c:	f001 fc7a 	bl	8008874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f88:	e011      	b.n	8006fae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d012      	beq.n	8006fb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3324      	adds	r3, #36	; 0x24
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fd50 	bl	8007a3c <xTaskRemoveFromEventList>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fa2:	f000 fe27 	bl	8007bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dce9      	bgt.n	8006f8a <prvUnlockQueue+0x16>
 8006fb6:	e000      	b.n	8006fba <prvUnlockQueue+0x46>
					break;
 8006fb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	22ff      	movs	r2, #255	; 0xff
 8006fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fc2:	f001 fc87 	bl	80088d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fc6:	f001 fc55 	bl	8008874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fd2:	e011      	b.n	8006ff8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d012      	beq.n	8007002 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3310      	adds	r3, #16
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fd2b 	bl	8007a3c <xTaskRemoveFromEventList>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fec:	f000 fe02 	bl	8007bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dce9      	bgt.n	8006fd4 <prvUnlockQueue+0x60>
 8007000:	e000      	b.n	8007004 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007002:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	22ff      	movs	r2, #255	; 0xff
 8007008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800700c:	f001 fc62 	bl	80088d4 <vPortExitCritical>
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007020:	f001 fc28 	bl	8008874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d102      	bne.n	8007032 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e001      	b.n	8007036 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007036:	f001 fc4d 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 800703a:	68fb      	ldr	r3, [r7, #12]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800704c:	f001 fc12 	bl	8008874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007058:	429a      	cmp	r2, r3
 800705a:	d102      	bne.n	8007062 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e001      	b.n	8007066 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007066:	f001 fc35 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 800706a:	68fb      	ldr	r3, [r7, #12]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	e014      	b.n	80070ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007084:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <vQueueAddToRegistry+0x50>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007090:	490c      	ldr	r1, [pc, #48]	; (80070c4 <vQueueAddToRegistry+0x50>)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800709a:	4a0a      	ldr	r2, [pc, #40]	; (80070c4 <vQueueAddToRegistry+0x50>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4413      	add	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070a6:	e006      	b.n	80070b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b07      	cmp	r3, #7
 80070b2:	d9e7      	bls.n	8007084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20001bd8 	.word	0x20001bd8

080070c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070d8:	f001 fbcc 	bl	8008874 <vPortEnterCritical>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e2:	b25b      	sxtb	r3, r3
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d103      	bne.n	80070f2 <vQueueWaitForMessageRestricted+0x2a>
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d103      	bne.n	8007108 <vQueueWaitForMessageRestricted+0x40>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007108:	f001 fbe4 	bl	80088d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3324      	adds	r3, #36	; 0x24
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fc61 	bl	80079e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007122:	6978      	ldr	r0, [r7, #20]
 8007124:	f7ff ff26 	bl	8006f74 <prvUnlockQueue>
	}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	; 0x38
 8007134:	af04      	add	r7, sp, #16
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xTaskCreateStatic+0x46>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	61fb      	str	r3, [r7, #28]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007176:	23bc      	movs	r3, #188	; 0xbc
 8007178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2bbc      	cmp	r3, #188	; 0xbc
 800717e:	d00a      	beq.n	8007196 <xTaskCreateStatic+0x66>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61bb      	str	r3, [r7, #24]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007196:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01e      	beq.n	80071dc <xTaskCreateStatic+0xac>
 800719e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071b6:	2300      	movs	r3, #0
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	f107 0314 	add.w	r3, r7, #20
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f850 	bl	8007274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d6:	f000 f8f3 	bl	80073c0 <prvAddNewTaskToReadyList>
 80071da:	e001      	b.n	80071e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071e0:	697b      	ldr	r3, [r7, #20]
	}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08c      	sub	sp, #48	; 0x30
 80071ee:	af04      	add	r7, sp, #16
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 fc5a 	bl	8008ab8 <pvPortMalloc>
 8007204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800720c:	20bc      	movs	r0, #188	; 0xbc
 800720e:	f001 fc53 	bl	8008ab8 <pvPortMalloc>
 8007212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
 8007220:	e005      	b.n	800722e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007222:	6978      	ldr	r0, [r7, #20]
 8007224:	f001 fd14 	bl	8008c50 <vPortFree>
 8007228:	e001      	b.n	800722e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d017      	beq.n	8007264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	2300      	movs	r3, #0
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f80e 	bl	8007274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007258:	69f8      	ldr	r0, [r7, #28]
 800725a:	f000 f8b1 	bl	80073c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725e:	2301      	movs	r3, #1
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e002      	b.n	800726a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
 8007268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800726a:	69bb      	ldr	r3, [r7, #24]
	}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	461a      	mov	r2, r3
 800728c:	21a5      	movs	r1, #165	; 0xa5
 800728e:	f001 ff2e 	bl	80090ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800729c:	3b01      	subs	r3, #1
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f023 0307 	bic.w	r3, r3, #7
 80072aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	617b      	str	r3, [r7, #20]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01f      	beq.n	8007312 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e012      	b.n	80072fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	7819      	ldrb	r1, [r3, #0]
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	3334      	adds	r3, #52	; 0x34
 80072e8:	460a      	mov	r2, r1
 80072ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b0f      	cmp	r3, #15
 8007302:	d9e9      	bls.n	80072d8 <prvInitialiseNewTask+0x64>
 8007304:	e000      	b.n	8007308 <prvInitialiseNewTask+0x94>
			{
				break;
 8007306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007310:	e003      	b.n	800731a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2b37      	cmp	r3, #55	; 0x37
 800731e:	d901      	bls.n	8007324 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007320:	2337      	movs	r3, #55	; 0x37
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	2200      	movs	r2, #0
 8007334:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff f93e 	bl	80065bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	3318      	adds	r3, #24
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff f939 	bl	80065bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	3354      	adds	r3, #84	; 0x54
 8007374:	2260      	movs	r2, #96	; 0x60
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f001 feb8 	bl	80090ee <memset>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <prvInitialiseNewTask+0x140>)
 8007382:	659a      	str	r2, [r3, #88]	; 0x58
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <prvInitialiseNewTask+0x144>)
 8007388:	65da      	str	r2, [r3, #92]	; 0x5c
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	4a0b      	ldr	r2, [pc, #44]	; (80073bc <prvInitialiseNewTask+0x148>)
 800738e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	69b8      	ldr	r0, [r7, #24]
 8007396:	f001 f941 	bl	800861c <pxPortInitialiseStack>
 800739a:	4602      	mov	r2, r0
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ac:	bf00      	nop
 80073ae:	3720      	adds	r7, #32
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	0800dad4 	.word	0x0800dad4
 80073b8:	0800daf4 	.word	0x0800daf4
 80073bc:	0800dab4 	.word	0x0800dab4

080073c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073c8:	f001 fa54 	bl	8008874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073cc:	4b2d      	ldr	r3, [pc, #180]	; (8007484 <prvAddNewTaskToReadyList+0xc4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3301      	adds	r3, #1
 80073d2:	4a2c      	ldr	r2, [pc, #176]	; (8007484 <prvAddNewTaskToReadyList+0xc4>)
 80073d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073d6:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073de:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e4:	4b27      	ldr	r3, [pc, #156]	; (8007484 <prvAddNewTaskToReadyList+0xc4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d110      	bne.n	800740e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073ec:	f000 fc26 	bl	8007c3c <prvInitialiseTaskLists>
 80073f0:	e00d      	b.n	800740e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073f2:	4b26      	ldr	r3, [pc, #152]	; (800748c <prvAddNewTaskToReadyList+0xcc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073fa:	4b23      	ldr	r3, [pc, #140]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	429a      	cmp	r2, r3
 8007406:	d802      	bhi.n	800740e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007408:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <prvAddNewTaskToReadyList+0xd0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <prvAddNewTaskToReadyList+0xd0>)
 8007416:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <prvAddNewTaskToReadyList+0xd0>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <prvAddNewTaskToReadyList+0xd4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d903      	bls.n	8007434 <prvAddNewTaskToReadyList+0x74>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4a18      	ldr	r2, [pc, #96]	; (8007494 <prvAddNewTaskToReadyList+0xd4>)
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4a15      	ldr	r2, [pc, #84]	; (8007498 <prvAddNewTaskToReadyList+0xd8>)
 8007442:	441a      	add	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3304      	adds	r3, #4
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7ff f8c3 	bl	80065d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007450:	f001 fa40 	bl	80088d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007454:	4b0d      	ldr	r3, [pc, #52]	; (800748c <prvAddNewTaskToReadyList+0xcc>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00e      	beq.n	800747a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	429a      	cmp	r2, r3
 8007468:	d207      	bcs.n	800747a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <prvAddNewTaskToReadyList+0xdc>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	200020ec 	.word	0x200020ec
 8007488:	20001c18 	.word	0x20001c18
 800748c:	200020f8 	.word	0x200020f8
 8007490:	20002108 	.word	0x20002108
 8007494:	200020f4 	.word	0x200020f4
 8007498:	20001c1c 	.word	0x20001c1c
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d017      	beq.n	80074e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <vTaskDelay+0x60>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <vTaskDelay+0x30>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074d0:	f000 f88a 	bl	80075e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074d4:	2100      	movs	r1, #0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fcfe 	bl	8007ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074dc:	f000 f892 	bl	8007604 <xTaskResumeAll>
 80074e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d107      	bne.n	80074f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <vTaskDelay+0x64>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20002114 	.word	0x20002114
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007516:	463a      	mov	r2, r7
 8007518:	1d39      	adds	r1, r7, #4
 800751a:	f107 0308 	add.w	r3, r7, #8
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fff8 	bl	8006514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	9202      	str	r2, [sp, #8]
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	2300      	movs	r3, #0
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	460a      	mov	r2, r1
 8007536:	4924      	ldr	r1, [pc, #144]	; (80075c8 <vTaskStartScheduler+0xc0>)
 8007538:	4824      	ldr	r0, [pc, #144]	; (80075cc <vTaskStartScheduler+0xc4>)
 800753a:	f7ff fdf9 	bl	8007130 <xTaskCreateStatic>
 800753e:	4603      	mov	r3, r0
 8007540:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <vTaskStartScheduler+0xc8>)
 8007542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007544:	4b22      	ldr	r3, [pc, #136]	; (80075d0 <vTaskStartScheduler+0xc8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800754c:	2301      	movs	r3, #1
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	e001      	b.n	8007556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d102      	bne.n	8007562 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800755c:	f000 fd10 	bl	8007f80 <xTimerCreateTimerTask>
 8007560:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d11b      	bne.n	80075a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	613b      	str	r3, [r7, #16]
}
 800757a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800757c:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <vTaskStartScheduler+0xcc>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3354      	adds	r3, #84	; 0x54
 8007582:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <vTaskStartScheduler+0xd0>)
 8007584:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007586:	4b15      	ldr	r3, [pc, #84]	; (80075dc <vTaskStartScheduler+0xd4>)
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800758e:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <vTaskStartScheduler+0xd8>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007594:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <vTaskStartScheduler+0xdc>)
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800759a:	f001 f8c9 	bl	8008730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800759e:	e00e      	b.n	80075be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d10a      	bne.n	80075be <vTaskStartScheduler+0xb6>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <vTaskStartScheduler+0xb4>
}
 80075be:	bf00      	nop
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	0800d948 	.word	0x0800d948
 80075cc:	08007c0d 	.word	0x08007c0d
 80075d0:	20002110 	.word	0x20002110
 80075d4:	20001c18 	.word	0x20001c18
 80075d8:	20000010 	.word	0x20000010
 80075dc:	2000210c 	.word	0x2000210c
 80075e0:	200020f8 	.word	0x200020f8
 80075e4:	200020f0 	.word	0x200020f0

080075e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <vTaskSuspendAll+0x18>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	4a03      	ldr	r2, [pc, #12]	; (8007600 <vTaskSuspendAll+0x18>)
 80075f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075f6:	bf00      	nop
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20002114 	.word	0x20002114

08007604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007612:	4b42      	ldr	r3, [pc, #264]	; (800771c <xTaskResumeAll+0x118>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10a      	bne.n	8007630 <xTaskResumeAll+0x2c>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	603b      	str	r3, [r7, #0]
}
 800762c:	bf00      	nop
 800762e:	e7fe      	b.n	800762e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007630:	f001 f920 	bl	8008874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007634:	4b39      	ldr	r3, [pc, #228]	; (800771c <xTaskResumeAll+0x118>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3b01      	subs	r3, #1
 800763a:	4a38      	ldr	r2, [pc, #224]	; (800771c <xTaskResumeAll+0x118>)
 800763c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800763e:	4b37      	ldr	r3, [pc, #220]	; (800771c <xTaskResumeAll+0x118>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d162      	bne.n	800770c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007646:	4b36      	ldr	r3, [pc, #216]	; (8007720 <xTaskResumeAll+0x11c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d05e      	beq.n	800770c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800764e:	e02f      	b.n	80076b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007650:	4b34      	ldr	r3, [pc, #208]	; (8007724 <xTaskResumeAll+0x120>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3318      	adds	r3, #24
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff f817 	bl	8006690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3304      	adds	r3, #4
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f812 	bl	8006690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <xTaskResumeAll+0x124>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d903      	bls.n	8007680 <xTaskResumeAll+0x7c>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a2a      	ldr	r2, [pc, #168]	; (8007728 <xTaskResumeAll+0x124>)
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4a27      	ldr	r2, [pc, #156]	; (800772c <xTaskResumeAll+0x128>)
 800768e:	441a      	add	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7fe ff9d 	bl	80065d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4b23      	ldr	r3, [pc, #140]	; (8007730 <xTaskResumeAll+0x12c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076aa:	4b22      	ldr	r3, [pc, #136]	; (8007734 <xTaskResumeAll+0x130>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076b0:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <xTaskResumeAll+0x120>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1cb      	bne.n	8007650 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076be:	f000 fb5f 	bl	8007d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076c2:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <xTaskResumeAll+0x134>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d010      	beq.n	80076f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076ce:	f000 f847 	bl	8007760 <xTaskIncrementTick>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80076d8:	4b16      	ldr	r3, [pc, #88]	; (8007734 <xTaskResumeAll+0x130>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f1      	bne.n	80076ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <xTaskResumeAll+0x134>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076f0:	4b10      	ldr	r3, [pc, #64]	; (8007734 <xTaskResumeAll+0x130>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076f8:	2301      	movs	r3, #1
 80076fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <xTaskResumeAll+0x138>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800770c:	f001 f8e2 	bl	80088d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007710:	68bb      	ldr	r3, [r7, #8]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20002114 	.word	0x20002114
 8007720:	200020ec 	.word	0x200020ec
 8007724:	200020ac 	.word	0x200020ac
 8007728:	200020f4 	.word	0x200020f4
 800772c:	20001c1c 	.word	0x20001c1c
 8007730:	20001c18 	.word	0x20001c18
 8007734:	20002100 	.word	0x20002100
 8007738:	200020fc 	.word	0x200020fc
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007746:	4b05      	ldr	r3, [pc, #20]	; (800775c <xTaskGetTickCount+0x1c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800774c:	687b      	ldr	r3, [r7, #4]
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	200020f0 	.word	0x200020f0

08007760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800776a:	4b4f      	ldr	r3, [pc, #316]	; (80078a8 <xTaskIncrementTick+0x148>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 808f 	bne.w	8007892 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007774:	4b4d      	ldr	r3, [pc, #308]	; (80078ac <xTaskIncrementTick+0x14c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800777c:	4a4b      	ldr	r2, [pc, #300]	; (80078ac <xTaskIncrementTick+0x14c>)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d120      	bne.n	80077ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007788:	4b49      	ldr	r3, [pc, #292]	; (80078b0 <xTaskIncrementTick+0x150>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	603b      	str	r3, [r7, #0]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xTaskIncrementTick+0x46>
 80077a8:	4b41      	ldr	r3, [pc, #260]	; (80078b0 <xTaskIncrementTick+0x150>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <xTaskIncrementTick+0x154>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3f      	ldr	r2, [pc, #252]	; (80078b0 <xTaskIncrementTick+0x150>)
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <xTaskIncrementTick+0x154>)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	4b3e      	ldr	r3, [pc, #248]	; (80078b8 <xTaskIncrementTick+0x158>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	4a3d      	ldr	r2, [pc, #244]	; (80078b8 <xTaskIncrementTick+0x158>)
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	f000 fadb 	bl	8007d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077ca:	4b3c      	ldr	r3, [pc, #240]	; (80078bc <xTaskIncrementTick+0x15c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d349      	bcc.n	8007868 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d4:	4b36      	ldr	r3, [pc, #216]	; (80078b0 <xTaskIncrementTick+0x150>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077de:	4b37      	ldr	r3, [pc, #220]	; (80078bc <xTaskIncrementTick+0x15c>)
 80077e0:	f04f 32ff 	mov.w	r2, #4294967295
 80077e4:	601a      	str	r2, [r3, #0]
					break;
 80077e6:	e03f      	b.n	8007868 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e8:	4b31      	ldr	r3, [pc, #196]	; (80078b0 <xTaskIncrementTick+0x150>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d203      	bcs.n	8007808 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007800:	4a2e      	ldr	r2, [pc, #184]	; (80078bc <xTaskIncrementTick+0x15c>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007806:	e02f      	b.n	8007868 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe ff3f 	bl	8006690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	3318      	adds	r3, #24
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe ff36 	bl	8006690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <xTaskIncrementTick+0x160>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d903      	bls.n	8007838 <xTaskIncrementTick+0xd8>
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a22      	ldr	r2, [pc, #136]	; (80078c0 <xTaskIncrementTick+0x160>)
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <xTaskIncrementTick+0x164>)
 8007846:	441a      	add	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe fec1 	bl	80065d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <xTaskIncrementTick+0x168>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	429a      	cmp	r2, r3
 8007860:	d3b8      	bcc.n	80077d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007862:	2301      	movs	r3, #1
 8007864:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007866:	e7b5      	b.n	80077d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007868:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <xTaskIncrementTick+0x168>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786e:	4915      	ldr	r1, [pc, #84]	; (80078c4 <xTaskIncrementTick+0x164>)
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d901      	bls.n	8007884 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007880:	2301      	movs	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <xTaskIncrementTick+0x16c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e004      	b.n	800789c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <xTaskIncrementTick+0x170>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3301      	adds	r3, #1
 8007898:	4a0d      	ldr	r2, [pc, #52]	; (80078d0 <xTaskIncrementTick+0x170>)
 800789a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800789c:	697b      	ldr	r3, [r7, #20]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20002114 	.word	0x20002114
 80078ac:	200020f0 	.word	0x200020f0
 80078b0:	200020a4 	.word	0x200020a4
 80078b4:	200020a8 	.word	0x200020a8
 80078b8:	20002104 	.word	0x20002104
 80078bc:	2000210c 	.word	0x2000210c
 80078c0:	200020f4 	.word	0x200020f4
 80078c4:	20001c1c 	.word	0x20001c1c
 80078c8:	20001c18 	.word	0x20001c18
 80078cc:	20002100 	.word	0x20002100
 80078d0:	200020fc 	.word	0x200020fc

080078d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <vTaskSwitchContext+0xb0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078e2:	4b29      	ldr	r3, [pc, #164]	; (8007988 <vTaskSwitchContext+0xb4>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078e8:	e046      	b.n	8007978 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80078ea:	4b27      	ldr	r3, [pc, #156]	; (8007988 <vTaskSwitchContext+0xb4>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f0:	4b26      	ldr	r3, [pc, #152]	; (800798c <vTaskSwitchContext+0xb8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	e010      	b.n	800791a <vTaskSwitchContext+0x46>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <vTaskSwitchContext+0x40>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vTaskSwitchContext+0x3e>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b01      	subs	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	491d      	ldr	r1, [pc, #116]	; (8007990 <vTaskSwitchContext+0xbc>)
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0e4      	beq.n	80078f8 <vTaskSwitchContext+0x24>
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4a15      	ldr	r2, [pc, #84]	; (8007990 <vTaskSwitchContext+0xbc>)
 800793a:	4413      	add	r3, r2
 800793c:	60bb      	str	r3, [r7, #8]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	605a      	str	r2, [r3, #4]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	3308      	adds	r3, #8
 8007950:	429a      	cmp	r2, r3
 8007952:	d104      	bne.n	800795e <vTaskSwitchContext+0x8a>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	605a      	str	r2, [r3, #4]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <vTaskSwitchContext+0xc0>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	4a08      	ldr	r2, [pc, #32]	; (800798c <vTaskSwitchContext+0xb8>)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <vTaskSwitchContext+0xc0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3354      	adds	r3, #84	; 0x54
 8007974:	4a08      	ldr	r2, [pc, #32]	; (8007998 <vTaskSwitchContext+0xc4>)
 8007976:	6013      	str	r3, [r2, #0]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20002114 	.word	0x20002114
 8007988:	20002100 	.word	0x20002100
 800798c:	200020f4 	.word	0x200020f4
 8007990:	20001c1c 	.word	0x20001c1c
 8007994:	20001c18 	.word	0x20001c18
 8007998:	20000010 	.word	0x20000010

0800799c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60fb      	str	r3, [r7, #12]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c2:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <vTaskPlaceOnEventList+0x44>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3318      	adds	r3, #24
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fe fe27 	bl	800661e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079d0:	2101      	movs	r1, #1
 80079d2:	6838      	ldr	r0, [r7, #0]
 80079d4:	f000 fa80 	bl	8007ed8 <prvAddCurrentTaskToDelayedList>
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20001c18 	.word	0x20001c18

080079e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	617b      	str	r3, [r7, #20]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3318      	adds	r3, #24
 8007a12:	4619      	mov	r1, r3
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7fe fdde 	bl	80065d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	68b8      	ldr	r0, [r7, #8]
 8007a2a:	f000 fa55 	bl	8007ed8 <prvAddCurrentTaskToDelayedList>
	}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001c18 	.word	0x20001c18

08007a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60fb      	str	r3, [r7, #12]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3318      	adds	r3, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe fe0f 	bl	8006690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a72:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <xTaskRemoveFromEventList+0xb0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d11d      	bne.n	8007ab6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fe06 	bl	8006690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a88:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <xTaskRemoveFromEventList+0xb4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d903      	bls.n	8007a98 <xTaskRemoveFromEventList+0x5c>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <xTaskRemoveFromEventList+0xb4>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4a13      	ldr	r2, [pc, #76]	; (8007af4 <xTaskRemoveFromEventList+0xb8>)
 8007aa6:	441a      	add	r2, r3
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fe fd91 	bl	80065d6 <vListInsertEnd>
 8007ab4:	e005      	b.n	8007ac2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3318      	adds	r3, #24
 8007aba:	4619      	mov	r1, r3
 8007abc:	480e      	ldr	r0, [pc, #56]	; (8007af8 <xTaskRemoveFromEventList+0xbc>)
 8007abe:	f7fe fd8a 	bl	80065d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <xTaskRemoveFromEventList+0xc0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d905      	bls.n	8007adc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <xTaskRemoveFromEventList+0xc4>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e001      	b.n	8007ae0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ae0:	697b      	ldr	r3, [r7, #20]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20002114 	.word	0x20002114
 8007af0:	200020f4 	.word	0x200020f4
 8007af4:	20001c1c 	.word	0x20001c1c
 8007af8:	200020ac 	.word	0x200020ac
 8007afc:	20001c18 	.word	0x20001c18
 8007b00:	20002100 	.word	0x20002100

08007b04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <vTaskInternalSetTimeOutState+0x24>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b14:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <vTaskInternalSetTimeOutState+0x28>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	605a      	str	r2, [r3, #4]
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	20002104 	.word	0x20002104
 8007b2c:	200020f0 	.word	0x200020f0

08007b30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	613b      	str	r3, [r7, #16]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60fb      	str	r3, [r7, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b72:	f000 fe7f 	bl	8008874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b76:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <xTaskCheckForTimeOut+0xbc>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d102      	bne.n	8007b96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	e023      	b.n	8007bde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <xTaskCheckForTimeOut+0xc0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d007      	beq.n	8007bb2 <xTaskCheckForTimeOut+0x82>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d302      	bcc.n	8007bb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bac:	2301      	movs	r3, #1
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	e015      	b.n	8007bde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d20b      	bcs.n	8007bd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	1ad2      	subs	r2, r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff ff9b 	bl	8007b04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61fb      	str	r3, [r7, #28]
 8007bd2:	e004      	b.n	8007bde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bde:	f000 fe79 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8007be2:	69fb      	ldr	r3, [r7, #28]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3720      	adds	r7, #32
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	200020f0 	.word	0x200020f0
 8007bf0:	20002104 	.word	0x20002104

08007bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <vTaskMissedYield+0x14>)
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
}
 8007bfe:	bf00      	nop
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	20002100 	.word	0x20002100

08007c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c14:	f000 f852 	bl	8007cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c18:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <prvIdleTask+0x28>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d9f9      	bls.n	8007c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <prvIdleTask+0x2c>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c30:	e7f0      	b.n	8007c14 <prvIdleTask+0x8>
 8007c32:	bf00      	nop
 8007c34:	20001c1c 	.word	0x20001c1c
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c42:	2300      	movs	r3, #0
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	e00c      	b.n	8007c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4a12      	ldr	r2, [pc, #72]	; (8007c9c <prvInitialiseTaskLists+0x60>)
 8007c54:	4413      	add	r3, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fc90 	bl	800657c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	607b      	str	r3, [r7, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b37      	cmp	r3, #55	; 0x37
 8007c66:	d9ef      	bls.n	8007c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c68:	480d      	ldr	r0, [pc, #52]	; (8007ca0 <prvInitialiseTaskLists+0x64>)
 8007c6a:	f7fe fc87 	bl	800657c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c6e:	480d      	ldr	r0, [pc, #52]	; (8007ca4 <prvInitialiseTaskLists+0x68>)
 8007c70:	f7fe fc84 	bl	800657c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c74:	480c      	ldr	r0, [pc, #48]	; (8007ca8 <prvInitialiseTaskLists+0x6c>)
 8007c76:	f7fe fc81 	bl	800657c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c7a:	480c      	ldr	r0, [pc, #48]	; (8007cac <prvInitialiseTaskLists+0x70>)
 8007c7c:	f7fe fc7e 	bl	800657c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c80:	480b      	ldr	r0, [pc, #44]	; (8007cb0 <prvInitialiseTaskLists+0x74>)
 8007c82:	f7fe fc7b 	bl	800657c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <prvInitialiseTaskLists+0x78>)
 8007c88:	4a05      	ldr	r2, [pc, #20]	; (8007ca0 <prvInitialiseTaskLists+0x64>)
 8007c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <prvInitialiseTaskLists+0x7c>)
 8007c8e:	4a05      	ldr	r2, [pc, #20]	; (8007ca4 <prvInitialiseTaskLists+0x68>)
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20001c1c 	.word	0x20001c1c
 8007ca0:	2000207c 	.word	0x2000207c
 8007ca4:	20002090 	.word	0x20002090
 8007ca8:	200020ac 	.word	0x200020ac
 8007cac:	200020c0 	.word	0x200020c0
 8007cb0:	200020d8 	.word	0x200020d8
 8007cb4:	200020a4 	.word	0x200020a4
 8007cb8:	200020a8 	.word	0x200020a8

08007cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cc2:	e019      	b.n	8007cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cc4:	f000 fdd6 	bl	8008874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc8:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <prvCheckTasksWaitingTermination+0x50>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fcdb 	bl	8006690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cda:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <prvCheckTasksWaitingTermination+0x54>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	4a0b      	ldr	r2, [pc, #44]	; (8007d10 <prvCheckTasksWaitingTermination+0x54>)
 8007ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <prvCheckTasksWaitingTermination+0x58>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	4a0a      	ldr	r2, [pc, #40]	; (8007d14 <prvCheckTasksWaitingTermination+0x58>)
 8007cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cee:	f000 fdf1 	bl	80088d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f810 	bl	8007d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <prvCheckTasksWaitingTermination+0x58>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e1      	bne.n	8007cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200020c0 	.word	0x200020c0
 8007d10:	200020ec 	.word	0x200020ec
 8007d14:	200020d4 	.word	0x200020d4

08007d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3354      	adds	r3, #84	; 0x54
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f907 	bl	8009f38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d108      	bne.n	8007d46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 ff89 	bl	8008c50 <vPortFree>
				vPortFree( pxTCB );
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 ff86 	bl	8008c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d44:	e018      	b.n	8007d78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d103      	bne.n	8007d58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 ff7d 	bl	8008c50 <vPortFree>
	}
 8007d56:	e00f      	b.n	8007d78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d00a      	beq.n	8007d78 <prvDeleteTCB+0x60>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	60fb      	str	r3, [r7, #12]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <prvDeleteTCB+0x5e>
	}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <prvResetNextTaskUnblockTime+0x38>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvResetNextTaskUnblockTime+0x3c>)
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d98:	e008      	b.n	8007dac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <prvResetNextTaskUnblockTime+0x38>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4a04      	ldr	r2, [pc, #16]	; (8007dbc <prvResetNextTaskUnblockTime+0x3c>)
 8007daa:	6013      	str	r3, [r2, #0]
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	200020a4 	.word	0x200020a4
 8007dbc:	2000210c 	.word	0x2000210c

08007dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <xTaskGetSchedulerState+0x34>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d102      	bne.n	8007dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	e008      	b.n	8007de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <xTaskGetSchedulerState+0x38>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	607b      	str	r3, [r7, #4]
 8007de0:	e001      	b.n	8007de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007de2:	2300      	movs	r3, #0
 8007de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007de6:	687b      	ldr	r3, [r7, #4]
	}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	200020f8 	.word	0x200020f8
 8007df8:	20002114 	.word	0x20002114

08007dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d056      	beq.n	8007ec0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e12:	4b2e      	ldr	r3, [pc, #184]	; (8007ecc <xTaskPriorityDisinherit+0xd0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d00a      	beq.n	8007e32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60bb      	str	r3, [r7, #8]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e54:	1e5a      	subs	r2, r3, #1
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d02c      	beq.n	8007ec0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d128      	bne.n	8007ec0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fc0c 	bl	8006690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <xTaskPriorityDisinherit+0xd4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d903      	bls.n	8007ea0 <xTaskPriorityDisinherit+0xa4>
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <xTaskPriorityDisinherit+0xd4>)
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <xTaskPriorityDisinherit+0xd8>)
 8007eae:	441a      	add	r2, r3
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fe fb8d 	bl	80065d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ec0:	697b      	ldr	r3, [r7, #20]
	}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20001c18 	.word	0x20001c18
 8007ed0:	200020f4 	.word	0x200020f4
 8007ed4:	20001c1c 	.word	0x20001c1c

08007ed8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ee2:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee8:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fbce 	bl	8006690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d10a      	bne.n	8007f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f02:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4819      	ldr	r0, [pc, #100]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f0c:	f7fe fb63 	bl	80065d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f10:	e026      	b.n	8007f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d209      	bcs.n	8007f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f2a:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f7fe fb71 	bl	800661e <vListInsert>
}
 8007f3c:	e010      	b.n	8007f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f7fe fb67 	bl	800661e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f50:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d202      	bcs.n	8007f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f5a:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	6013      	str	r3, [r2, #0]
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200020f0 	.word	0x200020f0
 8007f6c:	20001c18 	.word	0x20001c18
 8007f70:	200020d8 	.word	0x200020d8
 8007f74:	200020a8 	.word	0x200020a8
 8007f78:	200020a4 	.word	0x200020a4
 8007f7c:	2000210c 	.word	0x2000210c

08007f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f8a:	f000 fb07 	bl	800859c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f8e:	4b1c      	ldr	r3, [pc, #112]	; (8008000 <xTimerCreateTimerTask+0x80>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d021      	beq.n	8007fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f9e:	1d3a      	adds	r2, r7, #4
 8007fa0:	f107 0108 	add.w	r1, r7, #8
 8007fa4:	f107 030c 	add.w	r3, r7, #12
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe facd 	bl	8006548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	9202      	str	r2, [sp, #8]
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	2302      	movs	r3, #2
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	460a      	mov	r2, r1
 8007fc0:	4910      	ldr	r1, [pc, #64]	; (8008004 <xTimerCreateTimerTask+0x84>)
 8007fc2:	4811      	ldr	r0, [pc, #68]	; (8008008 <xTimerCreateTimerTask+0x88>)
 8007fc4:	f7ff f8b4 	bl	8007130 <xTaskCreateStatic>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	4a10      	ldr	r2, [pc, #64]	; (800800c <xTimerCreateTimerTask+0x8c>)
 8007fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <xTimerCreateTimerTask+0x8c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	613b      	str	r3, [r7, #16]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ff6:	697b      	ldr	r3, [r7, #20]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20002148 	.word	0x20002148
 8008004:	0800d950 	.word	0x0800d950
 8008008:	08008145 	.word	0x08008145
 800800c:	2000214c 	.word	0x2000214c

08008010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800801e:	2300      	movs	r3, #0
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	623b      	str	r3, [r7, #32]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800803e:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <xTimerGenericCommand+0x98>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d02a      	beq.n	800809c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b05      	cmp	r3, #5
 8008056:	dc18      	bgt.n	800808a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008058:	f7ff feb2 	bl	8007dc0 <xTaskGetSchedulerState>
 800805c:	4603      	mov	r3, r0
 800805e:	2b02      	cmp	r3, #2
 8008060:	d109      	bne.n	8008076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <xTimerGenericCommand+0x98>)
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	f107 0110 	add.w	r1, r7, #16
 800806a:	2300      	movs	r3, #0
 800806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806e:	f7fe fc77 	bl	8006960 <xQueueGenericSend>
 8008072:	6278      	str	r0, [r7, #36]	; 0x24
 8008074:	e012      	b.n	800809c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <xTimerGenericCommand+0x98>)
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f107 0110 	add.w	r1, r7, #16
 800807e:	2300      	movs	r3, #0
 8008080:	2200      	movs	r2, #0
 8008082:	f7fe fc6d 	bl	8006960 <xQueueGenericSend>
 8008086:	6278      	str	r0, [r7, #36]	; 0x24
 8008088:	e008      	b.n	800809c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <xTimerGenericCommand+0x98>)
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f107 0110 	add.w	r1, r7, #16
 8008092:	2300      	movs	r3, #0
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	f7fe fd61 	bl	8006b5c <xQueueGenericSendFromISR>
 800809a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3728      	adds	r7, #40	; 0x28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20002148 	.word	0x20002148

080080ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b6:	4b22      	ldr	r3, [pc, #136]	; (8008140 <prvProcessExpiredTimer+0x94>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fae3 	bl	8006690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d022      	beq.n	800811e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	18d1      	adds	r1, r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	6978      	ldr	r0, [r7, #20]
 80080e6:	f000 f8d1 	bl	800828c <prvInsertTimerInActiveList>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01f      	beq.n	8008130 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f0:	2300      	movs	r3, #0
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	2100      	movs	r1, #0
 80080fa:	6978      	ldr	r0, [r7, #20]
 80080fc:	f7ff ff88 	bl	8008010 <xTimerGenericCommand>
 8008100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d113      	bne.n	8008130 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	60fb      	str	r3, [r7, #12]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	6978      	ldr	r0, [r7, #20]
 8008136:	4798      	blx	r3
}
 8008138:	bf00      	nop
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20002140 	.word	0x20002140

08008144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f857 	bl	8008204 <prvGetNextExpireTime>
 8008156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4619      	mov	r1, r3
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f803 	bl	8008168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008162:	f000 f8d5 	bl	8008310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008166:	e7f1      	b.n	800814c <prvTimerTask+0x8>

08008168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008172:	f7ff fa39 	bl	80075e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f866 	bl	800824c <prvSampleTimeNow>
 8008180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d130      	bne.n	80081ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <prvProcessTimerOrBlockTask+0x3c>
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	429a      	cmp	r2, r3
 8008194:	d806      	bhi.n	80081a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008196:	f7ff fa35 	bl	8007604 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff ff85 	bl	80080ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081a2:	e024      	b.n	80081ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081aa:	4b13      	ldr	r3, [pc, #76]	; (80081f8 <prvProcessTimerOrBlockTask+0x90>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <prvProcessTimerOrBlockTask+0x50>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <prvProcessTimerOrBlockTask+0x52>
 80081b8:	2300      	movs	r3, #0
 80081ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <prvProcessTimerOrBlockTask+0x94>)
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4619      	mov	r1, r3
 80081ca:	f7fe ff7d 	bl	80070c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081ce:	f7ff fa19 	bl	8007604 <xTaskResumeAll>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081d8:	4b09      	ldr	r3, [pc, #36]	; (8008200 <prvProcessTimerOrBlockTask+0x98>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
}
 80081e8:	e001      	b.n	80081ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ea:	f7ff fa0b 	bl	8007604 <xTaskResumeAll>
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20002144 	.word	0x20002144
 80081fc:	20002148 	.word	0x20002148
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800820c:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <prvGetNextExpireTime+0x44>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <prvGetNextExpireTime+0x16>
 8008216:	2201      	movs	r2, #1
 8008218:	e000      	b.n	800821c <prvGetNextExpireTime+0x18>
 800821a:	2200      	movs	r2, #0
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <prvGetNextExpireTime+0x44>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e001      	b.n	8008238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008238:	68fb      	ldr	r3, [r7, #12]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20002140 	.word	0x20002140

0800824c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008254:	f7ff fa74 	bl	8007740 <xTaskGetTickCount>
 8008258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800825a:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <prvSampleTimeNow+0x3c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	429a      	cmp	r2, r3
 8008262:	d205      	bcs.n	8008270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008264:	f000 f936 	bl	80084d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	e002      	b.n	8008276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008276:	4a04      	ldr	r2, [pc, #16]	; (8008288 <prvSampleTimeNow+0x3c>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800827c:	68fb      	ldr	r3, [r7, #12]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20002150 	.word	0x20002150

0800828c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d812      	bhi.n	80082d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d302      	bcc.n	80082c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e01b      	b.n	80082fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <prvInsertTimerInActiveList+0x7c>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4619      	mov	r1, r3
 80082d0:	4610      	mov	r0, r2
 80082d2:	f7fe f9a4 	bl	800661e <vListInsert>
 80082d6:	e012      	b.n	80082fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d206      	bcs.n	80082ee <prvInsertTimerInActiveList+0x62>
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d302      	bcc.n	80082ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e007      	b.n	80082fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082ee:	4b07      	ldr	r3, [pc, #28]	; (800830c <prvInsertTimerInActiveList+0x80>)
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f7fe f990 	bl	800661e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082fe:	697b      	ldr	r3, [r7, #20]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20002144 	.word	0x20002144
 800830c:	20002140 	.word	0x20002140

08008310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08e      	sub	sp, #56	; 0x38
 8008314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008316:	e0ca      	b.n	80084ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da18      	bge.n	8008350 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800831e:	1d3b      	adds	r3, r7, #4
 8008320:	3304      	adds	r3, #4
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10a      	bne.n	8008340 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	61fb      	str	r3, [r7, #28]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008346:	6850      	ldr	r0, [r2, #4]
 8008348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834a:	6892      	ldr	r2, [r2, #8]
 800834c:	4611      	mov	r1, r2
 800834e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	f2c0 80aa 	blt.w	80084ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d004      	beq.n	800836e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	3304      	adds	r3, #4
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe f991 	bl	8006690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836e:	463b      	mov	r3, r7
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff ff6b 	bl	800824c <prvSampleTimeNow>
 8008376:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b09      	cmp	r3, #9
 800837c:	f200 8097 	bhi.w	80084ae <prvProcessReceivedCommands+0x19e>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <prvProcessReceivedCommands+0x78>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083b1 	.word	0x080083b1
 800838c:	080083b1 	.word	0x080083b1
 8008390:	080083b1 	.word	0x080083b1
 8008394:	08008425 	.word	0x08008425
 8008398:	08008439 	.word	0x08008439
 800839c:	08008483 	.word	0x08008483
 80083a0:	080083b1 	.word	0x080083b1
 80083a4:	080083b1 	.word	0x080083b1
 80083a8:	08008425 	.word	0x08008425
 80083ac:	08008439 	.word	0x08008439
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	18d1      	adds	r1, r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d0:	f7ff ff5c 	bl	800828c <prvInsertTimerInActiveList>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d069      	beq.n	80084ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05e      	beq.n	80084ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	441a      	add	r2, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2300      	movs	r3, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008402:	f7ff fe05 	bl	8008010 <xTimerGenericCommand>
 8008406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d14f      	bne.n	80084ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	61bb      	str	r3, [r7, #24]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800842a:	f023 0301 	bic.w	r3, r3, #1
 800842e:	b2da      	uxtb	r2, r3
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008436:	e03a      	b.n	80084ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	617b      	str	r3, [r7, #20]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	18d1      	adds	r1, r2, r3
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847c:	f7ff ff06 	bl	800828c <prvInsertTimerInActiveList>
					break;
 8008480:	e015      	b.n	80084ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008492:	f000 fbdd 	bl	8008c50 <vPortFree>
 8008496:	e00a      	b.n	80084ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084aa:	e000      	b.n	80084ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ae:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <prvProcessReceivedCommands+0x1c0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	1d39      	adds	r1, r7, #4
 80084b4:	2200      	movs	r2, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fbec 	bl	8006c94 <xQueueReceive>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f47f af2a 	bne.w	8008318 <prvProcessReceivedCommands+0x8>
	}
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	3730      	adds	r7, #48	; 0x30
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20002148 	.word	0x20002148

080084d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084da:	e048      	b.n	800856e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084dc:	4b2d      	ldr	r3, [pc, #180]	; (8008594 <prvSwitchTimerLists+0xc0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e6:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <prvSwitchTimerLists+0xc0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe f8cb 	bl	8006690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02e      	beq.n	800856e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	429a      	cmp	r2, r3
 8008520:	d90e      	bls.n	8008540 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800852e:	4b19      	ldr	r3, [pc, #100]	; (8008594 <prvSwitchTimerLists+0xc0>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3304      	adds	r3, #4
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f7fe f870 	bl	800661e <vListInsert>
 800853e:	e016      	b.n	800856e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008540:	2300      	movs	r3, #0
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	2300      	movs	r3, #0
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	2100      	movs	r1, #0
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff fd60 	bl	8008010 <xTimerGenericCommand>
 8008550:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	603b      	str	r3, [r7, #0]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <prvSwitchTimerLists+0xc0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1b1      	bne.n	80084dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008578:	4b06      	ldr	r3, [pc, #24]	; (8008594 <prvSwitchTimerLists+0xc0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <prvSwitchTimerLists+0xc4>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a04      	ldr	r2, [pc, #16]	; (8008594 <prvSwitchTimerLists+0xc0>)
 8008584:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008586:	4a04      	ldr	r2, [pc, #16]	; (8008598 <prvSwitchTimerLists+0xc4>)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	6013      	str	r3, [r2, #0]
}
 800858c:	bf00      	nop
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20002140 	.word	0x20002140
 8008598:	20002144 	.word	0x20002144

0800859c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085a2:	f000 f967 	bl	8008874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085a6:	4b15      	ldr	r3, [pc, #84]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d120      	bne.n	80085f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085ae:	4814      	ldr	r0, [pc, #80]	; (8008600 <prvCheckForValidListAndQueue+0x64>)
 80085b0:	f7fd ffe4 	bl	800657c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085b4:	4813      	ldr	r0, [pc, #76]	; (8008604 <prvCheckForValidListAndQueue+0x68>)
 80085b6:	f7fd ffe1 	bl	800657c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <prvCheckForValidListAndQueue+0x6c>)
 80085bc:	4a10      	ldr	r2, [pc, #64]	; (8008600 <prvCheckForValidListAndQueue+0x64>)
 80085be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085c0:	4b12      	ldr	r3, [pc, #72]	; (800860c <prvCheckForValidListAndQueue+0x70>)
 80085c2:	4a10      	ldr	r2, [pc, #64]	; (8008604 <prvCheckForValidListAndQueue+0x68>)
 80085c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085c6:	2300      	movs	r3, #0
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	4b11      	ldr	r3, [pc, #68]	; (8008610 <prvCheckForValidListAndQueue+0x74>)
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <prvCheckForValidListAndQueue+0x78>)
 80085ce:	2110      	movs	r1, #16
 80085d0:	200a      	movs	r0, #10
 80085d2:	f7fe f8ef 	bl	80067b4 <xQueueGenericCreateStatic>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4a08      	ldr	r2, [pc, #32]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085dc:	4b07      	ldr	r3, [pc, #28]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <prvCheckForValidListAndQueue+0x60>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	490b      	ldr	r1, [pc, #44]	; (8008618 <prvCheckForValidListAndQueue+0x7c>)
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fd42 	bl	8007074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f0:	f000 f970 	bl	80088d4 <vPortExitCritical>
}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20002148 	.word	0x20002148
 8008600:	20002118 	.word	0x20002118
 8008604:	2000212c 	.word	0x2000212c
 8008608:	20002140 	.word	0x20002140
 800860c:	20002144 	.word	0x20002144
 8008610:	200021f4 	.word	0x200021f4
 8008614:	20002154 	.word	0x20002154
 8008618:	0800d958 	.word	0x0800d958

0800861c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3b04      	subs	r3, #4
 800862c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3b04      	subs	r3, #4
 800863a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 0201 	bic.w	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b04      	subs	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800864c:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <pxPortInitialiseStack+0x64>)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b14      	subs	r3, #20
 8008656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b04      	subs	r3, #4
 8008662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f06f 0202 	mvn.w	r2, #2
 800866a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3b20      	subs	r3, #32
 8008670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	08008685 	.word	0x08008685

08008684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800868e:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <prvTaskExitError+0x54>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d00a      	beq.n	80086ae <prvTaskExitError+0x2a>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	60fb      	str	r3, [r7, #12]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <prvTaskExitError+0x28>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
}
 80086c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086c2:	bf00      	nop
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0fc      	beq.n	80086c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	2000000c 	.word	0x2000000c
 80086dc:	00000000 	.word	0x00000000

080086e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <pxCurrentTCBConst2>)
 80086e2:	6819      	ldr	r1, [r3, #0]
 80086e4:	6808      	ldr	r0, [r1, #0]
 80086e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	f380 8809 	msr	PSP, r0
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8811 	msr	BASEPRI, r0
 80086fa:	4770      	bx	lr
 80086fc:	f3af 8000 	nop.w

08008700 <pxCurrentTCBConst2>:
 8008700:	20001c18 	.word	0x20001c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop

08008708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008708:	4808      	ldr	r0, [pc, #32]	; (800872c <prvPortStartFirstTask+0x24>)
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f380 8808 	msr	MSP, r0
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8814 	msr	CONTROL, r0
 800871a:	b662      	cpsie	i
 800871c:	b661      	cpsie	f
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	df00      	svc	0
 8008728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800872a:	bf00      	nop
 800872c:	e000ed08 	.word	0xe000ed08

08008730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008736:	4b46      	ldr	r3, [pc, #280]	; (8008850 <xPortStartScheduler+0x120>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a46      	ldr	r2, [pc, #280]	; (8008854 <xPortStartScheduler+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d10a      	bne.n	8008756 <xPortStartScheduler+0x26>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	613b      	str	r3, [r7, #16]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008756:	4b3e      	ldr	r3, [pc, #248]	; (8008850 <xPortStartScheduler+0x120>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a3f      	ldr	r2, [pc, #252]	; (8008858 <xPortStartScheduler+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10a      	bne.n	8008776 <xPortStartScheduler+0x46>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008776:	4b39      	ldr	r3, [pc, #228]	; (800885c <xPortStartScheduler+0x12c>)
 8008778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	22ff      	movs	r2, #255	; 0xff
 8008786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008798:	b2da      	uxtb	r2, r3
 800879a:	4b31      	ldr	r3, [pc, #196]	; (8008860 <xPortStartScheduler+0x130>)
 800879c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800879e:	4b31      	ldr	r3, [pc, #196]	; (8008864 <xPortStartScheduler+0x134>)
 80087a0:	2207      	movs	r2, #7
 80087a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087a4:	e009      	b.n	80087ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087a6:	4b2f      	ldr	r3, [pc, #188]	; (8008864 <xPortStartScheduler+0x134>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4a2d      	ldr	r2, [pc, #180]	; (8008864 <xPortStartScheduler+0x134>)
 80087ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d0ef      	beq.n	80087a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087c6:	4b27      	ldr	r3, [pc, #156]	; (8008864 <xPortStartScheduler+0x134>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f1c3 0307 	rsb	r3, r3, #7
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d00a      	beq.n	80087e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <xPortStartScheduler+0x134>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <xPortStartScheduler+0x134>)
 80087f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087f2:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <xPortStartScheduler+0x134>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087fa:	4a1a      	ldr	r2, [pc, #104]	; (8008864 <xPortStartScheduler+0x134>)
 80087fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008806:	4b18      	ldr	r3, [pc, #96]	; (8008868 <xPortStartScheduler+0x138>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a17      	ldr	r2, [pc, #92]	; (8008868 <xPortStartScheduler+0x138>)
 800880c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <xPortStartScheduler+0x138>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a14      	ldr	r2, [pc, #80]	; (8008868 <xPortStartScheduler+0x138>)
 8008818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800881c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800881e:	f000 f8dd 	bl	80089dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <xPortStartScheduler+0x13c>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008828:	f000 f8fc 	bl	8008a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <xPortStartScheduler+0x140>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <xPortStartScheduler+0x140>)
 8008832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008838:	f7ff ff66 	bl	8008708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800883c:	f7ff f84a 	bl	80078d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008840:	f7ff ff20 	bl	8008684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	e000ed00 	.word	0xe000ed00
 8008854:	410fc271 	.word	0x410fc271
 8008858:	410fc270 	.word	0x410fc270
 800885c:	e000e400 	.word	0xe000e400
 8008860:	20002244 	.word	0x20002244
 8008864:	20002248 	.word	0x20002248
 8008868:	e000ed20 	.word	0xe000ed20
 800886c:	2000000c 	.word	0x2000000c
 8008870:	e000ef34 	.word	0xe000ef34

08008874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <vPortEnterCritical+0x58>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <vPortEnterCritical+0x58>)
 8008896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <vPortEnterCritical+0x58>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10f      	bne.n	80088c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortEnterCritical+0x5c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	603b      	str	r3, [r7, #0]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <vPortEnterCritical+0x4a>
	}
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	2000000c 	.word	0x2000000c
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <vPortExitCritical+0x50>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <vPortExitCritical+0x24>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	607b      	str	r3, [r7, #4]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <vPortExitCritical+0x50>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <vPortExitCritical+0x50>)
 8008900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <vPortExitCritical+0x50>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <vPortExitCritical+0x42>
 800890a:	2300      	movs	r3, #0
 800890c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f383 8811 	msr	BASEPRI, r3
}
 8008914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	2000000c 	.word	0x2000000c
	...

08008930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008930:	f3ef 8009 	mrs	r0, PSP
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <pxCurrentTCBConst>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	f01e 0f10 	tst.w	lr, #16
 8008940:	bf08      	it	eq
 8008942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	6010      	str	r0, [r2, #0]
 800894c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008954:	f380 8811 	msr	BASEPRI, r0
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f7fe ffb8 	bl	80078d4 <vTaskSwitchContext>
 8008964:	f04f 0000 	mov.w	r0, #0
 8008968:	f380 8811 	msr	BASEPRI, r0
 800896c:	bc09      	pop	{r0, r3}
 800896e:	6819      	ldr	r1, [r3, #0]
 8008970:	6808      	ldr	r0, [r1, #0]
 8008972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008976:	f01e 0f10 	tst.w	lr, #16
 800897a:	bf08      	it	eq
 800897c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008980:	f380 8809 	msr	PSP, r0
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w

08008990 <pxCurrentTCBConst>:
 8008990:	20001c18 	.word	0x20001c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089b2:	f7fe fed5 	bl	8007760 <xTaskIncrementTick>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <xPortSysTickHandler+0x40>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f383 8811 	msr	BASEPRI, r3
}
 80089ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <vPortSetupTimerInterrupt+0x34>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <vPortSetupTimerInterrupt+0x38>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <vPortSetupTimerInterrupt+0x3c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <vPortSetupTimerInterrupt+0x40>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	099b      	lsrs	r3, r3, #6
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <vPortSetupTimerInterrupt+0x44>)
 80089fa:	3b01      	subs	r3, #1
 80089fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089fe:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <vPortSetupTimerInterrupt+0x34>)
 8008a00:	2207      	movs	r2, #7
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	e000e010 	.word	0xe000e010
 8008a14:	e000e018 	.word	0xe000e018
 8008a18:	20000000 	.word	0x20000000
 8008a1c:	10624dd3 	.word	0x10624dd3
 8008a20:	e000e014 	.word	0xe000e014

08008a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a34 <vPortEnableVFP+0x10>
 8008a28:	6801      	ldr	r1, [r0, #0]
 8008a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a2e:	6001      	str	r1, [r0, #0]
 8008a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a32:	bf00      	nop
 8008a34:	e000ed88 	.word	0xe000ed88

08008a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a3e:	f3ef 8305 	mrs	r3, IPSR
 8008a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b0f      	cmp	r3, #15
 8008a48:	d914      	bls.n	8008a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a4a:	4a17      	ldr	r2, [pc, #92]	; (8008aa8 <vPortValidateInterruptPriority+0x70>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a54:	4b15      	ldr	r3, [pc, #84]	; (8008aac <vPortValidateInterruptPriority+0x74>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	7afa      	ldrb	r2, [r7, #11]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d20a      	bcs.n	8008a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	607b      	str	r3, [r7, #4]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <vPortValidateInterruptPriority+0x78>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a7c:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <vPortValidateInterruptPriority+0x7c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d90a      	bls.n	8008a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	603b      	str	r3, [r7, #0]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <vPortValidateInterruptPriority+0x60>
	}
 8008a9a:	bf00      	nop
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	e000e3f0 	.word	0xe000e3f0
 8008aac:	20002244 	.word	0x20002244
 8008ab0:	e000ed0c 	.word	0xe000ed0c
 8008ab4:	20002248 	.word	0x20002248

08008ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08a      	sub	sp, #40	; 0x28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ac4:	f7fe fd90 	bl	80075e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ac8:	4b5b      	ldr	r3, [pc, #364]	; (8008c38 <pvPortMalloc+0x180>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ad0:	f000 f920 	bl	8008d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ad4:	4b59      	ldr	r3, [pc, #356]	; (8008c3c <pvPortMalloc+0x184>)
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 8093 	bne.w	8008c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01d      	beq.n	8008b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ae8:	2208      	movs	r2, #8
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d014      	beq.n	8008b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f023 0307 	bic.w	r3, r3, #7
 8008b00:	3308      	adds	r3, #8
 8008b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <pvPortMalloc+0x6c>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d06e      	beq.n	8008c08 <pvPortMalloc+0x150>
 8008b2a:	4b45      	ldr	r3, [pc, #276]	; (8008c40 <pvPortMalloc+0x188>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d869      	bhi.n	8008c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b34:	4b43      	ldr	r3, [pc, #268]	; (8008c44 <pvPortMalloc+0x18c>)
 8008b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b38:	4b42      	ldr	r3, [pc, #264]	; (8008c44 <pvPortMalloc+0x18c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b3e:	e004      	b.n	8008b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d903      	bls.n	8008b5c <pvPortMalloc+0xa4>
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f1      	bne.n	8008b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b5c:	4b36      	ldr	r3, [pc, #216]	; (8008c38 <pvPortMalloc+0x180>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d050      	beq.n	8008c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2208      	movs	r2, #8
 8008b6c:	4413      	add	r3, r2
 8008b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	2308      	movs	r3, #8
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d91f      	bls.n	8008bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	613b      	str	r3, [r7, #16]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	1ad2      	subs	r2, r2, r3
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bc2:	69b8      	ldr	r0, [r7, #24]
 8008bc4:	f000 f908 	bl	8008dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bc8:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <pvPortMalloc+0x188>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	4a1b      	ldr	r2, [pc, #108]	; (8008c40 <pvPortMalloc+0x188>)
 8008bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bd6:	4b1a      	ldr	r3, [pc, #104]	; (8008c40 <pvPortMalloc+0x188>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <pvPortMalloc+0x190>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d203      	bcs.n	8008bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008be2:	4b17      	ldr	r3, [pc, #92]	; (8008c40 <pvPortMalloc+0x188>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <pvPortMalloc+0x190>)
 8008be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <pvPortMalloc+0x184>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bfe:	4b13      	ldr	r3, [pc, #76]	; (8008c4c <pvPortMalloc+0x194>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a11      	ldr	r2, [pc, #68]	; (8008c4c <pvPortMalloc+0x194>)
 8008c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c08:	f7fe fcfc 	bl	8007604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <pvPortMalloc+0x174>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
}
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <pvPortMalloc+0x172>
	return pvReturn;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3728      	adds	r7, #40	; 0x28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20002e54 	.word	0x20002e54
 8008c3c:	20002e68 	.word	0x20002e68
 8008c40:	20002e58 	.word	0x20002e58
 8008c44:	20002e4c 	.word	0x20002e4c
 8008c48:	20002e5c 	.word	0x20002e5c
 8008c4c:	20002e60 	.word	0x20002e60

08008c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d04d      	beq.n	8008cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c62:	2308      	movs	r3, #8
 8008c64:	425b      	negs	r3, r3
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4413      	add	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <vPortFree+0xb8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <vPortFree+0x44>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	60fb      	str	r3, [r7, #12]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00a      	beq.n	8008cb2 <vPortFree+0x62>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	60bb      	str	r3, [r7, #8]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <vPortFree+0xb8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01e      	beq.n	8008cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d11a      	bne.n	8008cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <vPortFree+0xb8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cd8:	f7fe fc86 	bl	80075e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <vPortFree+0xbc>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <vPortFree+0xbc>)
 8008ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f000 f874 	bl	8008dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cf0:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <vPortFree+0xc0>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	4a06      	ldr	r2, [pc, #24]	; (8008d10 <vPortFree+0xc0>)
 8008cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cfa:	f7fe fc83 	bl	8007604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cfe:	bf00      	nop
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20002e68 	.word	0x20002e68
 8008d0c:	20002e58 	.word	0x20002e58
 8008d10:	20002e64 	.word	0x20002e64

08008d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d20:	4b27      	ldr	r3, [pc, #156]	; (8008dc0 <prvHeapInit+0xac>)
 8008d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3307      	adds	r3, #7
 8008d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0307 	bic.w	r3, r3, #7
 8008d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	4a1f      	ldr	r2, [pc, #124]	; (8008dc0 <prvHeapInit+0xac>)
 8008d44:	4413      	add	r3, r2
 8008d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d4c:	4a1d      	ldr	r2, [pc, #116]	; (8008dc4 <prvHeapInit+0xb0>)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d52:	4b1c      	ldr	r3, [pc, #112]	; (8008dc4 <prvHeapInit+0xb0>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d60:	2208      	movs	r2, #8
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4a15      	ldr	r2, [pc, #84]	; (8008dc8 <prvHeapInit+0xb4>)
 8008d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <prvHeapInit+0xb4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <prvHeapInit+0xb4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <prvHeapInit+0xb4>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <prvHeapInit+0xb8>)
 8008da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <prvHeapInit+0xbc>)
 8008daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dac:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <prvHeapInit+0xc0>)
 8008dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008db2:	601a      	str	r2, [r3, #0]
}
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	2000224c 	.word	0x2000224c
 8008dc4:	20002e4c 	.word	0x20002e4c
 8008dc8:	20002e54 	.word	0x20002e54
 8008dcc:	20002e5c 	.word	0x20002e5c
 8008dd0:	20002e58 	.word	0x20002e58
 8008dd4:	20002e68 	.word	0x20002e68

08008dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008de0:	4b28      	ldr	r3, [pc, #160]	; (8008e84 <prvInsertBlockIntoFreeList+0xac>)
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e002      	b.n	8008dec <prvInsertBlockIntoFreeList+0x14>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d8f7      	bhi.n	8008de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4413      	add	r3, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d108      	bne.n	8008e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	441a      	add	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	441a      	add	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d118      	bne.n	8008e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <prvInsertBlockIntoFreeList+0xb0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d00d      	beq.n	8008e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	441a      	add	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e008      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e56:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <prvInsertBlockIntoFreeList+0xb0>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e003      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d002      	beq.n	8008e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20002e4c 	.word	0x20002e4c
 8008e88:	20002e54 	.word	0x20002e54

08008e8c <__errno>:
 8008e8c:	4b01      	ldr	r3, [pc, #4]	; (8008e94 <__errno+0x8>)
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20000010 	.word	0x20000010

08008e98 <std>:
 8008e98:	2300      	movs	r3, #0
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ea6:	6083      	str	r3, [r0, #8]
 8008ea8:	8181      	strh	r1, [r0, #12]
 8008eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8008eac:	81c2      	strh	r2, [r0, #14]
 8008eae:	6183      	str	r3, [r0, #24]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	305c      	adds	r0, #92	; 0x5c
 8008eb6:	f000 f91a 	bl	80090ee <memset>
 8008eba:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <std+0x38>)
 8008ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <std+0x3c>)
 8008ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <std+0x40>)
 8008ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <std+0x44>)
 8008ec8:	6224      	str	r4, [r4, #32]
 8008eca:	6323      	str	r3, [r4, #48]	; 0x30
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	bf00      	nop
 8008ed0:	0800a05d 	.word	0x0800a05d
 8008ed4:	0800a07f 	.word	0x0800a07f
 8008ed8:	0800a0b7 	.word	0x0800a0b7
 8008edc:	0800a0db 	.word	0x0800a0db

08008ee0 <_cleanup_r>:
 8008ee0:	4901      	ldr	r1, [pc, #4]	; (8008ee8 <_cleanup_r+0x8>)
 8008ee2:	f000 b8af 	b.w	8009044 <_fwalk_reent>
 8008ee6:	bf00      	nop
 8008ee8:	0800bc89 	.word	0x0800bc89

08008eec <__sfmoreglue>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	2268      	movs	r2, #104	; 0x68
 8008ef0:	1e4d      	subs	r5, r1, #1
 8008ef2:	4355      	muls	r5, r2
 8008ef4:	460e      	mov	r6, r1
 8008ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008efa:	f000 f921 	bl	8009140 <_malloc_r>
 8008efe:	4604      	mov	r4, r0
 8008f00:	b140      	cbz	r0, 8008f14 <__sfmoreglue+0x28>
 8008f02:	2100      	movs	r1, #0
 8008f04:	e9c0 1600 	strd	r1, r6, [r0]
 8008f08:	300c      	adds	r0, #12
 8008f0a:	60a0      	str	r0, [r4, #8]
 8008f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f10:	f000 f8ed 	bl	80090ee <memset>
 8008f14:	4620      	mov	r0, r4
 8008f16:	bd70      	pop	{r4, r5, r6, pc}

08008f18 <__sfp_lock_acquire>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__sfp_lock_acquire+0x8>)
 8008f1a:	f000 b8d8 	b.w	80090ce <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20002e6d 	.word	0x20002e6d

08008f24 <__sfp_lock_release>:
 8008f24:	4801      	ldr	r0, [pc, #4]	; (8008f2c <__sfp_lock_release+0x8>)
 8008f26:	f000 b8d3 	b.w	80090d0 <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	20002e6d 	.word	0x20002e6d

08008f30 <__sinit_lock_acquire>:
 8008f30:	4801      	ldr	r0, [pc, #4]	; (8008f38 <__sinit_lock_acquire+0x8>)
 8008f32:	f000 b8cc 	b.w	80090ce <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	20002e6e 	.word	0x20002e6e

08008f3c <__sinit_lock_release>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__sinit_lock_release+0x8>)
 8008f3e:	f000 b8c7 	b.w	80090d0 <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	20002e6e 	.word	0x20002e6e

08008f48 <__sinit>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	f7ff fff0 	bl	8008f30 <__sinit_lock_acquire>
 8008f50:	69a3      	ldr	r3, [r4, #24]
 8008f52:	b11b      	cbz	r3, 8008f5c <__sinit+0x14>
 8008f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f58:	f7ff bff0 	b.w	8008f3c <__sinit_lock_release>
 8008f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f60:	6523      	str	r3, [r4, #80]	; 0x50
 8008f62:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <__sinit+0x68>)
 8008f64:	4a13      	ldr	r2, [pc, #76]	; (8008fb4 <__sinit+0x6c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	bf04      	itt	eq
 8008f6e:	2301      	moveq	r3, #1
 8008f70:	61a3      	streq	r3, [r4, #24]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f820 	bl	8008fb8 <__sfp>
 8008f78:	6060      	str	r0, [r4, #4]
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 f81c 	bl	8008fb8 <__sfp>
 8008f80:	60a0      	str	r0, [r4, #8]
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f818 	bl	8008fb8 <__sfp>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	60e0      	str	r0, [r4, #12]
 8008f8c:	2104      	movs	r1, #4
 8008f8e:	6860      	ldr	r0, [r4, #4]
 8008f90:	f7ff ff82 	bl	8008e98 <std>
 8008f94:	68a0      	ldr	r0, [r4, #8]
 8008f96:	2201      	movs	r2, #1
 8008f98:	2109      	movs	r1, #9
 8008f9a:	f7ff ff7d 	bl	8008e98 <std>
 8008f9e:	68e0      	ldr	r0, [r4, #12]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	2112      	movs	r1, #18
 8008fa4:	f7ff ff78 	bl	8008e98 <std>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	61a3      	str	r3, [r4, #24]
 8008fac:	e7d2      	b.n	8008f54 <__sinit+0xc>
 8008fae:	bf00      	nop
 8008fb0:	0800db14 	.word	0x0800db14
 8008fb4:	08008ee1 	.word	0x08008ee1

08008fb8 <__sfp>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	4607      	mov	r7, r0
 8008fbc:	f7ff ffac 	bl	8008f18 <__sfp_lock_acquire>
 8008fc0:	4b1e      	ldr	r3, [pc, #120]	; (800903c <__sfp+0x84>)
 8008fc2:	681e      	ldr	r6, [r3, #0]
 8008fc4:	69b3      	ldr	r3, [r6, #24]
 8008fc6:	b913      	cbnz	r3, 8008fce <__sfp+0x16>
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ffbd 	bl	8008f48 <__sinit>
 8008fce:	3648      	adds	r6, #72	; 0x48
 8008fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	d503      	bpl.n	8008fe0 <__sfp+0x28>
 8008fd8:	6833      	ldr	r3, [r6, #0]
 8008fda:	b30b      	cbz	r3, 8009020 <__sfp+0x68>
 8008fdc:	6836      	ldr	r6, [r6, #0]
 8008fde:	e7f7      	b.n	8008fd0 <__sfp+0x18>
 8008fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fe4:	b9d5      	cbnz	r5, 800901c <__sfp+0x64>
 8008fe6:	4b16      	ldr	r3, [pc, #88]	; (8009040 <__sfp+0x88>)
 8008fe8:	60e3      	str	r3, [r4, #12]
 8008fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fee:	6665      	str	r5, [r4, #100]	; 0x64
 8008ff0:	f000 f86c 	bl	80090cc <__retarget_lock_init_recursive>
 8008ff4:	f7ff ff96 	bl	8008f24 <__sfp_lock_release>
 8008ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009000:	6025      	str	r5, [r4, #0]
 8009002:	61a5      	str	r5, [r4, #24]
 8009004:	2208      	movs	r2, #8
 8009006:	4629      	mov	r1, r5
 8009008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800900c:	f000 f86f 	bl	80090ee <memset>
 8009010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009018:	4620      	mov	r0, r4
 800901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901c:	3468      	adds	r4, #104	; 0x68
 800901e:	e7d9      	b.n	8008fd4 <__sfp+0x1c>
 8009020:	2104      	movs	r1, #4
 8009022:	4638      	mov	r0, r7
 8009024:	f7ff ff62 	bl	8008eec <__sfmoreglue>
 8009028:	4604      	mov	r4, r0
 800902a:	6030      	str	r0, [r6, #0]
 800902c:	2800      	cmp	r0, #0
 800902e:	d1d5      	bne.n	8008fdc <__sfp+0x24>
 8009030:	f7ff ff78 	bl	8008f24 <__sfp_lock_release>
 8009034:	230c      	movs	r3, #12
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	e7ee      	b.n	8009018 <__sfp+0x60>
 800903a:	bf00      	nop
 800903c:	0800db14 	.word	0x0800db14
 8009040:	ffff0001 	.word	0xffff0001

08009044 <_fwalk_reent>:
 8009044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009048:	4606      	mov	r6, r0
 800904a:	4688      	mov	r8, r1
 800904c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009050:	2700      	movs	r7, #0
 8009052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009056:	f1b9 0901 	subs.w	r9, r9, #1
 800905a:	d505      	bpl.n	8009068 <_fwalk_reent+0x24>
 800905c:	6824      	ldr	r4, [r4, #0]
 800905e:	2c00      	cmp	r4, #0
 8009060:	d1f7      	bne.n	8009052 <_fwalk_reent+0xe>
 8009062:	4638      	mov	r0, r7
 8009064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009068:	89ab      	ldrh	r3, [r5, #12]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d907      	bls.n	800907e <_fwalk_reent+0x3a>
 800906e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009072:	3301      	adds	r3, #1
 8009074:	d003      	beq.n	800907e <_fwalk_reent+0x3a>
 8009076:	4629      	mov	r1, r5
 8009078:	4630      	mov	r0, r6
 800907a:	47c0      	blx	r8
 800907c:	4307      	orrs	r7, r0
 800907e:	3568      	adds	r5, #104	; 0x68
 8009080:	e7e9      	b.n	8009056 <_fwalk_reent+0x12>
	...

08009084 <__libc_init_array>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	4d0d      	ldr	r5, [pc, #52]	; (80090bc <__libc_init_array+0x38>)
 8009088:	4c0d      	ldr	r4, [pc, #52]	; (80090c0 <__libc_init_array+0x3c>)
 800908a:	1b64      	subs	r4, r4, r5
 800908c:	10a4      	asrs	r4, r4, #2
 800908e:	2600      	movs	r6, #0
 8009090:	42a6      	cmp	r6, r4
 8009092:	d109      	bne.n	80090a8 <__libc_init_array+0x24>
 8009094:	4d0b      	ldr	r5, [pc, #44]	; (80090c4 <__libc_init_array+0x40>)
 8009096:	4c0c      	ldr	r4, [pc, #48]	; (80090c8 <__libc_init_array+0x44>)
 8009098:	f004 fc08 	bl	800d8ac <_init>
 800909c:	1b64      	subs	r4, r4, r5
 800909e:	10a4      	asrs	r4, r4, #2
 80090a0:	2600      	movs	r6, #0
 80090a2:	42a6      	cmp	r6, r4
 80090a4:	d105      	bne.n	80090b2 <__libc_init_array+0x2e>
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ac:	4798      	blx	r3
 80090ae:	3601      	adds	r6, #1
 80090b0:	e7ee      	b.n	8009090 <__libc_init_array+0xc>
 80090b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b6:	4798      	blx	r3
 80090b8:	3601      	adds	r6, #1
 80090ba:	e7f2      	b.n	80090a2 <__libc_init_array+0x1e>
 80090bc:	0800df64 	.word	0x0800df64
 80090c0:	0800df64 	.word	0x0800df64
 80090c4:	0800df64 	.word	0x0800df64
 80090c8:	0800df68 	.word	0x0800df68

080090cc <__retarget_lock_init_recursive>:
 80090cc:	4770      	bx	lr

080090ce <__retarget_lock_acquire_recursive>:
 80090ce:	4770      	bx	lr

080090d0 <__retarget_lock_release_recursive>:
 80090d0:	4770      	bx	lr

080090d2 <memcpy>:
 80090d2:	440a      	add	r2, r1
 80090d4:	4291      	cmp	r1, r2
 80090d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80090da:	d100      	bne.n	80090de <memcpy+0xc>
 80090dc:	4770      	bx	lr
 80090de:	b510      	push	{r4, lr}
 80090e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090e8:	4291      	cmp	r1, r2
 80090ea:	d1f9      	bne.n	80090e0 <memcpy+0xe>
 80090ec:	bd10      	pop	{r4, pc}

080090ee <memset>:
 80090ee:	4402      	add	r2, r0
 80090f0:	4603      	mov	r3, r0
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d100      	bne.n	80090f8 <memset+0xa>
 80090f6:	4770      	bx	lr
 80090f8:	f803 1b01 	strb.w	r1, [r3], #1
 80090fc:	e7f9      	b.n	80090f2 <memset+0x4>
	...

08009100 <sbrk_aligned>:
 8009100:	b570      	push	{r4, r5, r6, lr}
 8009102:	4e0e      	ldr	r6, [pc, #56]	; (800913c <sbrk_aligned+0x3c>)
 8009104:	460c      	mov	r4, r1
 8009106:	6831      	ldr	r1, [r6, #0]
 8009108:	4605      	mov	r5, r0
 800910a:	b911      	cbnz	r1, 8009112 <sbrk_aligned+0x12>
 800910c:	f000 ff70 	bl	8009ff0 <_sbrk_r>
 8009110:	6030      	str	r0, [r6, #0]
 8009112:	4621      	mov	r1, r4
 8009114:	4628      	mov	r0, r5
 8009116:	f000 ff6b 	bl	8009ff0 <_sbrk_r>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	d00a      	beq.n	8009134 <sbrk_aligned+0x34>
 800911e:	1cc4      	adds	r4, r0, #3
 8009120:	f024 0403 	bic.w	r4, r4, #3
 8009124:	42a0      	cmp	r0, r4
 8009126:	d007      	beq.n	8009138 <sbrk_aligned+0x38>
 8009128:	1a21      	subs	r1, r4, r0
 800912a:	4628      	mov	r0, r5
 800912c:	f000 ff60 	bl	8009ff0 <_sbrk_r>
 8009130:	3001      	adds	r0, #1
 8009132:	d101      	bne.n	8009138 <sbrk_aligned+0x38>
 8009134:	f04f 34ff 	mov.w	r4, #4294967295
 8009138:	4620      	mov	r0, r4
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	20002e74 	.word	0x20002e74

08009140 <_malloc_r>:
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	1ccd      	adds	r5, r1, #3
 8009146:	f025 0503 	bic.w	r5, r5, #3
 800914a:	3508      	adds	r5, #8
 800914c:	2d0c      	cmp	r5, #12
 800914e:	bf38      	it	cc
 8009150:	250c      	movcc	r5, #12
 8009152:	2d00      	cmp	r5, #0
 8009154:	4607      	mov	r7, r0
 8009156:	db01      	blt.n	800915c <_malloc_r+0x1c>
 8009158:	42a9      	cmp	r1, r5
 800915a:	d905      	bls.n	8009168 <_malloc_r+0x28>
 800915c:	230c      	movs	r3, #12
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	2600      	movs	r6, #0
 8009162:	4630      	mov	r0, r6
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	4e2e      	ldr	r6, [pc, #184]	; (8009224 <_malloc_r+0xe4>)
 800916a:	f003 f969 	bl	800c440 <__malloc_lock>
 800916e:	6833      	ldr	r3, [r6, #0]
 8009170:	461c      	mov	r4, r3
 8009172:	bb34      	cbnz	r4, 80091c2 <_malloc_r+0x82>
 8009174:	4629      	mov	r1, r5
 8009176:	4638      	mov	r0, r7
 8009178:	f7ff ffc2 	bl	8009100 <sbrk_aligned>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	4604      	mov	r4, r0
 8009180:	d14d      	bne.n	800921e <_malloc_r+0xde>
 8009182:	6834      	ldr	r4, [r6, #0]
 8009184:	4626      	mov	r6, r4
 8009186:	2e00      	cmp	r6, #0
 8009188:	d140      	bne.n	800920c <_malloc_r+0xcc>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	4631      	mov	r1, r6
 800918e:	4638      	mov	r0, r7
 8009190:	eb04 0803 	add.w	r8, r4, r3
 8009194:	f000 ff2c 	bl	8009ff0 <_sbrk_r>
 8009198:	4580      	cmp	r8, r0
 800919a:	d13a      	bne.n	8009212 <_malloc_r+0xd2>
 800919c:	6821      	ldr	r1, [r4, #0]
 800919e:	3503      	adds	r5, #3
 80091a0:	1a6d      	subs	r5, r5, r1
 80091a2:	f025 0503 	bic.w	r5, r5, #3
 80091a6:	3508      	adds	r5, #8
 80091a8:	2d0c      	cmp	r5, #12
 80091aa:	bf38      	it	cc
 80091ac:	250c      	movcc	r5, #12
 80091ae:	4629      	mov	r1, r5
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff ffa5 	bl	8009100 <sbrk_aligned>
 80091b6:	3001      	adds	r0, #1
 80091b8:	d02b      	beq.n	8009212 <_malloc_r+0xd2>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	442b      	add	r3, r5
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	e00e      	b.n	80091e0 <_malloc_r+0xa0>
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	1b52      	subs	r2, r2, r5
 80091c6:	d41e      	bmi.n	8009206 <_malloc_r+0xc6>
 80091c8:	2a0b      	cmp	r2, #11
 80091ca:	d916      	bls.n	80091fa <_malloc_r+0xba>
 80091cc:	1961      	adds	r1, r4, r5
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	6025      	str	r5, [r4, #0]
 80091d2:	bf18      	it	ne
 80091d4:	6059      	strne	r1, [r3, #4]
 80091d6:	6863      	ldr	r3, [r4, #4]
 80091d8:	bf08      	it	eq
 80091da:	6031      	streq	r1, [r6, #0]
 80091dc:	5162      	str	r2, [r4, r5]
 80091de:	604b      	str	r3, [r1, #4]
 80091e0:	4638      	mov	r0, r7
 80091e2:	f104 060b 	add.w	r6, r4, #11
 80091e6:	f003 f931 	bl	800c44c <__malloc_unlock>
 80091ea:	f026 0607 	bic.w	r6, r6, #7
 80091ee:	1d23      	adds	r3, r4, #4
 80091f0:	1af2      	subs	r2, r6, r3
 80091f2:	d0b6      	beq.n	8009162 <_malloc_r+0x22>
 80091f4:	1b9b      	subs	r3, r3, r6
 80091f6:	50a3      	str	r3, [r4, r2]
 80091f8:	e7b3      	b.n	8009162 <_malloc_r+0x22>
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	bf0c      	ite	eq
 8009200:	6032      	streq	r2, [r6, #0]
 8009202:	605a      	strne	r2, [r3, #4]
 8009204:	e7ec      	b.n	80091e0 <_malloc_r+0xa0>
 8009206:	4623      	mov	r3, r4
 8009208:	6864      	ldr	r4, [r4, #4]
 800920a:	e7b2      	b.n	8009172 <_malloc_r+0x32>
 800920c:	4634      	mov	r4, r6
 800920e:	6876      	ldr	r6, [r6, #4]
 8009210:	e7b9      	b.n	8009186 <_malloc_r+0x46>
 8009212:	230c      	movs	r3, #12
 8009214:	603b      	str	r3, [r7, #0]
 8009216:	4638      	mov	r0, r7
 8009218:	f003 f918 	bl	800c44c <__malloc_unlock>
 800921c:	e7a1      	b.n	8009162 <_malloc_r+0x22>
 800921e:	6025      	str	r5, [r4, #0]
 8009220:	e7de      	b.n	80091e0 <_malloc_r+0xa0>
 8009222:	bf00      	nop
 8009224:	20002e70 	.word	0x20002e70

08009228 <__cvt>:
 8009228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800922c:	ec55 4b10 	vmov	r4, r5, d0
 8009230:	2d00      	cmp	r5, #0
 8009232:	460e      	mov	r6, r1
 8009234:	4619      	mov	r1, r3
 8009236:	462b      	mov	r3, r5
 8009238:	bfbb      	ittet	lt
 800923a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800923e:	461d      	movlt	r5, r3
 8009240:	2300      	movge	r3, #0
 8009242:	232d      	movlt	r3, #45	; 0x2d
 8009244:	700b      	strb	r3, [r1, #0]
 8009246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800924c:	4691      	mov	r9, r2
 800924e:	f023 0820 	bic.w	r8, r3, #32
 8009252:	bfbc      	itt	lt
 8009254:	4622      	movlt	r2, r4
 8009256:	4614      	movlt	r4, r2
 8009258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800925c:	d005      	beq.n	800926a <__cvt+0x42>
 800925e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009262:	d100      	bne.n	8009266 <__cvt+0x3e>
 8009264:	3601      	adds	r6, #1
 8009266:	2102      	movs	r1, #2
 8009268:	e000      	b.n	800926c <__cvt+0x44>
 800926a:	2103      	movs	r1, #3
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	ab02      	add	r3, sp, #8
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	ec45 4b10 	vmov	d0, r4, r5
 8009278:	4653      	mov	r3, sl
 800927a:	4632      	mov	r2, r6
 800927c:	f001 fe90 	bl	800afa0 <_dtoa_r>
 8009280:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009284:	4607      	mov	r7, r0
 8009286:	d102      	bne.n	800928e <__cvt+0x66>
 8009288:	f019 0f01 	tst.w	r9, #1
 800928c:	d022      	beq.n	80092d4 <__cvt+0xac>
 800928e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009292:	eb07 0906 	add.w	r9, r7, r6
 8009296:	d110      	bne.n	80092ba <__cvt+0x92>
 8009298:	783b      	ldrb	r3, [r7, #0]
 800929a:	2b30      	cmp	r3, #48	; 0x30
 800929c:	d10a      	bne.n	80092b4 <__cvt+0x8c>
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f7 fc37 	bl	8000b18 <__aeabi_dcmpeq>
 80092aa:	b918      	cbnz	r0, 80092b4 <__cvt+0x8c>
 80092ac:	f1c6 0601 	rsb	r6, r6, #1
 80092b0:	f8ca 6000 	str.w	r6, [sl]
 80092b4:	f8da 3000 	ldr.w	r3, [sl]
 80092b8:	4499      	add	r9, r3
 80092ba:	2200      	movs	r2, #0
 80092bc:	2300      	movs	r3, #0
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 80092c6:	b108      	cbz	r0, 80092cc <__cvt+0xa4>
 80092c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092cc:	2230      	movs	r2, #48	; 0x30
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	454b      	cmp	r3, r9
 80092d2:	d307      	bcc.n	80092e4 <__cvt+0xbc>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092d8:	1bdb      	subs	r3, r3, r7
 80092da:	4638      	mov	r0, r7
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	b004      	add	sp, #16
 80092e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e4:	1c59      	adds	r1, r3, #1
 80092e6:	9103      	str	r1, [sp, #12]
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	e7f0      	b.n	80092ce <__cvt+0xa6>

080092ec <__exponent>:
 80092ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ee:	4603      	mov	r3, r0
 80092f0:	2900      	cmp	r1, #0
 80092f2:	bfb8      	it	lt
 80092f4:	4249      	neglt	r1, r1
 80092f6:	f803 2b02 	strb.w	r2, [r3], #2
 80092fa:	bfb4      	ite	lt
 80092fc:	222d      	movlt	r2, #45	; 0x2d
 80092fe:	222b      	movge	r2, #43	; 0x2b
 8009300:	2909      	cmp	r1, #9
 8009302:	7042      	strb	r2, [r0, #1]
 8009304:	dd2a      	ble.n	800935c <__exponent+0x70>
 8009306:	f10d 0407 	add.w	r4, sp, #7
 800930a:	46a4      	mov	ip, r4
 800930c:	270a      	movs	r7, #10
 800930e:	46a6      	mov	lr, r4
 8009310:	460a      	mov	r2, r1
 8009312:	fb91 f6f7 	sdiv	r6, r1, r7
 8009316:	fb07 1516 	mls	r5, r7, r6, r1
 800931a:	3530      	adds	r5, #48	; 0x30
 800931c:	2a63      	cmp	r2, #99	; 0x63
 800931e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009322:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009326:	4631      	mov	r1, r6
 8009328:	dcf1      	bgt.n	800930e <__exponent+0x22>
 800932a:	3130      	adds	r1, #48	; 0x30
 800932c:	f1ae 0502 	sub.w	r5, lr, #2
 8009330:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009334:	1c44      	adds	r4, r0, #1
 8009336:	4629      	mov	r1, r5
 8009338:	4561      	cmp	r1, ip
 800933a:	d30a      	bcc.n	8009352 <__exponent+0x66>
 800933c:	f10d 0209 	add.w	r2, sp, #9
 8009340:	eba2 020e 	sub.w	r2, r2, lr
 8009344:	4565      	cmp	r5, ip
 8009346:	bf88      	it	hi
 8009348:	2200      	movhi	r2, #0
 800934a:	4413      	add	r3, r2
 800934c:	1a18      	subs	r0, r3, r0
 800934e:	b003      	add	sp, #12
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009356:	f804 2f01 	strb.w	r2, [r4, #1]!
 800935a:	e7ed      	b.n	8009338 <__exponent+0x4c>
 800935c:	2330      	movs	r3, #48	; 0x30
 800935e:	3130      	adds	r1, #48	; 0x30
 8009360:	7083      	strb	r3, [r0, #2]
 8009362:	70c1      	strb	r1, [r0, #3]
 8009364:	1d03      	adds	r3, r0, #4
 8009366:	e7f1      	b.n	800934c <__exponent+0x60>

08009368 <_printf_float>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	ed2d 8b02 	vpush	{d8}
 8009370:	b08d      	sub	sp, #52	; 0x34
 8009372:	460c      	mov	r4, r1
 8009374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009378:	4616      	mov	r6, r2
 800937a:	461f      	mov	r7, r3
 800937c:	4605      	mov	r5, r0
 800937e:	f003 f82f 	bl	800c3e0 <_localeconv_r>
 8009382:	f8d0 a000 	ldr.w	sl, [r0]
 8009386:	4650      	mov	r0, sl
 8009388:	f7f6 ff4a 	bl	8000220 <strlen>
 800938c:	2300      	movs	r3, #0
 800938e:	930a      	str	r3, [sp, #40]	; 0x28
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	9305      	str	r3, [sp, #20]
 8009394:	f8d8 3000 	ldr.w	r3, [r8]
 8009398:	f894 b018 	ldrb.w	fp, [r4, #24]
 800939c:	3307      	adds	r3, #7
 800939e:	f023 0307 	bic.w	r3, r3, #7
 80093a2:	f103 0208 	add.w	r2, r3, #8
 80093a6:	f8c8 2000 	str.w	r2, [r8]
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80093c0:	ee08 0a10 	vmov	s16, r0
 80093c4:	4b9f      	ldr	r3, [pc, #636]	; (8009644 <_printf_float+0x2dc>)
 80093c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	f7f7 fbd5 	bl	8000b7c <__aeabi_dcmpun>
 80093d2:	bb88      	cbnz	r0, 8009438 <_printf_float+0xd0>
 80093d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093d8:	4b9a      	ldr	r3, [pc, #616]	; (8009644 <_printf_float+0x2dc>)
 80093da:	f04f 32ff 	mov.w	r2, #4294967295
 80093de:	f7f7 fbaf 	bl	8000b40 <__aeabi_dcmple>
 80093e2:	bb48      	cbnz	r0, 8009438 <_printf_float+0xd0>
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 fb9e 	bl	8000b2c <__aeabi_dcmplt>
 80093f0:	b110      	cbz	r0, 80093f8 <_printf_float+0x90>
 80093f2:	232d      	movs	r3, #45	; 0x2d
 80093f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f8:	4b93      	ldr	r3, [pc, #588]	; (8009648 <_printf_float+0x2e0>)
 80093fa:	4894      	ldr	r0, [pc, #592]	; (800964c <_printf_float+0x2e4>)
 80093fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009400:	bf94      	ite	ls
 8009402:	4698      	movls	r8, r3
 8009404:	4680      	movhi	r8, r0
 8009406:	2303      	movs	r3, #3
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	9b05      	ldr	r3, [sp, #20]
 800940c:	f023 0204 	bic.w	r2, r3, #4
 8009410:	6022      	str	r2, [r4, #0]
 8009412:	f04f 0900 	mov.w	r9, #0
 8009416:	9700      	str	r7, [sp, #0]
 8009418:	4633      	mov	r3, r6
 800941a:	aa0b      	add	r2, sp, #44	; 0x2c
 800941c:	4621      	mov	r1, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f9d8 	bl	80097d4 <_printf_common>
 8009424:	3001      	adds	r0, #1
 8009426:	f040 8090 	bne.w	800954a <_printf_float+0x1e2>
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	b00d      	add	sp, #52	; 0x34
 8009430:	ecbd 8b02 	vpop	{d8}
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	f7f7 fb9c 	bl	8000b7c <__aeabi_dcmpun>
 8009444:	b140      	cbz	r0, 8009458 <_printf_float+0xf0>
 8009446:	464b      	mov	r3, r9
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfbc      	itt	lt
 800944c:	232d      	movlt	r3, #45	; 0x2d
 800944e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009452:	487f      	ldr	r0, [pc, #508]	; (8009650 <_printf_float+0x2e8>)
 8009454:	4b7f      	ldr	r3, [pc, #508]	; (8009654 <_printf_float+0x2ec>)
 8009456:	e7d1      	b.n	80093fc <_printf_float+0x94>
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800945e:	9206      	str	r2, [sp, #24]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	d13f      	bne.n	80094e4 <_printf_float+0x17c>
 8009464:	2306      	movs	r3, #6
 8009466:	6063      	str	r3, [r4, #4]
 8009468:	9b05      	ldr	r3, [sp, #20]
 800946a:	6861      	ldr	r1, [r4, #4]
 800946c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009470:	2300      	movs	r3, #0
 8009472:	9303      	str	r3, [sp, #12]
 8009474:	ab0a      	add	r3, sp, #40	; 0x28
 8009476:	e9cd b301 	strd	fp, r3, [sp, #4]
 800947a:	ab09      	add	r3, sp, #36	; 0x24
 800947c:	ec49 8b10 	vmov	d0, r8, r9
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	6022      	str	r2, [r4, #0]
 8009484:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009488:	4628      	mov	r0, r5
 800948a:	f7ff fecd 	bl	8009228 <__cvt>
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009492:	2b47      	cmp	r3, #71	; 0x47
 8009494:	4680      	mov	r8, r0
 8009496:	d108      	bne.n	80094aa <_printf_float+0x142>
 8009498:	1cc8      	adds	r0, r1, #3
 800949a:	db02      	blt.n	80094a2 <_printf_float+0x13a>
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	4299      	cmp	r1, r3
 80094a0:	dd41      	ble.n	8009526 <_printf_float+0x1be>
 80094a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80094a6:	fa5f fb8b 	uxtb.w	fp, fp
 80094aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094ae:	d820      	bhi.n	80094f2 <_printf_float+0x18a>
 80094b0:	3901      	subs	r1, #1
 80094b2:	465a      	mov	r2, fp
 80094b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094b8:	9109      	str	r1, [sp, #36]	; 0x24
 80094ba:	f7ff ff17 	bl	80092ec <__exponent>
 80094be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c0:	1813      	adds	r3, r2, r0
 80094c2:	2a01      	cmp	r2, #1
 80094c4:	4681      	mov	r9, r0
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	dc02      	bgt.n	80094d0 <_printf_float+0x168>
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	07d2      	lsls	r2, r2, #31
 80094ce:	d501      	bpl.n	80094d4 <_printf_float+0x16c>
 80094d0:	3301      	adds	r3, #1
 80094d2:	6123      	str	r3, [r4, #16]
 80094d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d09c      	beq.n	8009416 <_printf_float+0xae>
 80094dc:	232d      	movs	r3, #45	; 0x2d
 80094de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e2:	e798      	b.n	8009416 <_printf_float+0xae>
 80094e4:	9a06      	ldr	r2, [sp, #24]
 80094e6:	2a47      	cmp	r2, #71	; 0x47
 80094e8:	d1be      	bne.n	8009468 <_printf_float+0x100>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1bc      	bne.n	8009468 <_printf_float+0x100>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e7b9      	b.n	8009466 <_printf_float+0xfe>
 80094f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094f6:	d118      	bne.n	800952a <_printf_float+0x1c2>
 80094f8:	2900      	cmp	r1, #0
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	dd0b      	ble.n	8009516 <_printf_float+0x1ae>
 80094fe:	6121      	str	r1, [r4, #16]
 8009500:	b913      	cbnz	r3, 8009508 <_printf_float+0x1a0>
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	07d0      	lsls	r0, r2, #31
 8009506:	d502      	bpl.n	800950e <_printf_float+0x1a6>
 8009508:	3301      	adds	r3, #1
 800950a:	440b      	add	r3, r1
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009510:	f04f 0900 	mov.w	r9, #0
 8009514:	e7de      	b.n	80094d4 <_printf_float+0x16c>
 8009516:	b913      	cbnz	r3, 800951e <_printf_float+0x1b6>
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	07d2      	lsls	r2, r2, #31
 800951c:	d501      	bpl.n	8009522 <_printf_float+0x1ba>
 800951e:	3302      	adds	r3, #2
 8009520:	e7f4      	b.n	800950c <_printf_float+0x1a4>
 8009522:	2301      	movs	r3, #1
 8009524:	e7f2      	b.n	800950c <_printf_float+0x1a4>
 8009526:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800952a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952c:	4299      	cmp	r1, r3
 800952e:	db05      	blt.n	800953c <_printf_float+0x1d4>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	6121      	str	r1, [r4, #16]
 8009534:	07d8      	lsls	r0, r3, #31
 8009536:	d5ea      	bpl.n	800950e <_printf_float+0x1a6>
 8009538:	1c4b      	adds	r3, r1, #1
 800953a:	e7e7      	b.n	800950c <_printf_float+0x1a4>
 800953c:	2900      	cmp	r1, #0
 800953e:	bfd4      	ite	le
 8009540:	f1c1 0202 	rsble	r2, r1, #2
 8009544:	2201      	movgt	r2, #1
 8009546:	4413      	add	r3, r2
 8009548:	e7e0      	b.n	800950c <_printf_float+0x1a4>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	055a      	lsls	r2, r3, #21
 800954e:	d407      	bmi.n	8009560 <_printf_float+0x1f8>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	4642      	mov	r2, r8
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	d12c      	bne.n	80095b8 <_printf_float+0x250>
 800955e:	e764      	b.n	800942a <_printf_float+0xc2>
 8009560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009564:	f240 80e0 	bls.w	8009728 <_printf_float+0x3c0>
 8009568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	f7f7 fad2 	bl	8000b18 <__aeabi_dcmpeq>
 8009574:	2800      	cmp	r0, #0
 8009576:	d034      	beq.n	80095e2 <_printf_float+0x27a>
 8009578:	4a37      	ldr	r2, [pc, #220]	; (8009658 <_printf_float+0x2f0>)
 800957a:	2301      	movs	r3, #1
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	47b8      	blx	r7
 8009582:	3001      	adds	r0, #1
 8009584:	f43f af51 	beq.w	800942a <_printf_float+0xc2>
 8009588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800958c:	429a      	cmp	r2, r3
 800958e:	db02      	blt.n	8009596 <_printf_float+0x22e>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	07d8      	lsls	r0, r3, #31
 8009594:	d510      	bpl.n	80095b8 <_printf_float+0x250>
 8009596:	ee18 3a10 	vmov	r3, s16
 800959a:	4652      	mov	r2, sl
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f af41 	beq.w	800942a <_printf_float+0xc2>
 80095a8:	f04f 0800 	mov.w	r8, #0
 80095ac:	f104 091a 	add.w	r9, r4, #26
 80095b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4543      	cmp	r3, r8
 80095b6:	dc09      	bgt.n	80095cc <_printf_float+0x264>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	079b      	lsls	r3, r3, #30
 80095bc:	f100 8105 	bmi.w	80097ca <_printf_float+0x462>
 80095c0:	68e0      	ldr	r0, [r4, #12]
 80095c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c4:	4298      	cmp	r0, r3
 80095c6:	bfb8      	it	lt
 80095c8:	4618      	movlt	r0, r3
 80095ca:	e730      	b.n	800942e <_printf_float+0xc6>
 80095cc:	2301      	movs	r3, #1
 80095ce:	464a      	mov	r2, r9
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f af27 	beq.w	800942a <_printf_float+0xc2>
 80095dc:	f108 0801 	add.w	r8, r8, #1
 80095e0:	e7e6      	b.n	80095b0 <_printf_float+0x248>
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dc39      	bgt.n	800965c <_printf_float+0x2f4>
 80095e8:	4a1b      	ldr	r2, [pc, #108]	; (8009658 <_printf_float+0x2f0>)
 80095ea:	2301      	movs	r3, #1
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f af19 	beq.w	800942a <_printf_float+0xc2>
 80095f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095fc:	4313      	orrs	r3, r2
 80095fe:	d102      	bne.n	8009606 <_printf_float+0x29e>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	d5d8      	bpl.n	80095b8 <_printf_float+0x250>
 8009606:	ee18 3a10 	vmov	r3, s16
 800960a:	4652      	mov	r2, sl
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f af09 	beq.w	800942a <_printf_float+0xc2>
 8009618:	f04f 0900 	mov.w	r9, #0
 800961c:	f104 0a1a 	add.w	sl, r4, #26
 8009620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009622:	425b      	negs	r3, r3
 8009624:	454b      	cmp	r3, r9
 8009626:	dc01      	bgt.n	800962c <_printf_float+0x2c4>
 8009628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962a:	e792      	b.n	8009552 <_printf_float+0x1ea>
 800962c:	2301      	movs	r3, #1
 800962e:	4652      	mov	r2, sl
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f aef7 	beq.w	800942a <_printf_float+0xc2>
 800963c:	f109 0901 	add.w	r9, r9, #1
 8009640:	e7ee      	b.n	8009620 <_printf_float+0x2b8>
 8009642:	bf00      	nop
 8009644:	7fefffff 	.word	0x7fefffff
 8009648:	0800db18 	.word	0x0800db18
 800964c:	0800db1c 	.word	0x0800db1c
 8009650:	0800db24 	.word	0x0800db24
 8009654:	0800db20 	.word	0x0800db20
 8009658:	0800db28 	.word	0x0800db28
 800965c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009660:	429a      	cmp	r2, r3
 8009662:	bfa8      	it	ge
 8009664:	461a      	movge	r2, r3
 8009666:	2a00      	cmp	r2, #0
 8009668:	4691      	mov	r9, r2
 800966a:	dc37      	bgt.n	80096dc <_printf_float+0x374>
 800966c:	f04f 0b00 	mov.w	fp, #0
 8009670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009674:	f104 021a 	add.w	r2, r4, #26
 8009678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	eba3 0309 	sub.w	r3, r3, r9
 8009680:	455b      	cmp	r3, fp
 8009682:	dc33      	bgt.n	80096ec <_printf_float+0x384>
 8009684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009688:	429a      	cmp	r2, r3
 800968a:	db3b      	blt.n	8009704 <_printf_float+0x39c>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07da      	lsls	r2, r3, #31
 8009690:	d438      	bmi.n	8009704 <_printf_float+0x39c>
 8009692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009694:	9a05      	ldr	r2, [sp, #20]
 8009696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009698:	1a9a      	subs	r2, r3, r2
 800969a:	eba3 0901 	sub.w	r9, r3, r1
 800969e:	4591      	cmp	r9, r2
 80096a0:	bfa8      	it	ge
 80096a2:	4691      	movge	r9, r2
 80096a4:	f1b9 0f00 	cmp.w	r9, #0
 80096a8:	dc35      	bgt.n	8009716 <_printf_float+0x3ae>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b2:	f104 0a1a 	add.w	sl, r4, #26
 80096b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	eba3 0309 	sub.w	r3, r3, r9
 80096c0:	4543      	cmp	r3, r8
 80096c2:	f77f af79 	ble.w	80095b8 <_printf_float+0x250>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4631      	mov	r1, r6
 80096cc:	4628      	mov	r0, r5
 80096ce:	47b8      	blx	r7
 80096d0:	3001      	adds	r0, #1
 80096d2:	f43f aeaa 	beq.w	800942a <_printf_float+0xc2>
 80096d6:	f108 0801 	add.w	r8, r8, #1
 80096da:	e7ec      	b.n	80096b6 <_printf_float+0x34e>
 80096dc:	4613      	mov	r3, r2
 80096de:	4631      	mov	r1, r6
 80096e0:	4642      	mov	r2, r8
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	d1c0      	bne.n	800966c <_printf_float+0x304>
 80096ea:	e69e      	b.n	800942a <_printf_float+0xc2>
 80096ec:	2301      	movs	r3, #1
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	9205      	str	r2, [sp, #20]
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f ae97 	beq.w	800942a <_printf_float+0xc2>
 80096fc:	9a05      	ldr	r2, [sp, #20]
 80096fe:	f10b 0b01 	add.w	fp, fp, #1
 8009702:	e7b9      	b.n	8009678 <_printf_float+0x310>
 8009704:	ee18 3a10 	vmov	r3, s16
 8009708:	4652      	mov	r2, sl
 800970a:	4631      	mov	r1, r6
 800970c:	4628      	mov	r0, r5
 800970e:	47b8      	blx	r7
 8009710:	3001      	adds	r0, #1
 8009712:	d1be      	bne.n	8009692 <_printf_float+0x32a>
 8009714:	e689      	b.n	800942a <_printf_float+0xc2>
 8009716:	9a05      	ldr	r2, [sp, #20]
 8009718:	464b      	mov	r3, r9
 800971a:	4442      	add	r2, r8
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	47b8      	blx	r7
 8009722:	3001      	adds	r0, #1
 8009724:	d1c1      	bne.n	80096aa <_printf_float+0x342>
 8009726:	e680      	b.n	800942a <_printf_float+0xc2>
 8009728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800972a:	2a01      	cmp	r2, #1
 800972c:	dc01      	bgt.n	8009732 <_printf_float+0x3ca>
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	d538      	bpl.n	80097a4 <_printf_float+0x43c>
 8009732:	2301      	movs	r3, #1
 8009734:	4642      	mov	r2, r8
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	47b8      	blx	r7
 800973c:	3001      	adds	r0, #1
 800973e:	f43f ae74 	beq.w	800942a <_printf_float+0xc2>
 8009742:	ee18 3a10 	vmov	r3, s16
 8009746:	4652      	mov	r2, sl
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f ae6b 	beq.w	800942a <_printf_float+0xc2>
 8009754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009758:	2200      	movs	r2, #0
 800975a:	2300      	movs	r3, #0
 800975c:	f7f7 f9dc 	bl	8000b18 <__aeabi_dcmpeq>
 8009760:	b9d8      	cbnz	r0, 800979a <_printf_float+0x432>
 8009762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009764:	f108 0201 	add.w	r2, r8, #1
 8009768:	3b01      	subs	r3, #1
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	d10e      	bne.n	8009792 <_printf_float+0x42a>
 8009774:	e659      	b.n	800942a <_printf_float+0xc2>
 8009776:	2301      	movs	r3, #1
 8009778:	4652      	mov	r2, sl
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	f43f ae52 	beq.w	800942a <_printf_float+0xc2>
 8009786:	f108 0801 	add.w	r8, r8, #1
 800978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978c:	3b01      	subs	r3, #1
 800978e:	4543      	cmp	r3, r8
 8009790:	dcf1      	bgt.n	8009776 <_printf_float+0x40e>
 8009792:	464b      	mov	r3, r9
 8009794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009798:	e6dc      	b.n	8009554 <_printf_float+0x1ec>
 800979a:	f04f 0800 	mov.w	r8, #0
 800979e:	f104 0a1a 	add.w	sl, r4, #26
 80097a2:	e7f2      	b.n	800978a <_printf_float+0x422>
 80097a4:	2301      	movs	r3, #1
 80097a6:	4642      	mov	r2, r8
 80097a8:	e7df      	b.n	800976a <_printf_float+0x402>
 80097aa:	2301      	movs	r3, #1
 80097ac:	464a      	mov	r2, r9
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b8      	blx	r7
 80097b4:	3001      	adds	r0, #1
 80097b6:	f43f ae38 	beq.w	800942a <_printf_float+0xc2>
 80097ba:	f108 0801 	add.w	r8, r8, #1
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097c2:	1a5b      	subs	r3, r3, r1
 80097c4:	4543      	cmp	r3, r8
 80097c6:	dcf0      	bgt.n	80097aa <_printf_float+0x442>
 80097c8:	e6fa      	b.n	80095c0 <_printf_float+0x258>
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	f104 0919 	add.w	r9, r4, #25
 80097d2:	e7f4      	b.n	80097be <_printf_float+0x456>

080097d4 <_printf_common>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	4616      	mov	r6, r2
 80097da:	4699      	mov	r9, r3
 80097dc:	688a      	ldr	r2, [r1, #8]
 80097de:	690b      	ldr	r3, [r1, #16]
 80097e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bfb8      	it	lt
 80097e8:	4613      	movlt	r3, r2
 80097ea:	6033      	str	r3, [r6, #0]
 80097ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f0:	4607      	mov	r7, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	b10a      	cbz	r2, 80097fa <_printf_common+0x26>
 80097f6:	3301      	adds	r3, #1
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	0699      	lsls	r1, r3, #26
 80097fe:	bf42      	ittt	mi
 8009800:	6833      	ldrmi	r3, [r6, #0]
 8009802:	3302      	addmi	r3, #2
 8009804:	6033      	strmi	r3, [r6, #0]
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	f015 0506 	ands.w	r5, r5, #6
 800980c:	d106      	bne.n	800981c <_printf_common+0x48>
 800980e:	f104 0a19 	add.w	sl, r4, #25
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	6832      	ldr	r2, [r6, #0]
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	42ab      	cmp	r3, r5
 800981a:	dc26      	bgt.n	800986a <_printf_common+0x96>
 800981c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009820:	1e13      	subs	r3, r2, #0
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	bf18      	it	ne
 8009826:	2301      	movne	r3, #1
 8009828:	0692      	lsls	r2, r2, #26
 800982a:	d42b      	bmi.n	8009884 <_printf_common+0xb0>
 800982c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009830:	4649      	mov	r1, r9
 8009832:	4638      	mov	r0, r7
 8009834:	47c0      	blx	r8
 8009836:	3001      	adds	r0, #1
 8009838:	d01e      	beq.n	8009878 <_printf_common+0xa4>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	68e5      	ldr	r5, [r4, #12]
 800983e:	6832      	ldr	r2, [r6, #0]
 8009840:	f003 0306 	and.w	r3, r3, #6
 8009844:	2b04      	cmp	r3, #4
 8009846:	bf08      	it	eq
 8009848:	1aad      	subeq	r5, r5, r2
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	bf0c      	ite	eq
 8009850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009854:	2500      	movne	r5, #0
 8009856:	4293      	cmp	r3, r2
 8009858:	bfc4      	itt	gt
 800985a:	1a9b      	subgt	r3, r3, r2
 800985c:	18ed      	addgt	r5, r5, r3
 800985e:	2600      	movs	r6, #0
 8009860:	341a      	adds	r4, #26
 8009862:	42b5      	cmp	r5, r6
 8009864:	d11a      	bne.n	800989c <_printf_common+0xc8>
 8009866:	2000      	movs	r0, #0
 8009868:	e008      	b.n	800987c <_printf_common+0xa8>
 800986a:	2301      	movs	r3, #1
 800986c:	4652      	mov	r2, sl
 800986e:	4649      	mov	r1, r9
 8009870:	4638      	mov	r0, r7
 8009872:	47c0      	blx	r8
 8009874:	3001      	adds	r0, #1
 8009876:	d103      	bne.n	8009880 <_printf_common+0xac>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	3501      	adds	r5, #1
 8009882:	e7c6      	b.n	8009812 <_printf_common+0x3e>
 8009884:	18e1      	adds	r1, r4, r3
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	2030      	movs	r0, #48	; 0x30
 800988a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800988e:	4422      	add	r2, r4
 8009890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009898:	3302      	adds	r3, #2
 800989a:	e7c7      	b.n	800982c <_printf_common+0x58>
 800989c:	2301      	movs	r3, #1
 800989e:	4622      	mov	r2, r4
 80098a0:	4649      	mov	r1, r9
 80098a2:	4638      	mov	r0, r7
 80098a4:	47c0      	blx	r8
 80098a6:	3001      	adds	r0, #1
 80098a8:	d0e6      	beq.n	8009878 <_printf_common+0xa4>
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7d9      	b.n	8009862 <_printf_common+0x8e>
	...

080098b0 <_printf_i>:
 80098b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	7e0f      	ldrb	r7, [r1, #24]
 80098b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098b8:	2f78      	cmp	r7, #120	; 0x78
 80098ba:	4691      	mov	r9, r2
 80098bc:	4680      	mov	r8, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	469a      	mov	sl, r3
 80098c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098c6:	d807      	bhi.n	80098d8 <_printf_i+0x28>
 80098c8:	2f62      	cmp	r7, #98	; 0x62
 80098ca:	d80a      	bhi.n	80098e2 <_printf_i+0x32>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	f000 80d8 	beq.w	8009a82 <_printf_i+0x1d2>
 80098d2:	2f58      	cmp	r7, #88	; 0x58
 80098d4:	f000 80a3 	beq.w	8009a1e <_printf_i+0x16e>
 80098d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098e0:	e03a      	b.n	8009958 <_printf_i+0xa8>
 80098e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098e6:	2b15      	cmp	r3, #21
 80098e8:	d8f6      	bhi.n	80098d8 <_printf_i+0x28>
 80098ea:	a101      	add	r1, pc, #4	; (adr r1, 80098f0 <_printf_i+0x40>)
 80098ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098f0:	08009949 	.word	0x08009949
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	080098d9 	.word	0x080098d9
 80098fc:	080098d9 	.word	0x080098d9
 8009900:	080098d9 	.word	0x080098d9
 8009904:	080098d9 	.word	0x080098d9
 8009908:	0800995d 	.word	0x0800995d
 800990c:	080098d9 	.word	0x080098d9
 8009910:	080098d9 	.word	0x080098d9
 8009914:	080098d9 	.word	0x080098d9
 8009918:	080098d9 	.word	0x080098d9
 800991c:	08009a69 	.word	0x08009a69
 8009920:	0800998d 	.word	0x0800998d
 8009924:	08009a4b 	.word	0x08009a4b
 8009928:	080098d9 	.word	0x080098d9
 800992c:	080098d9 	.word	0x080098d9
 8009930:	08009a8b 	.word	0x08009a8b
 8009934:	080098d9 	.word	0x080098d9
 8009938:	0800998d 	.word	0x0800998d
 800993c:	080098d9 	.word	0x080098d9
 8009940:	080098d9 	.word	0x080098d9
 8009944:	08009a53 	.word	0x08009a53
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	1d1a      	adds	r2, r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	602a      	str	r2, [r5, #0]
 8009950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009958:	2301      	movs	r3, #1
 800995a:	e0a3      	b.n	8009aa4 <_printf_i+0x1f4>
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	6829      	ldr	r1, [r5, #0]
 8009960:	0606      	lsls	r6, r0, #24
 8009962:	f101 0304 	add.w	r3, r1, #4
 8009966:	d50a      	bpl.n	800997e <_printf_i+0xce>
 8009968:	680e      	ldr	r6, [r1, #0]
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	2e00      	cmp	r6, #0
 800996e:	da03      	bge.n	8009978 <_printf_i+0xc8>
 8009970:	232d      	movs	r3, #45	; 0x2d
 8009972:	4276      	negs	r6, r6
 8009974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009978:	485e      	ldr	r0, [pc, #376]	; (8009af4 <_printf_i+0x244>)
 800997a:	230a      	movs	r3, #10
 800997c:	e019      	b.n	80099b2 <_printf_i+0x102>
 800997e:	680e      	ldr	r6, [r1, #0]
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009986:	bf18      	it	ne
 8009988:	b236      	sxthne	r6, r6
 800998a:	e7ef      	b.n	800996c <_printf_i+0xbc>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	1d19      	adds	r1, r3, #4
 8009992:	6029      	str	r1, [r5, #0]
 8009994:	0601      	lsls	r1, r0, #24
 8009996:	d501      	bpl.n	800999c <_printf_i+0xec>
 8009998:	681e      	ldr	r6, [r3, #0]
 800999a:	e002      	b.n	80099a2 <_printf_i+0xf2>
 800999c:	0646      	lsls	r6, r0, #25
 800999e:	d5fb      	bpl.n	8009998 <_printf_i+0xe8>
 80099a0:	881e      	ldrh	r6, [r3, #0]
 80099a2:	4854      	ldr	r0, [pc, #336]	; (8009af4 <_printf_i+0x244>)
 80099a4:	2f6f      	cmp	r7, #111	; 0x6f
 80099a6:	bf0c      	ite	eq
 80099a8:	2308      	moveq	r3, #8
 80099aa:	230a      	movne	r3, #10
 80099ac:	2100      	movs	r1, #0
 80099ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099b2:	6865      	ldr	r5, [r4, #4]
 80099b4:	60a5      	str	r5, [r4, #8]
 80099b6:	2d00      	cmp	r5, #0
 80099b8:	bfa2      	ittt	ge
 80099ba:	6821      	ldrge	r1, [r4, #0]
 80099bc:	f021 0104 	bicge.w	r1, r1, #4
 80099c0:	6021      	strge	r1, [r4, #0]
 80099c2:	b90e      	cbnz	r6, 80099c8 <_printf_i+0x118>
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	d04d      	beq.n	8009a64 <_printf_i+0x1b4>
 80099c8:	4615      	mov	r5, r2
 80099ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80099ce:	fb03 6711 	mls	r7, r3, r1, r6
 80099d2:	5dc7      	ldrb	r7, [r0, r7]
 80099d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099d8:	4637      	mov	r7, r6
 80099da:	42bb      	cmp	r3, r7
 80099dc:	460e      	mov	r6, r1
 80099de:	d9f4      	bls.n	80099ca <_printf_i+0x11a>
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d10b      	bne.n	80099fc <_printf_i+0x14c>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	07de      	lsls	r6, r3, #31
 80099e8:	d508      	bpl.n	80099fc <_printf_i+0x14c>
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	6861      	ldr	r1, [r4, #4]
 80099ee:	4299      	cmp	r1, r3
 80099f0:	bfde      	ittt	le
 80099f2:	2330      	movle	r3, #48	; 0x30
 80099f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099fc:	1b52      	subs	r2, r2, r5
 80099fe:	6122      	str	r2, [r4, #16]
 8009a00:	f8cd a000 	str.w	sl, [sp]
 8009a04:	464b      	mov	r3, r9
 8009a06:	aa03      	add	r2, sp, #12
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f7ff fee2 	bl	80097d4 <_printf_common>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d14c      	bne.n	8009aae <_printf_i+0x1fe>
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	b004      	add	sp, #16
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	4835      	ldr	r0, [pc, #212]	; (8009af4 <_printf_i+0x244>)
 8009a20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a24:	6829      	ldr	r1, [r5, #0]
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a2c:	6029      	str	r1, [r5, #0]
 8009a2e:	061d      	lsls	r5, r3, #24
 8009a30:	d514      	bpl.n	8009a5c <_printf_i+0x1ac>
 8009a32:	07df      	lsls	r7, r3, #31
 8009a34:	bf44      	itt	mi
 8009a36:	f043 0320 	orrmi.w	r3, r3, #32
 8009a3a:	6023      	strmi	r3, [r4, #0]
 8009a3c:	b91e      	cbnz	r6, 8009a46 <_printf_i+0x196>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	f023 0320 	bic.w	r3, r3, #32
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	2310      	movs	r3, #16
 8009a48:	e7b0      	b.n	80099ac <_printf_i+0xfc>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f043 0320 	orr.w	r3, r3, #32
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	2378      	movs	r3, #120	; 0x78
 8009a54:	4828      	ldr	r0, [pc, #160]	; (8009af8 <_printf_i+0x248>)
 8009a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a5a:	e7e3      	b.n	8009a24 <_printf_i+0x174>
 8009a5c:	0659      	lsls	r1, r3, #25
 8009a5e:	bf48      	it	mi
 8009a60:	b2b6      	uxthmi	r6, r6
 8009a62:	e7e6      	b.n	8009a32 <_printf_i+0x182>
 8009a64:	4615      	mov	r5, r2
 8009a66:	e7bb      	b.n	80099e0 <_printf_i+0x130>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	6826      	ldr	r6, [r4, #0]
 8009a6c:	6961      	ldr	r1, [r4, #20]
 8009a6e:	1d18      	adds	r0, r3, #4
 8009a70:	6028      	str	r0, [r5, #0]
 8009a72:	0635      	lsls	r5, r6, #24
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	d501      	bpl.n	8009a7c <_printf_i+0x1cc>
 8009a78:	6019      	str	r1, [r3, #0]
 8009a7a:	e002      	b.n	8009a82 <_printf_i+0x1d2>
 8009a7c:	0670      	lsls	r0, r6, #25
 8009a7e:	d5fb      	bpl.n	8009a78 <_printf_i+0x1c8>
 8009a80:	8019      	strh	r1, [r3, #0]
 8009a82:	2300      	movs	r3, #0
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	4615      	mov	r5, r2
 8009a88:	e7ba      	b.n	8009a00 <_printf_i+0x150>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	1d1a      	adds	r2, r3, #4
 8009a8e:	602a      	str	r2, [r5, #0]
 8009a90:	681d      	ldr	r5, [r3, #0]
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	2100      	movs	r1, #0
 8009a96:	4628      	mov	r0, r5
 8009a98:	f7f6 fbca 	bl	8000230 <memchr>
 8009a9c:	b108      	cbz	r0, 8009aa2 <_printf_i+0x1f2>
 8009a9e:	1b40      	subs	r0, r0, r5
 8009aa0:	6060      	str	r0, [r4, #4]
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aac:	e7a8      	b.n	8009a00 <_printf_i+0x150>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	47d0      	blx	sl
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d0ab      	beq.n	8009a14 <_printf_i+0x164>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	079b      	lsls	r3, r3, #30
 8009ac0:	d413      	bmi.n	8009aea <_printf_i+0x23a>
 8009ac2:	68e0      	ldr	r0, [r4, #12]
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	bfb8      	it	lt
 8009aca:	4618      	movlt	r0, r3
 8009acc:	e7a4      	b.n	8009a18 <_printf_i+0x168>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d09b      	beq.n	8009a14 <_printf_i+0x164>
 8009adc:	3501      	adds	r5, #1
 8009ade:	68e3      	ldr	r3, [r4, #12]
 8009ae0:	9903      	ldr	r1, [sp, #12]
 8009ae2:	1a5b      	subs	r3, r3, r1
 8009ae4:	42ab      	cmp	r3, r5
 8009ae6:	dcf2      	bgt.n	8009ace <_printf_i+0x21e>
 8009ae8:	e7eb      	b.n	8009ac2 <_printf_i+0x212>
 8009aea:	2500      	movs	r5, #0
 8009aec:	f104 0619 	add.w	r6, r4, #25
 8009af0:	e7f5      	b.n	8009ade <_printf_i+0x22e>
 8009af2:	bf00      	nop
 8009af4:	0800db2a 	.word	0x0800db2a
 8009af8:	0800db3b 	.word	0x0800db3b

08009afc <_scanf_float>:
 8009afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	b087      	sub	sp, #28
 8009b02:	4617      	mov	r7, r2
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	688b      	ldr	r3, [r1, #8]
 8009b08:	1e5a      	subs	r2, r3, #1
 8009b0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009b0e:	bf83      	ittte	hi
 8009b10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b14:	195b      	addhi	r3, r3, r5
 8009b16:	9302      	strhi	r3, [sp, #8]
 8009b18:	2300      	movls	r3, #0
 8009b1a:	bf86      	itte	hi
 8009b1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b20:	608b      	strhi	r3, [r1, #8]
 8009b22:	9302      	strls	r3, [sp, #8]
 8009b24:	680b      	ldr	r3, [r1, #0]
 8009b26:	468b      	mov	fp, r1
 8009b28:	2500      	movs	r5, #0
 8009b2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009b2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009b32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009b36:	4680      	mov	r8, r0
 8009b38:	460c      	mov	r4, r1
 8009b3a:	465e      	mov	r6, fp
 8009b3c:	46aa      	mov	sl, r5
 8009b3e:	46a9      	mov	r9, r5
 8009b40:	9501      	str	r5, [sp, #4]
 8009b42:	68a2      	ldr	r2, [r4, #8]
 8009b44:	b152      	cbz	r2, 8009b5c <_scanf_float+0x60>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b4e      	cmp	r3, #78	; 0x4e
 8009b4c:	d864      	bhi.n	8009c18 <_scanf_float+0x11c>
 8009b4e:	2b40      	cmp	r3, #64	; 0x40
 8009b50:	d83c      	bhi.n	8009bcc <_scanf_float+0xd0>
 8009b52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b56:	b2c8      	uxtb	r0, r1
 8009b58:	280e      	cmp	r0, #14
 8009b5a:	d93a      	bls.n	8009bd2 <_scanf_float+0xd6>
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	d003      	beq.n	8009b6a <_scanf_float+0x6e>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b6e:	f1ba 0f01 	cmp.w	sl, #1
 8009b72:	f200 8113 	bhi.w	8009d9c <_scanf_float+0x2a0>
 8009b76:	455e      	cmp	r6, fp
 8009b78:	f200 8105 	bhi.w	8009d86 <_scanf_float+0x28a>
 8009b7c:	2501      	movs	r5, #1
 8009b7e:	4628      	mov	r0, r5
 8009b80:	b007      	add	sp, #28
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b8a:	2a0d      	cmp	r2, #13
 8009b8c:	d8e6      	bhi.n	8009b5c <_scanf_float+0x60>
 8009b8e:	a101      	add	r1, pc, #4	; (adr r1, 8009b94 <_scanf_float+0x98>)
 8009b90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b94:	08009cd3 	.word	0x08009cd3
 8009b98:	08009b5d 	.word	0x08009b5d
 8009b9c:	08009b5d 	.word	0x08009b5d
 8009ba0:	08009b5d 	.word	0x08009b5d
 8009ba4:	08009d33 	.word	0x08009d33
 8009ba8:	08009d0b 	.word	0x08009d0b
 8009bac:	08009b5d 	.word	0x08009b5d
 8009bb0:	08009b5d 	.word	0x08009b5d
 8009bb4:	08009ce1 	.word	0x08009ce1
 8009bb8:	08009b5d 	.word	0x08009b5d
 8009bbc:	08009b5d 	.word	0x08009b5d
 8009bc0:	08009b5d 	.word	0x08009b5d
 8009bc4:	08009b5d 	.word	0x08009b5d
 8009bc8:	08009c99 	.word	0x08009c99
 8009bcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009bd0:	e7db      	b.n	8009b8a <_scanf_float+0x8e>
 8009bd2:	290e      	cmp	r1, #14
 8009bd4:	d8c2      	bhi.n	8009b5c <_scanf_float+0x60>
 8009bd6:	a001      	add	r0, pc, #4	; (adr r0, 8009bdc <_scanf_float+0xe0>)
 8009bd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009bdc:	08009c8b 	.word	0x08009c8b
 8009be0:	08009b5d 	.word	0x08009b5d
 8009be4:	08009c8b 	.word	0x08009c8b
 8009be8:	08009d1f 	.word	0x08009d1f
 8009bec:	08009b5d 	.word	0x08009b5d
 8009bf0:	08009c39 	.word	0x08009c39
 8009bf4:	08009c75 	.word	0x08009c75
 8009bf8:	08009c75 	.word	0x08009c75
 8009bfc:	08009c75 	.word	0x08009c75
 8009c00:	08009c75 	.word	0x08009c75
 8009c04:	08009c75 	.word	0x08009c75
 8009c08:	08009c75 	.word	0x08009c75
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009c75 	.word	0x08009c75
 8009c14:	08009c75 	.word	0x08009c75
 8009c18:	2b6e      	cmp	r3, #110	; 0x6e
 8009c1a:	d809      	bhi.n	8009c30 <_scanf_float+0x134>
 8009c1c:	2b60      	cmp	r3, #96	; 0x60
 8009c1e:	d8b2      	bhi.n	8009b86 <_scanf_float+0x8a>
 8009c20:	2b54      	cmp	r3, #84	; 0x54
 8009c22:	d077      	beq.n	8009d14 <_scanf_float+0x218>
 8009c24:	2b59      	cmp	r3, #89	; 0x59
 8009c26:	d199      	bne.n	8009b5c <_scanf_float+0x60>
 8009c28:	2d07      	cmp	r5, #7
 8009c2a:	d197      	bne.n	8009b5c <_scanf_float+0x60>
 8009c2c:	2508      	movs	r5, #8
 8009c2e:	e029      	b.n	8009c84 <_scanf_float+0x188>
 8009c30:	2b74      	cmp	r3, #116	; 0x74
 8009c32:	d06f      	beq.n	8009d14 <_scanf_float+0x218>
 8009c34:	2b79      	cmp	r3, #121	; 0x79
 8009c36:	e7f6      	b.n	8009c26 <_scanf_float+0x12a>
 8009c38:	6821      	ldr	r1, [r4, #0]
 8009c3a:	05c8      	lsls	r0, r1, #23
 8009c3c:	d51a      	bpl.n	8009c74 <_scanf_float+0x178>
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c44:	6021      	str	r1, [r4, #0]
 8009c46:	f109 0901 	add.w	r9, r9, #1
 8009c4a:	b11b      	cbz	r3, 8009c54 <_scanf_float+0x158>
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	3201      	adds	r2, #1
 8009c50:	9302      	str	r3, [sp, #8]
 8009c52:	60a2      	str	r2, [r4, #8]
 8009c54:	68a3      	ldr	r3, [r4, #8]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	60a3      	str	r3, [r4, #8]
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	6123      	str	r3, [r4, #16]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	607b      	str	r3, [r7, #4]
 8009c68:	f340 8084 	ble.w	8009d74 <_scanf_float+0x278>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	603b      	str	r3, [r7, #0]
 8009c72:	e766      	b.n	8009b42 <_scanf_float+0x46>
 8009c74:	eb1a 0f05 	cmn.w	sl, r5
 8009c78:	f47f af70 	bne.w	8009b5c <_scanf_float+0x60>
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c82:	6022      	str	r2, [r4, #0]
 8009c84:	f806 3b01 	strb.w	r3, [r6], #1
 8009c88:	e7e4      	b.n	8009c54 <_scanf_float+0x158>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	0610      	lsls	r0, r2, #24
 8009c8e:	f57f af65 	bpl.w	8009b5c <_scanf_float+0x60>
 8009c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c96:	e7f4      	b.n	8009c82 <_scanf_float+0x186>
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d10e      	bne.n	8009cbc <_scanf_float+0x1c0>
 8009c9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ca2:	d10e      	bne.n	8009cc2 <_scanf_float+0x1c6>
 8009ca4:	6822      	ldr	r2, [r4, #0]
 8009ca6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009caa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009cae:	d108      	bne.n	8009cc2 <_scanf_float+0x1c6>
 8009cb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	f04f 0a01 	mov.w	sl, #1
 8009cba:	e7e3      	b.n	8009c84 <_scanf_float+0x188>
 8009cbc:	f1ba 0f02 	cmp.w	sl, #2
 8009cc0:	d055      	beq.n	8009d6e <_scanf_float+0x272>
 8009cc2:	2d01      	cmp	r5, #1
 8009cc4:	d002      	beq.n	8009ccc <_scanf_float+0x1d0>
 8009cc6:	2d04      	cmp	r5, #4
 8009cc8:	f47f af48 	bne.w	8009b5c <_scanf_float+0x60>
 8009ccc:	3501      	adds	r5, #1
 8009cce:	b2ed      	uxtb	r5, r5
 8009cd0:	e7d8      	b.n	8009c84 <_scanf_float+0x188>
 8009cd2:	f1ba 0f01 	cmp.w	sl, #1
 8009cd6:	f47f af41 	bne.w	8009b5c <_scanf_float+0x60>
 8009cda:	f04f 0a02 	mov.w	sl, #2
 8009cde:	e7d1      	b.n	8009c84 <_scanf_float+0x188>
 8009ce0:	b97d      	cbnz	r5, 8009d02 <_scanf_float+0x206>
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	f47f af3c 	bne.w	8009b62 <_scanf_float+0x66>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009cf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009cf4:	f47f af39 	bne.w	8009b6a <_scanf_float+0x6e>
 8009cf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	2501      	movs	r5, #1
 8009d00:	e7c0      	b.n	8009c84 <_scanf_float+0x188>
 8009d02:	2d03      	cmp	r5, #3
 8009d04:	d0e2      	beq.n	8009ccc <_scanf_float+0x1d0>
 8009d06:	2d05      	cmp	r5, #5
 8009d08:	e7de      	b.n	8009cc8 <_scanf_float+0x1cc>
 8009d0a:	2d02      	cmp	r5, #2
 8009d0c:	f47f af26 	bne.w	8009b5c <_scanf_float+0x60>
 8009d10:	2503      	movs	r5, #3
 8009d12:	e7b7      	b.n	8009c84 <_scanf_float+0x188>
 8009d14:	2d06      	cmp	r5, #6
 8009d16:	f47f af21 	bne.w	8009b5c <_scanf_float+0x60>
 8009d1a:	2507      	movs	r5, #7
 8009d1c:	e7b2      	b.n	8009c84 <_scanf_float+0x188>
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	0591      	lsls	r1, r2, #22
 8009d22:	f57f af1b 	bpl.w	8009b5c <_scanf_float+0x60>
 8009d26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009d2a:	6022      	str	r2, [r4, #0]
 8009d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d30:	e7a8      	b.n	8009c84 <_scanf_float+0x188>
 8009d32:	6822      	ldr	r2, [r4, #0]
 8009d34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009d38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d3c:	d006      	beq.n	8009d4c <_scanf_float+0x250>
 8009d3e:	0550      	lsls	r0, r2, #21
 8009d40:	f57f af0c 	bpl.w	8009b5c <_scanf_float+0x60>
 8009d44:	f1b9 0f00 	cmp.w	r9, #0
 8009d48:	f43f af0f 	beq.w	8009b6a <_scanf_float+0x6e>
 8009d4c:	0591      	lsls	r1, r2, #22
 8009d4e:	bf58      	it	pl
 8009d50:	9901      	ldrpl	r1, [sp, #4]
 8009d52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d56:	bf58      	it	pl
 8009d58:	eba9 0101 	subpl.w	r1, r9, r1
 8009d5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d60:	bf58      	it	pl
 8009d62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d66:	6022      	str	r2, [r4, #0]
 8009d68:	f04f 0900 	mov.w	r9, #0
 8009d6c:	e78a      	b.n	8009c84 <_scanf_float+0x188>
 8009d6e:	f04f 0a03 	mov.w	sl, #3
 8009d72:	e787      	b.n	8009c84 <_scanf_float+0x188>
 8009d74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d78:	4639      	mov	r1, r7
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4798      	blx	r3
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	f43f aedf 	beq.w	8009b42 <_scanf_float+0x46>
 8009d84:	e6ea      	b.n	8009b5c <_scanf_float+0x60>
 8009d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d8e:	463a      	mov	r2, r7
 8009d90:	4640      	mov	r0, r8
 8009d92:	4798      	blx	r3
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	3b01      	subs	r3, #1
 8009d98:	6123      	str	r3, [r4, #16]
 8009d9a:	e6ec      	b.n	8009b76 <_scanf_float+0x7a>
 8009d9c:	1e6b      	subs	r3, r5, #1
 8009d9e:	2b06      	cmp	r3, #6
 8009da0:	d825      	bhi.n	8009dee <_scanf_float+0x2f2>
 8009da2:	2d02      	cmp	r5, #2
 8009da4:	d836      	bhi.n	8009e14 <_scanf_float+0x318>
 8009da6:	455e      	cmp	r6, fp
 8009da8:	f67f aee8 	bls.w	8009b7c <_scanf_float+0x80>
 8009dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009db0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009db4:	463a      	mov	r2, r7
 8009db6:	4640      	mov	r0, r8
 8009db8:	4798      	blx	r3
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	e7f1      	b.n	8009da6 <_scanf_float+0x2aa>
 8009dc2:	9802      	ldr	r0, [sp, #8]
 8009dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009dcc:	9002      	str	r0, [sp, #8]
 8009dce:	463a      	mov	r2, r7
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4798      	blx	r3
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dde:	fa5f fa8a 	uxtb.w	sl, sl
 8009de2:	f1ba 0f02 	cmp.w	sl, #2
 8009de6:	d1ec      	bne.n	8009dc2 <_scanf_float+0x2c6>
 8009de8:	3d03      	subs	r5, #3
 8009dea:	b2ed      	uxtb	r5, r5
 8009dec:	1b76      	subs	r6, r6, r5
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	05da      	lsls	r2, r3, #23
 8009df2:	d52f      	bpl.n	8009e54 <_scanf_float+0x358>
 8009df4:	055b      	lsls	r3, r3, #21
 8009df6:	d510      	bpl.n	8009e1a <_scanf_float+0x31e>
 8009df8:	455e      	cmp	r6, fp
 8009dfa:	f67f aebf 	bls.w	8009b7c <_scanf_float+0x80>
 8009dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e06:	463a      	mov	r2, r7
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4798      	blx	r3
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	e7f1      	b.n	8009df8 <_scanf_float+0x2fc>
 8009e14:	46aa      	mov	sl, r5
 8009e16:	9602      	str	r6, [sp, #8]
 8009e18:	e7df      	b.n	8009dda <_scanf_float+0x2de>
 8009e1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	2965      	cmp	r1, #101	; 0x65
 8009e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e26:	f106 35ff 	add.w	r5, r6, #4294967295
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	d00c      	beq.n	8009e48 <_scanf_float+0x34c>
 8009e2e:	2945      	cmp	r1, #69	; 0x45
 8009e30:	d00a      	beq.n	8009e48 <_scanf_float+0x34c>
 8009e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e36:	463a      	mov	r2, r7
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4798      	blx	r3
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	1eb5      	subs	r5, r6, #2
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4798      	blx	r3
 8009e52:	462e      	mov	r6, r5
 8009e54:	6825      	ldr	r5, [r4, #0]
 8009e56:	f015 0510 	ands.w	r5, r5, #16
 8009e5a:	d159      	bne.n	8009f10 <_scanf_float+0x414>
 8009e5c:	7035      	strb	r5, [r6, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e68:	d11b      	bne.n	8009ea2 <_scanf_float+0x3a6>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	454b      	cmp	r3, r9
 8009e6e:	eba3 0209 	sub.w	r2, r3, r9
 8009e72:	d123      	bne.n	8009ebc <_scanf_float+0x3c0>
 8009e74:	2200      	movs	r2, #0
 8009e76:	4659      	mov	r1, fp
 8009e78:	4640      	mov	r0, r8
 8009e7a:	f000 ff57 	bl	800ad2c <_strtod_r>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	f012 0f02 	tst.w	r2, #2
 8009e86:	ec57 6b10 	vmov	r6, r7, d0
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	d021      	beq.n	8009ed2 <_scanf_float+0x3d6>
 8009e8e:	9903      	ldr	r1, [sp, #12]
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	600a      	str	r2, [r1, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	e9c3 6700 	strd	r6, r7, [r3]
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60e3      	str	r3, [r4, #12]
 8009ea0:	e66d      	b.n	8009b7e <_scanf_float+0x82>
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0e5      	beq.n	8009e74 <_scanf_float+0x378>
 8009ea8:	9905      	ldr	r1, [sp, #20]
 8009eaa:	230a      	movs	r3, #10
 8009eac:	462a      	mov	r2, r5
 8009eae:	3101      	adds	r1, #1
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	f000 ffc3 	bl	800ae3c <_strtol_r>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	9e05      	ldr	r6, [sp, #20]
 8009eba:	1ac2      	subs	r2, r0, r3
 8009ebc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009ec0:	429e      	cmp	r6, r3
 8009ec2:	bf28      	it	cs
 8009ec4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ec8:	4912      	ldr	r1, [pc, #72]	; (8009f14 <_scanf_float+0x418>)
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f000 f8a6 	bl	800a01c <siprintf>
 8009ed0:	e7d0      	b.n	8009e74 <_scanf_float+0x378>
 8009ed2:	9903      	ldr	r1, [sp, #12]
 8009ed4:	f012 0f04 	tst.w	r2, #4
 8009ed8:	f103 0204 	add.w	r2, r3, #4
 8009edc:	600a      	str	r2, [r1, #0]
 8009ede:	d1d9      	bne.n	8009e94 <_scanf_float+0x398>
 8009ee0:	f8d3 8000 	ldr.w	r8, [r3]
 8009ee4:	ee10 2a10 	vmov	r2, s0
 8009ee8:	ee10 0a10 	vmov	r0, s0
 8009eec:	463b      	mov	r3, r7
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f7f6 fe44 	bl	8000b7c <__aeabi_dcmpun>
 8009ef4:	b128      	cbz	r0, 8009f02 <_scanf_float+0x406>
 8009ef6:	4808      	ldr	r0, [pc, #32]	; (8009f18 <_scanf_float+0x41c>)
 8009ef8:	f000 f88a 	bl	800a010 <nanf>
 8009efc:	ed88 0a00 	vstr	s0, [r8]
 8009f00:	e7cb      	b.n	8009e9a <_scanf_float+0x39e>
 8009f02:	4630      	mov	r0, r6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f7f6 fe97 	bl	8000c38 <__aeabi_d2f>
 8009f0a:	f8c8 0000 	str.w	r0, [r8]
 8009f0e:	e7c4      	b.n	8009e9a <_scanf_float+0x39e>
 8009f10:	2500      	movs	r5, #0
 8009f12:	e634      	b.n	8009b7e <_scanf_float+0x82>
 8009f14:	0800db4c 	.word	0x0800db4c
 8009f18:	0800df58 	.word	0x0800df58

08009f1c <cleanup_glue>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	460c      	mov	r4, r1
 8009f20:	6809      	ldr	r1, [r1, #0]
 8009f22:	4605      	mov	r5, r0
 8009f24:	b109      	cbz	r1, 8009f2a <cleanup_glue+0xe>
 8009f26:	f7ff fff9 	bl	8009f1c <cleanup_glue>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f32:	f002 bf69 	b.w	800ce08 <_free_r>
	...

08009f38 <_reclaim_reent>:
 8009f38:	4b2c      	ldr	r3, [pc, #176]	; (8009fec <_reclaim_reent+0xb4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4283      	cmp	r3, r0
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	d051      	beq.n	8009fe8 <_reclaim_reent+0xb0>
 8009f44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f46:	b143      	cbz	r3, 8009f5a <_reclaim_reent+0x22>
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d14a      	bne.n	8009fe4 <_reclaim_reent+0xac>
 8009f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f50:	6819      	ldr	r1, [r3, #0]
 8009f52:	b111      	cbz	r1, 8009f5a <_reclaim_reent+0x22>
 8009f54:	4620      	mov	r0, r4
 8009f56:	f002 ff57 	bl	800ce08 <_free_r>
 8009f5a:	6961      	ldr	r1, [r4, #20]
 8009f5c:	b111      	cbz	r1, 8009f64 <_reclaim_reent+0x2c>
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f002 ff52 	bl	800ce08 <_free_r>
 8009f64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f66:	b111      	cbz	r1, 8009f6e <_reclaim_reent+0x36>
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f002 ff4d 	bl	800ce08 <_free_r>
 8009f6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f70:	b111      	cbz	r1, 8009f78 <_reclaim_reent+0x40>
 8009f72:	4620      	mov	r0, r4
 8009f74:	f002 ff48 	bl	800ce08 <_free_r>
 8009f78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f7a:	b111      	cbz	r1, 8009f82 <_reclaim_reent+0x4a>
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f002 ff43 	bl	800ce08 <_free_r>
 8009f82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f84:	b111      	cbz	r1, 8009f8c <_reclaim_reent+0x54>
 8009f86:	4620      	mov	r0, r4
 8009f88:	f002 ff3e 	bl	800ce08 <_free_r>
 8009f8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f8e:	b111      	cbz	r1, 8009f96 <_reclaim_reent+0x5e>
 8009f90:	4620      	mov	r0, r4
 8009f92:	f002 ff39 	bl	800ce08 <_free_r>
 8009f96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f98:	b111      	cbz	r1, 8009fa0 <_reclaim_reent+0x68>
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f002 ff34 	bl	800ce08 <_free_r>
 8009fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa2:	b111      	cbz	r1, 8009faa <_reclaim_reent+0x72>
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f002 ff2f 	bl	800ce08 <_free_r>
 8009faa:	69a3      	ldr	r3, [r4, #24]
 8009fac:	b1e3      	cbz	r3, 8009fe8 <_reclaim_reent+0xb0>
 8009fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	4798      	blx	r3
 8009fb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fb6:	b1b9      	cbz	r1, 8009fe8 <_reclaim_reent+0xb0>
 8009fb8:	4620      	mov	r0, r4
 8009fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fbe:	f7ff bfad 	b.w	8009f1c <cleanup_glue>
 8009fc2:	5949      	ldr	r1, [r1, r5]
 8009fc4:	b941      	cbnz	r1, 8009fd8 <_reclaim_reent+0xa0>
 8009fc6:	3504      	adds	r5, #4
 8009fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fca:	2d80      	cmp	r5, #128	; 0x80
 8009fcc:	68d9      	ldr	r1, [r3, #12]
 8009fce:	d1f8      	bne.n	8009fc2 <_reclaim_reent+0x8a>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f002 ff19 	bl	800ce08 <_free_r>
 8009fd6:	e7ba      	b.n	8009f4e <_reclaim_reent+0x16>
 8009fd8:	680e      	ldr	r6, [r1, #0]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f002 ff14 	bl	800ce08 <_free_r>
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	e7ef      	b.n	8009fc4 <_reclaim_reent+0x8c>
 8009fe4:	2500      	movs	r5, #0
 8009fe6:	e7ef      	b.n	8009fc8 <_reclaim_reent+0x90>
 8009fe8:	bd70      	pop	{r4, r5, r6, pc}
 8009fea:	bf00      	nop
 8009fec:	20000010 	.word	0x20000010

08009ff0 <_sbrk_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d06      	ldr	r5, [pc, #24]	; (800a00c <_sbrk_r+0x1c>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	f7f7 fe82 	bl	8001d04 <_sbrk>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_sbrk_r+0x1a>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_sbrk_r+0x1a>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20002e78 	.word	0x20002e78

0800a010 <nanf>:
 800a010:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a018 <nanf+0x8>
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	7fc00000 	.word	0x7fc00000

0800a01c <siprintf>:
 800a01c:	b40e      	push	{r1, r2, r3}
 800a01e:	b500      	push	{lr}
 800a020:	b09c      	sub	sp, #112	; 0x70
 800a022:	ab1d      	add	r3, sp, #116	; 0x74
 800a024:	9002      	str	r0, [sp, #8]
 800a026:	9006      	str	r0, [sp, #24]
 800a028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a02c:	4809      	ldr	r0, [pc, #36]	; (800a054 <siprintf+0x38>)
 800a02e:	9107      	str	r1, [sp, #28]
 800a030:	9104      	str	r1, [sp, #16]
 800a032:	4909      	ldr	r1, [pc, #36]	; (800a058 <siprintf+0x3c>)
 800a034:	f853 2b04 	ldr.w	r2, [r3], #4
 800a038:	9105      	str	r1, [sp, #20]
 800a03a:	6800      	ldr	r0, [r0, #0]
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	a902      	add	r1, sp, #8
 800a040:	f002 ff8a 	bl	800cf58 <_svfiprintf_r>
 800a044:	9b02      	ldr	r3, [sp, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	b01c      	add	sp, #112	; 0x70
 800a04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a050:	b003      	add	sp, #12
 800a052:	4770      	bx	lr
 800a054:	20000010 	.word	0x20000010
 800a058:	ffff0208 	.word	0xffff0208

0800a05c <__sread>:
 800a05c:	b510      	push	{r4, lr}
 800a05e:	460c      	mov	r4, r1
 800a060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a064:	f003 f878 	bl	800d158 <_read_r>
 800a068:	2800      	cmp	r0, #0
 800a06a:	bfab      	itete	ge
 800a06c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a06e:	89a3      	ldrhlt	r3, [r4, #12]
 800a070:	181b      	addge	r3, r3, r0
 800a072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a076:	bfac      	ite	ge
 800a078:	6563      	strge	r3, [r4, #84]	; 0x54
 800a07a:	81a3      	strhlt	r3, [r4, #12]
 800a07c:	bd10      	pop	{r4, pc}

0800a07e <__swrite>:
 800a07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a082:	461f      	mov	r7, r3
 800a084:	898b      	ldrh	r3, [r1, #12]
 800a086:	05db      	lsls	r3, r3, #23
 800a088:	4605      	mov	r5, r0
 800a08a:	460c      	mov	r4, r1
 800a08c:	4616      	mov	r6, r2
 800a08e:	d505      	bpl.n	800a09c <__swrite+0x1e>
 800a090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a094:	2302      	movs	r3, #2
 800a096:	2200      	movs	r2, #0
 800a098:	f002 f9a6 	bl	800c3e8 <_lseek_r>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0a6:	81a3      	strh	r3, [r4, #12]
 800a0a8:	4632      	mov	r2, r6
 800a0aa:	463b      	mov	r3, r7
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b2:	f000 bec5 	b.w	800ae40 <_write_r>

0800a0b6 <__sseek>:
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0be:	f002 f993 	bl	800c3e8 <_lseek_r>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	bf15      	itete	ne
 800a0c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0d2:	81a3      	strheq	r3, [r4, #12]
 800a0d4:	bf18      	it	ne
 800a0d6:	81a3      	strhne	r3, [r4, #12]
 800a0d8:	bd10      	pop	{r4, pc}

0800a0da <__sclose>:
 800a0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0de:	f000 bec1 	b.w	800ae64 <_close_r>

0800a0e2 <sulp>:
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ec:	4616      	mov	r6, r2
 800a0ee:	f002 fd25 	bl	800cb3c <__ulp>
 800a0f2:	ec51 0b10 	vmov	r0, r1, d0
 800a0f6:	b17e      	cbz	r6, 800a118 <sulp+0x36>
 800a0f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a100:	2b00      	cmp	r3, #0
 800a102:	dd09      	ble.n	800a118 <sulp+0x36>
 800a104:	051b      	lsls	r3, r3, #20
 800a106:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a10a:	2400      	movs	r4, #0
 800a10c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a110:	4622      	mov	r2, r4
 800a112:	462b      	mov	r3, r5
 800a114:	f7f6 fa98 	bl	8000648 <__aeabi_dmul>
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	0000      	movs	r0, r0
 800a11c:	0000      	movs	r0, r0
	...

0800a120 <_strtod_l>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	ed2d 8b02 	vpush	{d8}
 800a128:	b09d      	sub	sp, #116	; 0x74
 800a12a:	461f      	mov	r7, r3
 800a12c:	2300      	movs	r3, #0
 800a12e:	9318      	str	r3, [sp, #96]	; 0x60
 800a130:	4ba2      	ldr	r3, [pc, #648]	; (800a3bc <_strtod_l+0x29c>)
 800a132:	9213      	str	r2, [sp, #76]	; 0x4c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	9305      	str	r3, [sp, #20]
 800a138:	4604      	mov	r4, r0
 800a13a:	4618      	mov	r0, r3
 800a13c:	4688      	mov	r8, r1
 800a13e:	f7f6 f86f 	bl	8000220 <strlen>
 800a142:	f04f 0a00 	mov.w	sl, #0
 800a146:	4605      	mov	r5, r0
 800a148:	f04f 0b00 	mov.w	fp, #0
 800a14c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	2a2b      	cmp	r2, #43	; 0x2b
 800a156:	d04e      	beq.n	800a1f6 <_strtod_l+0xd6>
 800a158:	d83b      	bhi.n	800a1d2 <_strtod_l+0xb2>
 800a15a:	2a0d      	cmp	r2, #13
 800a15c:	d834      	bhi.n	800a1c8 <_strtod_l+0xa8>
 800a15e:	2a08      	cmp	r2, #8
 800a160:	d834      	bhi.n	800a1cc <_strtod_l+0xac>
 800a162:	2a00      	cmp	r2, #0
 800a164:	d03e      	beq.n	800a1e4 <_strtod_l+0xc4>
 800a166:	2300      	movs	r3, #0
 800a168:	930a      	str	r3, [sp, #40]	; 0x28
 800a16a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a16c:	7833      	ldrb	r3, [r6, #0]
 800a16e:	2b30      	cmp	r3, #48	; 0x30
 800a170:	f040 80b0 	bne.w	800a2d4 <_strtod_l+0x1b4>
 800a174:	7873      	ldrb	r3, [r6, #1]
 800a176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a17a:	2b58      	cmp	r3, #88	; 0x58
 800a17c:	d168      	bne.n	800a250 <_strtod_l+0x130>
 800a17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	ab18      	add	r3, sp, #96	; 0x60
 800a184:	9702      	str	r7, [sp, #8]
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	4a8d      	ldr	r2, [pc, #564]	; (800a3c0 <_strtod_l+0x2a0>)
 800a18a:	ab19      	add	r3, sp, #100	; 0x64
 800a18c:	a917      	add	r1, sp, #92	; 0x5c
 800a18e:	4620      	mov	r0, r4
 800a190:	f001 fe1e 	bl	800bdd0 <__gethex>
 800a194:	f010 0707 	ands.w	r7, r0, #7
 800a198:	4605      	mov	r5, r0
 800a19a:	d005      	beq.n	800a1a8 <_strtod_l+0x88>
 800a19c:	2f06      	cmp	r7, #6
 800a19e:	d12c      	bne.n	800a1fa <_strtod_l+0xda>
 800a1a0:	3601      	adds	r6, #1
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f040 8590 	bne.w	800acd0 <_strtod_l+0xbb0>
 800a1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b2:	b1eb      	cbz	r3, 800a1f0 <_strtod_l+0xd0>
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a1ba:	ec43 2b10 	vmov	d0, r2, r3
 800a1be:	b01d      	add	sp, #116	; 0x74
 800a1c0:	ecbd 8b02 	vpop	{d8}
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	2a20      	cmp	r2, #32
 800a1ca:	d1cc      	bne.n	800a166 <_strtod_l+0x46>
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1d0:	e7be      	b.n	800a150 <_strtod_l+0x30>
 800a1d2:	2a2d      	cmp	r2, #45	; 0x2d
 800a1d4:	d1c7      	bne.n	800a166 <_strtod_l+0x46>
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	920a      	str	r2, [sp, #40]	; 0x28
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1c2      	bne.n	800a16a <_strtod_l+0x4a>
 800a1e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 856e 	bne.w	800accc <_strtod_l+0xbac>
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	465b      	mov	r3, fp
 800a1f4:	e7e1      	b.n	800a1ba <_strtod_l+0x9a>
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	e7ee      	b.n	800a1d8 <_strtod_l+0xb8>
 800a1fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1fc:	b13a      	cbz	r2, 800a20e <_strtod_l+0xee>
 800a1fe:	2135      	movs	r1, #53	; 0x35
 800a200:	a81a      	add	r0, sp, #104	; 0x68
 800a202:	f002 fda6 	bl	800cd52 <__copybits>
 800a206:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a208:	4620      	mov	r0, r4
 800a20a:	f002 f965 	bl	800c4d8 <_Bfree>
 800a20e:	3f01      	subs	r7, #1
 800a210:	2f04      	cmp	r7, #4
 800a212:	d806      	bhi.n	800a222 <_strtod_l+0x102>
 800a214:	e8df f007 	tbb	[pc, r7]
 800a218:	1714030a 	.word	0x1714030a
 800a21c:	0a          	.byte	0x0a
 800a21d:	00          	.byte	0x00
 800a21e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a222:	0728      	lsls	r0, r5, #28
 800a224:	d5c0      	bpl.n	800a1a8 <_strtod_l+0x88>
 800a226:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a22a:	e7bd      	b.n	800a1a8 <_strtod_l+0x88>
 800a22c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a236:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a23a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a23e:	e7f0      	b.n	800a222 <_strtod_l+0x102>
 800a240:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a3c4 <_strtod_l+0x2a4>
 800a244:	e7ed      	b.n	800a222 <_strtod_l+0x102>
 800a246:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a24a:	f04f 3aff 	mov.w	sl, #4294967295
 800a24e:	e7e8      	b.n	800a222 <_strtod_l+0x102>
 800a250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	9217      	str	r2, [sp, #92]	; 0x5c
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b30      	cmp	r3, #48	; 0x30
 800a25a:	d0f9      	beq.n	800a250 <_strtod_l+0x130>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0a3      	beq.n	800a1a8 <_strtod_l+0x88>
 800a260:	2301      	movs	r3, #1
 800a262:	f04f 0900 	mov.w	r9, #0
 800a266:	9304      	str	r3, [sp, #16]
 800a268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a26a:	9308      	str	r3, [sp, #32]
 800a26c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a270:	464f      	mov	r7, r9
 800a272:	220a      	movs	r2, #10
 800a274:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a276:	7806      	ldrb	r6, [r0, #0]
 800a278:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a27c:	b2d9      	uxtb	r1, r3
 800a27e:	2909      	cmp	r1, #9
 800a280:	d92a      	bls.n	800a2d8 <_strtod_l+0x1b8>
 800a282:	9905      	ldr	r1, [sp, #20]
 800a284:	462a      	mov	r2, r5
 800a286:	f002 ff83 	bl	800d190 <strncmp>
 800a28a:	b398      	cbz	r0, 800a2f4 <_strtod_l+0x1d4>
 800a28c:	2000      	movs	r0, #0
 800a28e:	4632      	mov	r2, r6
 800a290:	463d      	mov	r5, r7
 800a292:	9005      	str	r0, [sp, #20]
 800a294:	4603      	mov	r3, r0
 800a296:	2a65      	cmp	r2, #101	; 0x65
 800a298:	d001      	beq.n	800a29e <_strtod_l+0x17e>
 800a29a:	2a45      	cmp	r2, #69	; 0x45
 800a29c:	d118      	bne.n	800a2d0 <_strtod_l+0x1b0>
 800a29e:	b91d      	cbnz	r5, 800a2a8 <_strtod_l+0x188>
 800a2a0:	9a04      	ldr	r2, [sp, #16]
 800a2a2:	4302      	orrs	r2, r0
 800a2a4:	d09e      	beq.n	800a1e4 <_strtod_l+0xc4>
 800a2a6:	2500      	movs	r5, #0
 800a2a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a2ac:	f108 0201 	add.w	r2, r8, #1
 800a2b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a2b6:	2a2b      	cmp	r2, #43	; 0x2b
 800a2b8:	d075      	beq.n	800a3a6 <_strtod_l+0x286>
 800a2ba:	2a2d      	cmp	r2, #45	; 0x2d
 800a2bc:	d07b      	beq.n	800a3b6 <_strtod_l+0x296>
 800a2be:	f04f 0c00 	mov.w	ip, #0
 800a2c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a2c6:	2909      	cmp	r1, #9
 800a2c8:	f240 8082 	bls.w	800a3d0 <_strtod_l+0x2b0>
 800a2cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a2d0:	2600      	movs	r6, #0
 800a2d2:	e09d      	b.n	800a410 <_strtod_l+0x2f0>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	e7c4      	b.n	800a262 <_strtod_l+0x142>
 800a2d8:	2f08      	cmp	r7, #8
 800a2da:	bfd8      	it	le
 800a2dc:	9907      	ldrle	r1, [sp, #28]
 800a2de:	f100 0001 	add.w	r0, r0, #1
 800a2e2:	bfda      	itte	le
 800a2e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2e8:	9307      	strle	r3, [sp, #28]
 800a2ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a2ee:	3701      	adds	r7, #1
 800a2f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a2f2:	e7bf      	b.n	800a274 <_strtod_l+0x154>
 800a2f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2f6:	195a      	adds	r2, r3, r5
 800a2f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2fa:	5d5a      	ldrb	r2, [r3, r5]
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	d037      	beq.n	800a370 <_strtod_l+0x250>
 800a300:	9005      	str	r0, [sp, #20]
 800a302:	463d      	mov	r5, r7
 800a304:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a308:	2b09      	cmp	r3, #9
 800a30a:	d912      	bls.n	800a332 <_strtod_l+0x212>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e7c2      	b.n	800a296 <_strtod_l+0x176>
 800a310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	9217      	str	r2, [sp, #92]	; 0x5c
 800a316:	785a      	ldrb	r2, [r3, #1]
 800a318:	3001      	adds	r0, #1
 800a31a:	2a30      	cmp	r2, #48	; 0x30
 800a31c:	d0f8      	beq.n	800a310 <_strtod_l+0x1f0>
 800a31e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a322:	2b08      	cmp	r3, #8
 800a324:	f200 84d9 	bhi.w	800acda <_strtod_l+0xbba>
 800a328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a32a:	9005      	str	r0, [sp, #20]
 800a32c:	2000      	movs	r0, #0
 800a32e:	9308      	str	r3, [sp, #32]
 800a330:	4605      	mov	r5, r0
 800a332:	3a30      	subs	r2, #48	; 0x30
 800a334:	f100 0301 	add.w	r3, r0, #1
 800a338:	d014      	beq.n	800a364 <_strtod_l+0x244>
 800a33a:	9905      	ldr	r1, [sp, #20]
 800a33c:	4419      	add	r1, r3
 800a33e:	9105      	str	r1, [sp, #20]
 800a340:	462b      	mov	r3, r5
 800a342:	eb00 0e05 	add.w	lr, r0, r5
 800a346:	210a      	movs	r1, #10
 800a348:	4573      	cmp	r3, lr
 800a34a:	d113      	bne.n	800a374 <_strtod_l+0x254>
 800a34c:	182b      	adds	r3, r5, r0
 800a34e:	2b08      	cmp	r3, #8
 800a350:	f105 0501 	add.w	r5, r5, #1
 800a354:	4405      	add	r5, r0
 800a356:	dc1c      	bgt.n	800a392 <_strtod_l+0x272>
 800a358:	9907      	ldr	r1, [sp, #28]
 800a35a:	230a      	movs	r3, #10
 800a35c:	fb03 2301 	mla	r3, r3, r1, r2
 800a360:	9307      	str	r3, [sp, #28]
 800a362:	2300      	movs	r3, #0
 800a364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a366:	1c51      	adds	r1, r2, #1
 800a368:	9117      	str	r1, [sp, #92]	; 0x5c
 800a36a:	7852      	ldrb	r2, [r2, #1]
 800a36c:	4618      	mov	r0, r3
 800a36e:	e7c9      	b.n	800a304 <_strtod_l+0x1e4>
 800a370:	4638      	mov	r0, r7
 800a372:	e7d2      	b.n	800a31a <_strtod_l+0x1fa>
 800a374:	2b08      	cmp	r3, #8
 800a376:	dc04      	bgt.n	800a382 <_strtod_l+0x262>
 800a378:	9e07      	ldr	r6, [sp, #28]
 800a37a:	434e      	muls	r6, r1
 800a37c:	9607      	str	r6, [sp, #28]
 800a37e:	3301      	adds	r3, #1
 800a380:	e7e2      	b.n	800a348 <_strtod_l+0x228>
 800a382:	f103 0c01 	add.w	ip, r3, #1
 800a386:	f1bc 0f10 	cmp.w	ip, #16
 800a38a:	bfd8      	it	le
 800a38c:	fb01 f909 	mulle.w	r9, r1, r9
 800a390:	e7f5      	b.n	800a37e <_strtod_l+0x25e>
 800a392:	2d10      	cmp	r5, #16
 800a394:	bfdc      	itt	le
 800a396:	230a      	movle	r3, #10
 800a398:	fb03 2909 	mlale	r9, r3, r9, r2
 800a39c:	e7e1      	b.n	800a362 <_strtod_l+0x242>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e77c      	b.n	800a2a0 <_strtod_l+0x180>
 800a3a6:	f04f 0c00 	mov.w	ip, #0
 800a3aa:	f108 0202 	add.w	r2, r8, #2
 800a3ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a3b4:	e785      	b.n	800a2c2 <_strtod_l+0x1a2>
 800a3b6:	f04f 0c01 	mov.w	ip, #1
 800a3ba:	e7f6      	b.n	800a3aa <_strtod_l+0x28a>
 800a3bc:	0800dda0 	.word	0x0800dda0
 800a3c0:	0800db54 	.word	0x0800db54
 800a3c4:	7ff00000 	.word	0x7ff00000
 800a3c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3ca:	1c51      	adds	r1, r2, #1
 800a3cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800a3ce:	7852      	ldrb	r2, [r2, #1]
 800a3d0:	2a30      	cmp	r2, #48	; 0x30
 800a3d2:	d0f9      	beq.n	800a3c8 <_strtod_l+0x2a8>
 800a3d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a3d8:	2908      	cmp	r1, #8
 800a3da:	f63f af79 	bhi.w	800a2d0 <_strtod_l+0x1b0>
 800a3de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a3e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3e4:	9206      	str	r2, [sp, #24]
 800a3e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3e8:	1c51      	adds	r1, r2, #1
 800a3ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800a3ec:	7852      	ldrb	r2, [r2, #1]
 800a3ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a3f2:	2e09      	cmp	r6, #9
 800a3f4:	d937      	bls.n	800a466 <_strtod_l+0x346>
 800a3f6:	9e06      	ldr	r6, [sp, #24]
 800a3f8:	1b89      	subs	r1, r1, r6
 800a3fa:	2908      	cmp	r1, #8
 800a3fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a400:	dc02      	bgt.n	800a408 <_strtod_l+0x2e8>
 800a402:	4576      	cmp	r6, lr
 800a404:	bfa8      	it	ge
 800a406:	4676      	movge	r6, lr
 800a408:	f1bc 0f00 	cmp.w	ip, #0
 800a40c:	d000      	beq.n	800a410 <_strtod_l+0x2f0>
 800a40e:	4276      	negs	r6, r6
 800a410:	2d00      	cmp	r5, #0
 800a412:	d14d      	bne.n	800a4b0 <_strtod_l+0x390>
 800a414:	9904      	ldr	r1, [sp, #16]
 800a416:	4301      	orrs	r1, r0
 800a418:	f47f aec6 	bne.w	800a1a8 <_strtod_l+0x88>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f47f aee1 	bne.w	800a1e4 <_strtod_l+0xc4>
 800a422:	2a69      	cmp	r2, #105	; 0x69
 800a424:	d027      	beq.n	800a476 <_strtod_l+0x356>
 800a426:	dc24      	bgt.n	800a472 <_strtod_l+0x352>
 800a428:	2a49      	cmp	r2, #73	; 0x49
 800a42a:	d024      	beq.n	800a476 <_strtod_l+0x356>
 800a42c:	2a4e      	cmp	r2, #78	; 0x4e
 800a42e:	f47f aed9 	bne.w	800a1e4 <_strtod_l+0xc4>
 800a432:	499f      	ldr	r1, [pc, #636]	; (800a6b0 <_strtod_l+0x590>)
 800a434:	a817      	add	r0, sp, #92	; 0x5c
 800a436:	f001 ff23 	bl	800c280 <__match>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f43f aed2 	beq.w	800a1e4 <_strtod_l+0xc4>
 800a440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	2b28      	cmp	r3, #40	; 0x28
 800a446:	d12d      	bne.n	800a4a4 <_strtod_l+0x384>
 800a448:	499a      	ldr	r1, [pc, #616]	; (800a6b4 <_strtod_l+0x594>)
 800a44a:	aa1a      	add	r2, sp, #104	; 0x68
 800a44c:	a817      	add	r0, sp, #92	; 0x5c
 800a44e:	f001 ff2b 	bl	800c2a8 <__hexnan>
 800a452:	2805      	cmp	r0, #5
 800a454:	d126      	bne.n	800a4a4 <_strtod_l+0x384>
 800a456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a458:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a45c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a460:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a464:	e6a0      	b.n	800a1a8 <_strtod_l+0x88>
 800a466:	210a      	movs	r1, #10
 800a468:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a46c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a470:	e7b9      	b.n	800a3e6 <_strtod_l+0x2c6>
 800a472:	2a6e      	cmp	r2, #110	; 0x6e
 800a474:	e7db      	b.n	800a42e <_strtod_l+0x30e>
 800a476:	4990      	ldr	r1, [pc, #576]	; (800a6b8 <_strtod_l+0x598>)
 800a478:	a817      	add	r0, sp, #92	; 0x5c
 800a47a:	f001 ff01 	bl	800c280 <__match>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f43f aeb0 	beq.w	800a1e4 <_strtod_l+0xc4>
 800a484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a486:	498d      	ldr	r1, [pc, #564]	; (800a6bc <_strtod_l+0x59c>)
 800a488:	3b01      	subs	r3, #1
 800a48a:	a817      	add	r0, sp, #92	; 0x5c
 800a48c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a48e:	f001 fef7 	bl	800c280 <__match>
 800a492:	b910      	cbnz	r0, 800a49a <_strtod_l+0x37a>
 800a494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a496:	3301      	adds	r3, #1
 800a498:	9317      	str	r3, [sp, #92]	; 0x5c
 800a49a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a6cc <_strtod_l+0x5ac>
 800a49e:	f04f 0a00 	mov.w	sl, #0
 800a4a2:	e681      	b.n	800a1a8 <_strtod_l+0x88>
 800a4a4:	4886      	ldr	r0, [pc, #536]	; (800a6c0 <_strtod_l+0x5a0>)
 800a4a6:	f002 fe6b 	bl	800d180 <nan>
 800a4aa:	ec5b ab10 	vmov	sl, fp, d0
 800a4ae:	e67b      	b.n	800a1a8 <_strtod_l+0x88>
 800a4b0:	9b05      	ldr	r3, [sp, #20]
 800a4b2:	9807      	ldr	r0, [sp, #28]
 800a4b4:	1af3      	subs	r3, r6, r3
 800a4b6:	2f00      	cmp	r7, #0
 800a4b8:	bf08      	it	eq
 800a4ba:	462f      	moveq	r7, r5
 800a4bc:	2d10      	cmp	r5, #16
 800a4be:	9306      	str	r3, [sp, #24]
 800a4c0:	46a8      	mov	r8, r5
 800a4c2:	bfa8      	it	ge
 800a4c4:	f04f 0810 	movge.w	r8, #16
 800a4c8:	f7f6 f844 	bl	8000554 <__aeabi_ui2d>
 800a4cc:	2d09      	cmp	r5, #9
 800a4ce:	4682      	mov	sl, r0
 800a4d0:	468b      	mov	fp, r1
 800a4d2:	dd13      	ble.n	800a4fc <_strtod_l+0x3dc>
 800a4d4:	4b7b      	ldr	r3, [pc, #492]	; (800a6c4 <_strtod_l+0x5a4>)
 800a4d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a4da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a4de:	f7f6 f8b3 	bl	8000648 <__aeabi_dmul>
 800a4e2:	4682      	mov	sl, r0
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	468b      	mov	fp, r1
 800a4e8:	f7f6 f834 	bl	8000554 <__aeabi_ui2d>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	f7f5 fef2 	bl	80002dc <__adddf3>
 800a4f8:	4682      	mov	sl, r0
 800a4fa:	468b      	mov	fp, r1
 800a4fc:	2d0f      	cmp	r5, #15
 800a4fe:	dc38      	bgt.n	800a572 <_strtod_l+0x452>
 800a500:	9b06      	ldr	r3, [sp, #24]
 800a502:	2b00      	cmp	r3, #0
 800a504:	f43f ae50 	beq.w	800a1a8 <_strtod_l+0x88>
 800a508:	dd24      	ble.n	800a554 <_strtod_l+0x434>
 800a50a:	2b16      	cmp	r3, #22
 800a50c:	dc0b      	bgt.n	800a526 <_strtod_l+0x406>
 800a50e:	496d      	ldr	r1, [pc, #436]	; (800a6c4 <_strtod_l+0x5a4>)
 800a510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a518:	4652      	mov	r2, sl
 800a51a:	465b      	mov	r3, fp
 800a51c:	f7f6 f894 	bl	8000648 <__aeabi_dmul>
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	e640      	b.n	800a1a8 <_strtod_l+0x88>
 800a526:	9a06      	ldr	r2, [sp, #24]
 800a528:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a52c:	4293      	cmp	r3, r2
 800a52e:	db20      	blt.n	800a572 <_strtod_l+0x452>
 800a530:	4c64      	ldr	r4, [pc, #400]	; (800a6c4 <_strtod_l+0x5a4>)
 800a532:	f1c5 050f 	rsb	r5, r5, #15
 800a536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a53a:	4652      	mov	r2, sl
 800a53c:	465b      	mov	r3, fp
 800a53e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a542:	f7f6 f881 	bl	8000648 <__aeabi_dmul>
 800a546:	9b06      	ldr	r3, [sp, #24]
 800a548:	1b5d      	subs	r5, r3, r5
 800a54a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a54e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a552:	e7e3      	b.n	800a51c <_strtod_l+0x3fc>
 800a554:	9b06      	ldr	r3, [sp, #24]
 800a556:	3316      	adds	r3, #22
 800a558:	db0b      	blt.n	800a572 <_strtod_l+0x452>
 800a55a:	9b05      	ldr	r3, [sp, #20]
 800a55c:	1b9e      	subs	r6, r3, r6
 800a55e:	4b59      	ldr	r3, [pc, #356]	; (800a6c4 <_strtod_l+0x5a4>)
 800a560:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a564:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a568:	4650      	mov	r0, sl
 800a56a:	4659      	mov	r1, fp
 800a56c:	f7f6 f996 	bl	800089c <__aeabi_ddiv>
 800a570:	e7d6      	b.n	800a520 <_strtod_l+0x400>
 800a572:	9b06      	ldr	r3, [sp, #24]
 800a574:	eba5 0808 	sub.w	r8, r5, r8
 800a578:	4498      	add	r8, r3
 800a57a:	f1b8 0f00 	cmp.w	r8, #0
 800a57e:	dd74      	ble.n	800a66a <_strtod_l+0x54a>
 800a580:	f018 030f 	ands.w	r3, r8, #15
 800a584:	d00a      	beq.n	800a59c <_strtod_l+0x47c>
 800a586:	494f      	ldr	r1, [pc, #316]	; (800a6c4 <_strtod_l+0x5a4>)
 800a588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a58c:	4652      	mov	r2, sl
 800a58e:	465b      	mov	r3, fp
 800a590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a594:	f7f6 f858 	bl	8000648 <__aeabi_dmul>
 800a598:	4682      	mov	sl, r0
 800a59a:	468b      	mov	fp, r1
 800a59c:	f038 080f 	bics.w	r8, r8, #15
 800a5a0:	d04f      	beq.n	800a642 <_strtod_l+0x522>
 800a5a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a5a6:	dd22      	ble.n	800a5ee <_strtod_l+0x4ce>
 800a5a8:	2500      	movs	r5, #0
 800a5aa:	462e      	mov	r6, r5
 800a5ac:	9507      	str	r5, [sp, #28]
 800a5ae:	9505      	str	r5, [sp, #20]
 800a5b0:	2322      	movs	r3, #34	; 0x22
 800a5b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a6cc <_strtod_l+0x5ac>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	f04f 0a00 	mov.w	sl, #0
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f43f adf2 	beq.w	800a1a8 <_strtod_l+0x88>
 800a5c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f001 ff86 	bl	800c4d8 <_Bfree>
 800a5cc:	9905      	ldr	r1, [sp, #20]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f001 ff82 	bl	800c4d8 <_Bfree>
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f001 ff7e 	bl	800c4d8 <_Bfree>
 800a5dc:	9907      	ldr	r1, [sp, #28]
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f001 ff7a 	bl	800c4d8 <_Bfree>
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f001 ff76 	bl	800c4d8 <_Bfree>
 800a5ec:	e5dc      	b.n	800a1a8 <_strtod_l+0x88>
 800a5ee:	4b36      	ldr	r3, [pc, #216]	; (800a6c8 <_strtod_l+0x5a8>)
 800a5f0:	9304      	str	r3, [sp, #16]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	4659      	mov	r1, fp
 800a5fc:	4699      	mov	r9, r3
 800a5fe:	f1b8 0f01 	cmp.w	r8, #1
 800a602:	dc21      	bgt.n	800a648 <_strtod_l+0x528>
 800a604:	b10b      	cbz	r3, 800a60a <_strtod_l+0x4ea>
 800a606:	4682      	mov	sl, r0
 800a608:	468b      	mov	fp, r1
 800a60a:	4b2f      	ldr	r3, [pc, #188]	; (800a6c8 <_strtod_l+0x5a8>)
 800a60c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a610:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a614:	4652      	mov	r2, sl
 800a616:	465b      	mov	r3, fp
 800a618:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a61c:	f7f6 f814 	bl	8000648 <__aeabi_dmul>
 800a620:	4b2a      	ldr	r3, [pc, #168]	; (800a6cc <_strtod_l+0x5ac>)
 800a622:	460a      	mov	r2, r1
 800a624:	400b      	ands	r3, r1
 800a626:	492a      	ldr	r1, [pc, #168]	; (800a6d0 <_strtod_l+0x5b0>)
 800a628:	428b      	cmp	r3, r1
 800a62a:	4682      	mov	sl, r0
 800a62c:	d8bc      	bhi.n	800a5a8 <_strtod_l+0x488>
 800a62e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a632:	428b      	cmp	r3, r1
 800a634:	bf86      	itte	hi
 800a636:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a6d4 <_strtod_l+0x5b4>
 800a63a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a63e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a642:	2300      	movs	r3, #0
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	e084      	b.n	800a752 <_strtod_l+0x632>
 800a648:	f018 0f01 	tst.w	r8, #1
 800a64c:	d005      	beq.n	800a65a <_strtod_l+0x53a>
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	f7f5 fff8 	bl	8000648 <__aeabi_dmul>
 800a658:	2301      	movs	r3, #1
 800a65a:	9a04      	ldr	r2, [sp, #16]
 800a65c:	3208      	adds	r2, #8
 800a65e:	f109 0901 	add.w	r9, r9, #1
 800a662:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a666:	9204      	str	r2, [sp, #16]
 800a668:	e7c9      	b.n	800a5fe <_strtod_l+0x4de>
 800a66a:	d0ea      	beq.n	800a642 <_strtod_l+0x522>
 800a66c:	f1c8 0800 	rsb	r8, r8, #0
 800a670:	f018 020f 	ands.w	r2, r8, #15
 800a674:	d00a      	beq.n	800a68c <_strtod_l+0x56c>
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <_strtod_l+0x5a4>)
 800a678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a67c:	4650      	mov	r0, sl
 800a67e:	4659      	mov	r1, fp
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	f7f6 f90a 	bl	800089c <__aeabi_ddiv>
 800a688:	4682      	mov	sl, r0
 800a68a:	468b      	mov	fp, r1
 800a68c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a690:	d0d7      	beq.n	800a642 <_strtod_l+0x522>
 800a692:	f1b8 0f1f 	cmp.w	r8, #31
 800a696:	dd1f      	ble.n	800a6d8 <_strtod_l+0x5b8>
 800a698:	2500      	movs	r5, #0
 800a69a:	462e      	mov	r6, r5
 800a69c:	9507      	str	r5, [sp, #28]
 800a69e:	9505      	str	r5, [sp, #20]
 800a6a0:	2322      	movs	r3, #34	; 0x22
 800a6a2:	f04f 0a00 	mov.w	sl, #0
 800a6a6:	f04f 0b00 	mov.w	fp, #0
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	e786      	b.n	800a5bc <_strtod_l+0x49c>
 800a6ae:	bf00      	nop
 800a6b0:	0800db25 	.word	0x0800db25
 800a6b4:	0800db68 	.word	0x0800db68
 800a6b8:	0800db1d 	.word	0x0800db1d
 800a6bc:	0800dcac 	.word	0x0800dcac
 800a6c0:	0800df58 	.word	0x0800df58
 800a6c4:	0800de38 	.word	0x0800de38
 800a6c8:	0800de10 	.word	0x0800de10
 800a6cc:	7ff00000 	.word	0x7ff00000
 800a6d0:	7ca00000 	.word	0x7ca00000
 800a6d4:	7fefffff 	.word	0x7fefffff
 800a6d8:	f018 0310 	ands.w	r3, r8, #16
 800a6dc:	bf18      	it	ne
 800a6de:	236a      	movne	r3, #106	; 0x6a
 800a6e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800aa90 <_strtod_l+0x970>
 800a6e4:	9304      	str	r3, [sp, #16]
 800a6e6:	4650      	mov	r0, sl
 800a6e8:	4659      	mov	r1, fp
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f018 0f01 	tst.w	r8, #1
 800a6f0:	d004      	beq.n	800a6fc <_strtod_l+0x5dc>
 800a6f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a6f6:	f7f5 ffa7 	bl	8000648 <__aeabi_dmul>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a700:	f109 0908 	add.w	r9, r9, #8
 800a704:	d1f2      	bne.n	800a6ec <_strtod_l+0x5cc>
 800a706:	b10b      	cbz	r3, 800a70c <_strtod_l+0x5ec>
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	b1c3      	cbz	r3, 800a742 <_strtod_l+0x622>
 800a710:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a714:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a718:	2b00      	cmp	r3, #0
 800a71a:	4659      	mov	r1, fp
 800a71c:	dd11      	ble.n	800a742 <_strtod_l+0x622>
 800a71e:	2b1f      	cmp	r3, #31
 800a720:	f340 8124 	ble.w	800a96c <_strtod_l+0x84c>
 800a724:	2b34      	cmp	r3, #52	; 0x34
 800a726:	bfde      	ittt	le
 800a728:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a72c:	f04f 33ff 	movle.w	r3, #4294967295
 800a730:	fa03 f202 	lslle.w	r2, r3, r2
 800a734:	f04f 0a00 	mov.w	sl, #0
 800a738:	bfcc      	ite	gt
 800a73a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a73e:	ea02 0b01 	andle.w	fp, r2, r1
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	4650      	mov	r0, sl
 800a748:	4659      	mov	r1, fp
 800a74a:	f7f6 f9e5 	bl	8000b18 <__aeabi_dcmpeq>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d1a2      	bne.n	800a698 <_strtod_l+0x578>
 800a752:	9b07      	ldr	r3, [sp, #28]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	9908      	ldr	r1, [sp, #32]
 800a758:	462b      	mov	r3, r5
 800a75a:	463a      	mov	r2, r7
 800a75c:	4620      	mov	r0, r4
 800a75e:	f001 ff23 	bl	800c5a8 <__s2b>
 800a762:	9007      	str	r0, [sp, #28]
 800a764:	2800      	cmp	r0, #0
 800a766:	f43f af1f 	beq.w	800a5a8 <_strtod_l+0x488>
 800a76a:	9b05      	ldr	r3, [sp, #20]
 800a76c:	1b9e      	subs	r6, r3, r6
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfb4      	ite	lt
 800a774:	4633      	movlt	r3, r6
 800a776:	2300      	movge	r3, #0
 800a778:	930c      	str	r3, [sp, #48]	; 0x30
 800a77a:	9b06      	ldr	r3, [sp, #24]
 800a77c:	2500      	movs	r5, #0
 800a77e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a782:	9312      	str	r3, [sp, #72]	; 0x48
 800a784:	462e      	mov	r6, r5
 800a786:	9b07      	ldr	r3, [sp, #28]
 800a788:	4620      	mov	r0, r4
 800a78a:	6859      	ldr	r1, [r3, #4]
 800a78c:	f001 fe64 	bl	800c458 <_Balloc>
 800a790:	9005      	str	r0, [sp, #20]
 800a792:	2800      	cmp	r0, #0
 800a794:	f43f af0c 	beq.w	800a5b0 <_strtod_l+0x490>
 800a798:	9b07      	ldr	r3, [sp, #28]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	3202      	adds	r2, #2
 800a79e:	f103 010c 	add.w	r1, r3, #12
 800a7a2:	0092      	lsls	r2, r2, #2
 800a7a4:	300c      	adds	r0, #12
 800a7a6:	f7fe fc94 	bl	80090d2 <memcpy>
 800a7aa:	ec4b ab10 	vmov	d0, sl, fp
 800a7ae:	aa1a      	add	r2, sp, #104	; 0x68
 800a7b0:	a919      	add	r1, sp, #100	; 0x64
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f002 fa3e 	bl	800cc34 <__d2b>
 800a7b8:	ec4b ab18 	vmov	d8, sl, fp
 800a7bc:	9018      	str	r0, [sp, #96]	; 0x60
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f43f aef6 	beq.w	800a5b0 <_strtod_l+0x490>
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f001 ff88 	bl	800c6dc <__i2b>
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f43f aeee 	beq.w	800a5b0 <_strtod_l+0x490>
 800a7d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7d6:	9904      	ldr	r1, [sp, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfab      	itete	ge
 800a7dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a7de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a7e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a7e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a7e6:	bfac      	ite	ge
 800a7e8:	eb03 0902 	addge.w	r9, r3, r2
 800a7ec:	1ad7      	sublt	r7, r2, r3
 800a7ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a7f0:	eba3 0801 	sub.w	r8, r3, r1
 800a7f4:	4490      	add	r8, r2
 800a7f6:	4ba1      	ldr	r3, [pc, #644]	; (800aa7c <_strtod_l+0x95c>)
 800a7f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7fc:	4598      	cmp	r8, r3
 800a7fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a802:	f280 80c7 	bge.w	800a994 <_strtod_l+0x874>
 800a806:	eba3 0308 	sub.w	r3, r3, r8
 800a80a:	2b1f      	cmp	r3, #31
 800a80c:	eba2 0203 	sub.w	r2, r2, r3
 800a810:	f04f 0101 	mov.w	r1, #1
 800a814:	f300 80b1 	bgt.w	800a97a <_strtod_l+0x85a>
 800a818:	fa01 f303 	lsl.w	r3, r1, r3
 800a81c:	930d      	str	r3, [sp, #52]	; 0x34
 800a81e:	2300      	movs	r3, #0
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	eb09 0802 	add.w	r8, r9, r2
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	45c1      	cmp	r9, r8
 800a82a:	4417      	add	r7, r2
 800a82c:	441f      	add	r7, r3
 800a82e:	464b      	mov	r3, r9
 800a830:	bfa8      	it	ge
 800a832:	4643      	movge	r3, r8
 800a834:	42bb      	cmp	r3, r7
 800a836:	bfa8      	it	ge
 800a838:	463b      	movge	r3, r7
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfc2      	ittt	gt
 800a83e:	eba8 0803 	subgt.w	r8, r8, r3
 800a842:	1aff      	subgt	r7, r7, r3
 800a844:	eba9 0903 	subgt.w	r9, r9, r3
 800a848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	dd17      	ble.n	800a87e <_strtod_l+0x75e>
 800a84e:	4631      	mov	r1, r6
 800a850:	461a      	mov	r2, r3
 800a852:	4620      	mov	r0, r4
 800a854:	f002 f802 	bl	800c85c <__pow5mult>
 800a858:	4606      	mov	r6, r0
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f aea8 	beq.w	800a5b0 <_strtod_l+0x490>
 800a860:	4601      	mov	r1, r0
 800a862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a864:	4620      	mov	r0, r4
 800a866:	f001 ff4f 	bl	800c708 <__multiply>
 800a86a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a86c:	2800      	cmp	r0, #0
 800a86e:	f43f ae9f 	beq.w	800a5b0 <_strtod_l+0x490>
 800a872:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a874:	4620      	mov	r0, r4
 800a876:	f001 fe2f 	bl	800c4d8 <_Bfree>
 800a87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a87c:	9318      	str	r3, [sp, #96]	; 0x60
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	f300 808c 	bgt.w	800a99e <_strtod_l+0x87e>
 800a886:	9b06      	ldr	r3, [sp, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dd08      	ble.n	800a89e <_strtod_l+0x77e>
 800a88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a88e:	9905      	ldr	r1, [sp, #20]
 800a890:	4620      	mov	r0, r4
 800a892:	f001 ffe3 	bl	800c85c <__pow5mult>
 800a896:	9005      	str	r0, [sp, #20]
 800a898:	2800      	cmp	r0, #0
 800a89a:	f43f ae89 	beq.w	800a5b0 <_strtod_l+0x490>
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	dd08      	ble.n	800a8b4 <_strtod_l+0x794>
 800a8a2:	9905      	ldr	r1, [sp, #20]
 800a8a4:	463a      	mov	r2, r7
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f002 f832 	bl	800c910 <__lshift>
 800a8ac:	9005      	str	r0, [sp, #20]
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f ae7e 	beq.w	800a5b0 <_strtod_l+0x490>
 800a8b4:	f1b9 0f00 	cmp.w	r9, #0
 800a8b8:	dd08      	ble.n	800a8cc <_strtod_l+0x7ac>
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	464a      	mov	r2, r9
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f002 f826 	bl	800c910 <__lshift>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f43f ae72 	beq.w	800a5b0 <_strtod_l+0x490>
 800a8cc:	9a05      	ldr	r2, [sp, #20]
 800a8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f002 f8a9 	bl	800ca28 <__mdiff>
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	f43f ae69 	beq.w	800a5b0 <_strtod_l+0x490>
 800a8de:	68c3      	ldr	r3, [r0, #12]
 800a8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60c3      	str	r3, [r0, #12]
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	f002 f882 	bl	800c9f0 <__mcmp>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	da60      	bge.n	800a9b2 <_strtod_l+0x892>
 800a8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8f2:	ea53 030a 	orrs.w	r3, r3, sl
 800a8f6:	f040 8082 	bne.w	800a9fe <_strtod_l+0x8de>
 800a8fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d17d      	bne.n	800a9fe <_strtod_l+0x8de>
 800a902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a906:	0d1b      	lsrs	r3, r3, #20
 800a908:	051b      	lsls	r3, r3, #20
 800a90a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a90e:	d976      	bls.n	800a9fe <_strtod_l+0x8de>
 800a910:	696b      	ldr	r3, [r5, #20]
 800a912:	b913      	cbnz	r3, 800a91a <_strtod_l+0x7fa>
 800a914:	692b      	ldr	r3, [r5, #16]
 800a916:	2b01      	cmp	r3, #1
 800a918:	dd71      	ble.n	800a9fe <_strtod_l+0x8de>
 800a91a:	4629      	mov	r1, r5
 800a91c:	2201      	movs	r2, #1
 800a91e:	4620      	mov	r0, r4
 800a920:	f001 fff6 	bl	800c910 <__lshift>
 800a924:	4631      	mov	r1, r6
 800a926:	4605      	mov	r5, r0
 800a928:	f002 f862 	bl	800c9f0 <__mcmp>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	dd66      	ble.n	800a9fe <_strtod_l+0x8de>
 800a930:	9904      	ldr	r1, [sp, #16]
 800a932:	4a53      	ldr	r2, [pc, #332]	; (800aa80 <_strtod_l+0x960>)
 800a934:	465b      	mov	r3, fp
 800a936:	2900      	cmp	r1, #0
 800a938:	f000 8081 	beq.w	800aa3e <_strtod_l+0x91e>
 800a93c:	ea02 010b 	and.w	r1, r2, fp
 800a940:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a944:	dc7b      	bgt.n	800aa3e <_strtod_l+0x91e>
 800a946:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a94a:	f77f aea9 	ble.w	800a6a0 <_strtod_l+0x580>
 800a94e:	4b4d      	ldr	r3, [pc, #308]	; (800aa84 <_strtod_l+0x964>)
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	2200      	movs	r2, #0
 800a956:	f7f5 fe77 	bl	8000648 <__aeabi_dmul>
 800a95a:	460b      	mov	r3, r1
 800a95c:	4303      	orrs	r3, r0
 800a95e:	bf08      	it	eq
 800a960:	2322      	moveq	r3, #34	; 0x22
 800a962:	4682      	mov	sl, r0
 800a964:	468b      	mov	fp, r1
 800a966:	bf08      	it	eq
 800a968:	6023      	streq	r3, [r4, #0]
 800a96a:	e62b      	b.n	800a5c4 <_strtod_l+0x4a4>
 800a96c:	f04f 32ff 	mov.w	r2, #4294967295
 800a970:	fa02 f303 	lsl.w	r3, r2, r3
 800a974:	ea03 0a0a 	and.w	sl, r3, sl
 800a978:	e6e3      	b.n	800a742 <_strtod_l+0x622>
 800a97a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a97e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a982:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a986:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a98a:	fa01 f308 	lsl.w	r3, r1, r8
 800a98e:	9308      	str	r3, [sp, #32]
 800a990:	910d      	str	r1, [sp, #52]	; 0x34
 800a992:	e746      	b.n	800a822 <_strtod_l+0x702>
 800a994:	2300      	movs	r3, #0
 800a996:	9308      	str	r3, [sp, #32]
 800a998:	2301      	movs	r3, #1
 800a99a:	930d      	str	r3, [sp, #52]	; 0x34
 800a99c:	e741      	b.n	800a822 <_strtod_l+0x702>
 800a99e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f001 ffb4 	bl	800c910 <__lshift>
 800a9a8:	9018      	str	r0, [sp, #96]	; 0x60
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f47f af6b 	bne.w	800a886 <_strtod_l+0x766>
 800a9b0:	e5fe      	b.n	800a5b0 <_strtod_l+0x490>
 800a9b2:	465f      	mov	r7, fp
 800a9b4:	d16e      	bne.n	800aa94 <_strtod_l+0x974>
 800a9b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9bc:	b342      	cbz	r2, 800aa10 <_strtod_l+0x8f0>
 800a9be:	4a32      	ldr	r2, [pc, #200]	; (800aa88 <_strtod_l+0x968>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d128      	bne.n	800aa16 <_strtod_l+0x8f6>
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	4651      	mov	r1, sl
 800a9c8:	b1eb      	cbz	r3, 800aa06 <_strtod_l+0x8e6>
 800a9ca:	4b2d      	ldr	r3, [pc, #180]	; (800aa80 <_strtod_l+0x960>)
 800a9cc:	403b      	ands	r3, r7
 800a9ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d6:	d819      	bhi.n	800aa0c <_strtod_l+0x8ec>
 800a9d8:	0d1b      	lsrs	r3, r3, #20
 800a9da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9de:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e2:	4299      	cmp	r1, r3
 800a9e4:	d117      	bne.n	800aa16 <_strtod_l+0x8f6>
 800a9e6:	4b29      	ldr	r3, [pc, #164]	; (800aa8c <_strtod_l+0x96c>)
 800a9e8:	429f      	cmp	r7, r3
 800a9ea:	d102      	bne.n	800a9f2 <_strtod_l+0x8d2>
 800a9ec:	3101      	adds	r1, #1
 800a9ee:	f43f addf 	beq.w	800a5b0 <_strtod_l+0x490>
 800a9f2:	4b23      	ldr	r3, [pc, #140]	; (800aa80 <_strtod_l+0x960>)
 800a9f4:	403b      	ands	r3, r7
 800a9f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a9fa:	f04f 0a00 	mov.w	sl, #0
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1a4      	bne.n	800a94e <_strtod_l+0x82e>
 800aa04:	e5de      	b.n	800a5c4 <_strtod_l+0x4a4>
 800aa06:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0a:	e7ea      	b.n	800a9e2 <_strtod_l+0x8c2>
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	e7e8      	b.n	800a9e2 <_strtod_l+0x8c2>
 800aa10:	ea53 030a 	orrs.w	r3, r3, sl
 800aa14:	d08c      	beq.n	800a930 <_strtod_l+0x810>
 800aa16:	9b08      	ldr	r3, [sp, #32]
 800aa18:	b1db      	cbz	r3, 800aa52 <_strtod_l+0x932>
 800aa1a:	423b      	tst	r3, r7
 800aa1c:	d0ef      	beq.n	800a9fe <_strtod_l+0x8de>
 800aa1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa20:	9a04      	ldr	r2, [sp, #16]
 800aa22:	4650      	mov	r0, sl
 800aa24:	4659      	mov	r1, fp
 800aa26:	b1c3      	cbz	r3, 800aa5a <_strtod_l+0x93a>
 800aa28:	f7ff fb5b 	bl	800a0e2 <sulp>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	ec51 0b18 	vmov	r0, r1, d8
 800aa34:	f7f5 fc52 	bl	80002dc <__adddf3>
 800aa38:	4682      	mov	sl, r0
 800aa3a:	468b      	mov	fp, r1
 800aa3c:	e7df      	b.n	800a9fe <_strtod_l+0x8de>
 800aa3e:	4013      	ands	r3, r2
 800aa40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aa44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa4c:	f04f 3aff 	mov.w	sl, #4294967295
 800aa50:	e7d5      	b.n	800a9fe <_strtod_l+0x8de>
 800aa52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa54:	ea13 0f0a 	tst.w	r3, sl
 800aa58:	e7e0      	b.n	800aa1c <_strtod_l+0x8fc>
 800aa5a:	f7ff fb42 	bl	800a0e2 <sulp>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	ec51 0b18 	vmov	r0, r1, d8
 800aa66:	f7f5 fc37 	bl	80002d8 <__aeabi_dsub>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4682      	mov	sl, r0
 800aa70:	468b      	mov	fp, r1
 800aa72:	f7f6 f851 	bl	8000b18 <__aeabi_dcmpeq>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d0c1      	beq.n	800a9fe <_strtod_l+0x8de>
 800aa7a:	e611      	b.n	800a6a0 <_strtod_l+0x580>
 800aa7c:	fffffc02 	.word	0xfffffc02
 800aa80:	7ff00000 	.word	0x7ff00000
 800aa84:	39500000 	.word	0x39500000
 800aa88:	000fffff 	.word	0x000fffff
 800aa8c:	7fefffff 	.word	0x7fefffff
 800aa90:	0800db80 	.word	0x0800db80
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	f002 f928 	bl	800ccec <__ratio>
 800aa9c:	ec59 8b10 	vmov	r8, r9, d0
 800aaa0:	ee10 0a10 	vmov	r0, s0
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aaaa:	4649      	mov	r1, r9
 800aaac:	f7f6 f848 	bl	8000b40 <__aeabi_dcmple>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d07a      	beq.n	800abaa <_strtod_l+0xa8a>
 800aab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d04a      	beq.n	800ab50 <_strtod_l+0xa30>
 800aaba:	4b95      	ldr	r3, [pc, #596]	; (800ad10 <_strtod_l+0xbf0>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aac2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ad10 <_strtod_l+0xbf0>
 800aac6:	f04f 0800 	mov.w	r8, #0
 800aaca:	4b92      	ldr	r3, [pc, #584]	; (800ad14 <_strtod_l+0xbf4>)
 800aacc:	403b      	ands	r3, r7
 800aace:	930d      	str	r3, [sp, #52]	; 0x34
 800aad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aad2:	4b91      	ldr	r3, [pc, #580]	; (800ad18 <_strtod_l+0xbf8>)
 800aad4:	429a      	cmp	r2, r3
 800aad6:	f040 80b0 	bne.w	800ac3a <_strtod_l+0xb1a>
 800aada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aade:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aae2:	ec4b ab10 	vmov	d0, sl, fp
 800aae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aaea:	f002 f827 	bl	800cb3c <__ulp>
 800aaee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aaf2:	ec53 2b10 	vmov	r2, r3, d0
 800aaf6:	f7f5 fda7 	bl	8000648 <__aeabi_dmul>
 800aafa:	4652      	mov	r2, sl
 800aafc:	465b      	mov	r3, fp
 800aafe:	f7f5 fbed 	bl	80002dc <__adddf3>
 800ab02:	460b      	mov	r3, r1
 800ab04:	4983      	ldr	r1, [pc, #524]	; (800ad14 <_strtod_l+0xbf4>)
 800ab06:	4a85      	ldr	r2, [pc, #532]	; (800ad1c <_strtod_l+0xbfc>)
 800ab08:	4019      	ands	r1, r3
 800ab0a:	4291      	cmp	r1, r2
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	d960      	bls.n	800abd2 <_strtod_l+0xab2>
 800ab10:	ee18 3a90 	vmov	r3, s17
 800ab14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d104      	bne.n	800ab26 <_strtod_l+0xa06>
 800ab1c:	ee18 3a10 	vmov	r3, s16
 800ab20:	3301      	adds	r3, #1
 800ab22:	f43f ad45 	beq.w	800a5b0 <_strtod_l+0x490>
 800ab26:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ad28 <_strtod_l+0xc08>
 800ab2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ab2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab30:	4620      	mov	r0, r4
 800ab32:	f001 fcd1 	bl	800c4d8 <_Bfree>
 800ab36:	9905      	ldr	r1, [sp, #20]
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f001 fccd 	bl	800c4d8 <_Bfree>
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4620      	mov	r0, r4
 800ab42:	f001 fcc9 	bl	800c4d8 <_Bfree>
 800ab46:	4629      	mov	r1, r5
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f001 fcc5 	bl	800c4d8 <_Bfree>
 800ab4e:	e61a      	b.n	800a786 <_strtod_l+0x666>
 800ab50:	f1ba 0f00 	cmp.w	sl, #0
 800ab54:	d11b      	bne.n	800ab8e <_strtod_l+0xa6e>
 800ab56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab5a:	b9f3      	cbnz	r3, 800ab9a <_strtod_l+0xa7a>
 800ab5c:	4b6c      	ldr	r3, [pc, #432]	; (800ad10 <_strtod_l+0xbf0>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4640      	mov	r0, r8
 800ab62:	4649      	mov	r1, r9
 800ab64:	f7f5 ffe2 	bl	8000b2c <__aeabi_dcmplt>
 800ab68:	b9d0      	cbnz	r0, 800aba0 <_strtod_l+0xa80>
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	4b6c      	ldr	r3, [pc, #432]	; (800ad20 <_strtod_l+0xc00>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	f7f5 fd69 	bl	8000648 <__aeabi_dmul>
 800ab76:	4680      	mov	r8, r0
 800ab78:	4689      	mov	r9, r1
 800ab7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ab82:	9315      	str	r3, [sp, #84]	; 0x54
 800ab84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ab88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab8c:	e79d      	b.n	800aaca <_strtod_l+0x9aa>
 800ab8e:	f1ba 0f01 	cmp.w	sl, #1
 800ab92:	d102      	bne.n	800ab9a <_strtod_l+0xa7a>
 800ab94:	2f00      	cmp	r7, #0
 800ab96:	f43f ad83 	beq.w	800a6a0 <_strtod_l+0x580>
 800ab9a:	4b62      	ldr	r3, [pc, #392]	; (800ad24 <_strtod_l+0xc04>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	e78e      	b.n	800aabe <_strtod_l+0x99e>
 800aba0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ad20 <_strtod_l+0xc00>
 800aba4:	f04f 0800 	mov.w	r8, #0
 800aba8:	e7e7      	b.n	800ab7a <_strtod_l+0xa5a>
 800abaa:	4b5d      	ldr	r3, [pc, #372]	; (800ad20 <_strtod_l+0xc00>)
 800abac:	4640      	mov	r0, r8
 800abae:	4649      	mov	r1, r9
 800abb0:	2200      	movs	r2, #0
 800abb2:	f7f5 fd49 	bl	8000648 <__aeabi_dmul>
 800abb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb8:	4680      	mov	r8, r0
 800abba:	4689      	mov	r9, r1
 800abbc:	b933      	cbnz	r3, 800abcc <_strtod_l+0xaac>
 800abbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abc2:	900e      	str	r0, [sp, #56]	; 0x38
 800abc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800abc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800abca:	e7dd      	b.n	800ab88 <_strtod_l+0xa68>
 800abcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800abd0:	e7f9      	b.n	800abc6 <_strtod_l+0xaa6>
 800abd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1a8      	bne.n	800ab2e <_strtod_l+0xa0e>
 800abdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abe2:	0d1b      	lsrs	r3, r3, #20
 800abe4:	051b      	lsls	r3, r3, #20
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d1a1      	bne.n	800ab2e <_strtod_l+0xa0e>
 800abea:	4640      	mov	r0, r8
 800abec:	4649      	mov	r1, r9
 800abee:	f7f6 f88b 	bl	8000d08 <__aeabi_d2lz>
 800abf2:	f7f5 fcfb 	bl	80005ec <__aeabi_l2d>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	f7f5 fb6b 	bl	80002d8 <__aeabi_dsub>
 800ac02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac08:	ea43 030a 	orr.w	r3, r3, sl
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4689      	mov	r9, r1
 800ac12:	d055      	beq.n	800acc0 <_strtod_l+0xba0>
 800ac14:	a336      	add	r3, pc, #216	; (adr r3, 800acf0 <_strtod_l+0xbd0>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	f7f5 ff87 	bl	8000b2c <__aeabi_dcmplt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f47f acd0 	bne.w	800a5c4 <_strtod_l+0x4a4>
 800ac24:	a334      	add	r3, pc, #208	; (adr r3, 800acf8 <_strtod_l+0xbd8>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	f7f5 ff9b 	bl	8000b68 <__aeabi_dcmpgt>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f43f af7b 	beq.w	800ab2e <_strtod_l+0xa0e>
 800ac38:	e4c4      	b.n	800a5c4 <_strtod_l+0x4a4>
 800ac3a:	9b04      	ldr	r3, [sp, #16]
 800ac3c:	b333      	cbz	r3, 800ac8c <_strtod_l+0xb6c>
 800ac3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac44:	d822      	bhi.n	800ac8c <_strtod_l+0xb6c>
 800ac46:	a32e      	add	r3, pc, #184	; (adr r3, 800ad00 <_strtod_l+0xbe0>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	4649      	mov	r1, r9
 800ac50:	f7f5 ff76 	bl	8000b40 <__aeabi_dcmple>
 800ac54:	b1a0      	cbz	r0, 800ac80 <_strtod_l+0xb60>
 800ac56:	4649      	mov	r1, r9
 800ac58:	4640      	mov	r0, r8
 800ac5a:	f7f5 ffcd 	bl	8000bf8 <__aeabi_d2uiz>
 800ac5e:	2801      	cmp	r0, #1
 800ac60:	bf38      	it	cc
 800ac62:	2001      	movcc	r0, #1
 800ac64:	f7f5 fc76 	bl	8000554 <__aeabi_ui2d>
 800ac68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	bb23      	cbnz	r3, 800acba <_strtod_l+0xb9a>
 800ac70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac74:	9010      	str	r0, [sp, #64]	; 0x40
 800ac76:	9311      	str	r3, [sp, #68]	; 0x44
 800ac78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ac88:	1a9b      	subs	r3, r3, r2
 800ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac90:	eeb0 0a48 	vmov.f32	s0, s16
 800ac94:	eef0 0a68 	vmov.f32	s1, s17
 800ac98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac9c:	f001 ff4e 	bl	800cb3c <__ulp>
 800aca0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aca4:	ec53 2b10 	vmov	r2, r3, d0
 800aca8:	f7f5 fcce 	bl	8000648 <__aeabi_dmul>
 800acac:	ec53 2b18 	vmov	r2, r3, d8
 800acb0:	f7f5 fb14 	bl	80002dc <__adddf3>
 800acb4:	4682      	mov	sl, r0
 800acb6:	468b      	mov	fp, r1
 800acb8:	e78d      	b.n	800abd6 <_strtod_l+0xab6>
 800acba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800acbe:	e7db      	b.n	800ac78 <_strtod_l+0xb58>
 800acc0:	a311      	add	r3, pc, #68	; (adr r3, 800ad08 <_strtod_l+0xbe8>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 ff31 	bl	8000b2c <__aeabi_dcmplt>
 800acca:	e7b2      	b.n	800ac32 <_strtod_l+0xb12>
 800accc:	2300      	movs	r3, #0
 800acce:	930a      	str	r3, [sp, #40]	; 0x28
 800acd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800acd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	f7ff ba6b 	b.w	800a1b0 <_strtod_l+0x90>
 800acda:	2a65      	cmp	r2, #101	; 0x65
 800acdc:	f43f ab5f 	beq.w	800a39e <_strtod_l+0x27e>
 800ace0:	2a45      	cmp	r2, #69	; 0x45
 800ace2:	f43f ab5c 	beq.w	800a39e <_strtod_l+0x27e>
 800ace6:	2301      	movs	r3, #1
 800ace8:	f7ff bb94 	b.w	800a414 <_strtod_l+0x2f4>
 800acec:	f3af 8000 	nop.w
 800acf0:	94a03595 	.word	0x94a03595
 800acf4:	3fdfffff 	.word	0x3fdfffff
 800acf8:	35afe535 	.word	0x35afe535
 800acfc:	3fe00000 	.word	0x3fe00000
 800ad00:	ffc00000 	.word	0xffc00000
 800ad04:	41dfffff 	.word	0x41dfffff
 800ad08:	94a03595 	.word	0x94a03595
 800ad0c:	3fcfffff 	.word	0x3fcfffff
 800ad10:	3ff00000 	.word	0x3ff00000
 800ad14:	7ff00000 	.word	0x7ff00000
 800ad18:	7fe00000 	.word	0x7fe00000
 800ad1c:	7c9fffff 	.word	0x7c9fffff
 800ad20:	3fe00000 	.word	0x3fe00000
 800ad24:	bff00000 	.word	0xbff00000
 800ad28:	7fefffff 	.word	0x7fefffff

0800ad2c <_strtod_r>:
 800ad2c:	4b01      	ldr	r3, [pc, #4]	; (800ad34 <_strtod_r+0x8>)
 800ad2e:	f7ff b9f7 	b.w	800a120 <_strtod_l>
 800ad32:	bf00      	nop
 800ad34:	20000078 	.word	0x20000078

0800ad38 <_strtol_l.constprop.0>:
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3e:	d001      	beq.n	800ad44 <_strtol_l.constprop.0+0xc>
 800ad40:	2b24      	cmp	r3, #36	; 0x24
 800ad42:	d906      	bls.n	800ad52 <_strtol_l.constprop.0+0x1a>
 800ad44:	f7fe f8a2 	bl	8008e8c <__errno>
 800ad48:	2316      	movs	r3, #22
 800ad4a:	6003      	str	r3, [r0, #0]
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae38 <_strtol_l.constprop.0+0x100>
 800ad56:	460d      	mov	r5, r1
 800ad58:	462e      	mov	r6, r5
 800ad5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ad62:	f017 0708 	ands.w	r7, r7, #8
 800ad66:	d1f7      	bne.n	800ad58 <_strtol_l.constprop.0+0x20>
 800ad68:	2c2d      	cmp	r4, #45	; 0x2d
 800ad6a:	d132      	bne.n	800add2 <_strtol_l.constprop.0+0x9a>
 800ad6c:	782c      	ldrb	r4, [r5, #0]
 800ad6e:	2701      	movs	r7, #1
 800ad70:	1cb5      	adds	r5, r6, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d05b      	beq.n	800ae2e <_strtol_l.constprop.0+0xf6>
 800ad76:	2b10      	cmp	r3, #16
 800ad78:	d109      	bne.n	800ad8e <_strtol_l.constprop.0+0x56>
 800ad7a:	2c30      	cmp	r4, #48	; 0x30
 800ad7c:	d107      	bne.n	800ad8e <_strtol_l.constprop.0+0x56>
 800ad7e:	782c      	ldrb	r4, [r5, #0]
 800ad80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad84:	2c58      	cmp	r4, #88	; 0x58
 800ad86:	d14d      	bne.n	800ae24 <_strtol_l.constprop.0+0xec>
 800ad88:	786c      	ldrb	r4, [r5, #1]
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	3502      	adds	r5, #2
 800ad8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad96:	f04f 0c00 	mov.w	ip, #0
 800ad9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad9e:	4666      	mov	r6, ip
 800ada0:	fb03 8a19 	mls	sl, r3, r9, r8
 800ada4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ada8:	f1be 0f09 	cmp.w	lr, #9
 800adac:	d816      	bhi.n	800addc <_strtol_l.constprop.0+0xa4>
 800adae:	4674      	mov	r4, lr
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	dd24      	ble.n	800adfe <_strtol_l.constprop.0+0xc6>
 800adb4:	f1bc 0f00 	cmp.w	ip, #0
 800adb8:	db1e      	blt.n	800adf8 <_strtol_l.constprop.0+0xc0>
 800adba:	45b1      	cmp	r9, r6
 800adbc:	d31c      	bcc.n	800adf8 <_strtol_l.constprop.0+0xc0>
 800adbe:	d101      	bne.n	800adc4 <_strtol_l.constprop.0+0x8c>
 800adc0:	45a2      	cmp	sl, r4
 800adc2:	db19      	blt.n	800adf8 <_strtol_l.constprop.0+0xc0>
 800adc4:	fb06 4603 	mla	r6, r6, r3, r4
 800adc8:	f04f 0c01 	mov.w	ip, #1
 800adcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800add0:	e7e8      	b.n	800ada4 <_strtol_l.constprop.0+0x6c>
 800add2:	2c2b      	cmp	r4, #43	; 0x2b
 800add4:	bf04      	itt	eq
 800add6:	782c      	ldrbeq	r4, [r5, #0]
 800add8:	1cb5      	addeq	r5, r6, #2
 800adda:	e7ca      	b.n	800ad72 <_strtol_l.constprop.0+0x3a>
 800addc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ade0:	f1be 0f19 	cmp.w	lr, #25
 800ade4:	d801      	bhi.n	800adea <_strtol_l.constprop.0+0xb2>
 800ade6:	3c37      	subs	r4, #55	; 0x37
 800ade8:	e7e2      	b.n	800adb0 <_strtol_l.constprop.0+0x78>
 800adea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800adee:	f1be 0f19 	cmp.w	lr, #25
 800adf2:	d804      	bhi.n	800adfe <_strtol_l.constprop.0+0xc6>
 800adf4:	3c57      	subs	r4, #87	; 0x57
 800adf6:	e7db      	b.n	800adb0 <_strtol_l.constprop.0+0x78>
 800adf8:	f04f 3cff 	mov.w	ip, #4294967295
 800adfc:	e7e6      	b.n	800adcc <_strtol_l.constprop.0+0x94>
 800adfe:	f1bc 0f00 	cmp.w	ip, #0
 800ae02:	da05      	bge.n	800ae10 <_strtol_l.constprop.0+0xd8>
 800ae04:	2322      	movs	r3, #34	; 0x22
 800ae06:	6003      	str	r3, [r0, #0]
 800ae08:	4646      	mov	r6, r8
 800ae0a:	b942      	cbnz	r2, 800ae1e <_strtol_l.constprop.0+0xe6>
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	e79e      	b.n	800ad4e <_strtol_l.constprop.0+0x16>
 800ae10:	b107      	cbz	r7, 800ae14 <_strtol_l.constprop.0+0xdc>
 800ae12:	4276      	negs	r6, r6
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	d0f9      	beq.n	800ae0c <_strtol_l.constprop.0+0xd4>
 800ae18:	f1bc 0f00 	cmp.w	ip, #0
 800ae1c:	d000      	beq.n	800ae20 <_strtol_l.constprop.0+0xe8>
 800ae1e:	1e69      	subs	r1, r5, #1
 800ae20:	6011      	str	r1, [r2, #0]
 800ae22:	e7f3      	b.n	800ae0c <_strtol_l.constprop.0+0xd4>
 800ae24:	2430      	movs	r4, #48	; 0x30
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1b1      	bne.n	800ad8e <_strtol_l.constprop.0+0x56>
 800ae2a:	2308      	movs	r3, #8
 800ae2c:	e7af      	b.n	800ad8e <_strtol_l.constprop.0+0x56>
 800ae2e:	2c30      	cmp	r4, #48	; 0x30
 800ae30:	d0a5      	beq.n	800ad7e <_strtol_l.constprop.0+0x46>
 800ae32:	230a      	movs	r3, #10
 800ae34:	e7ab      	b.n	800ad8e <_strtol_l.constprop.0+0x56>
 800ae36:	bf00      	nop
 800ae38:	0800dba9 	.word	0x0800dba9

0800ae3c <_strtol_r>:
 800ae3c:	f7ff bf7c 	b.w	800ad38 <_strtol_l.constprop.0>

0800ae40 <_write_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d07      	ldr	r5, [pc, #28]	; (800ae60 <_write_r+0x20>)
 800ae44:	4604      	mov	r4, r0
 800ae46:	4608      	mov	r0, r1
 800ae48:	4611      	mov	r1, r2
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	602a      	str	r2, [r5, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f7f6 ff07 	bl	8001c62 <_write>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_write_r+0x1e>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_write_r+0x1e>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	20002e78 	.word	0x20002e78

0800ae64 <_close_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4d06      	ldr	r5, [pc, #24]	; (800ae80 <_close_r+0x1c>)
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	4608      	mov	r0, r1
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	f7f6 ff13 	bl	8001c9a <_close>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	d102      	bne.n	800ae7e <_close_r+0x1a>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	b103      	cbz	r3, 800ae7e <_close_r+0x1a>
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	20002e78 	.word	0x20002e78

0800ae84 <quorem>:
 800ae84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	6903      	ldr	r3, [r0, #16]
 800ae8a:	690c      	ldr	r4, [r1, #16]
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	4607      	mov	r7, r0
 800ae90:	f2c0 8081 	blt.w	800af96 <quorem+0x112>
 800ae94:	3c01      	subs	r4, #1
 800ae96:	f101 0814 	add.w	r8, r1, #20
 800ae9a:	f100 0514 	add.w	r5, r0, #20
 800ae9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeac:	3301      	adds	r3, #1
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aeb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aeb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aebc:	d331      	bcc.n	800af22 <quorem+0x9e>
 800aebe:	f04f 0e00 	mov.w	lr, #0
 800aec2:	4640      	mov	r0, r8
 800aec4:	46ac      	mov	ip, r5
 800aec6:	46f2      	mov	sl, lr
 800aec8:	f850 2b04 	ldr.w	r2, [r0], #4
 800aecc:	b293      	uxth	r3, r2
 800aece:	fb06 e303 	mla	r3, r6, r3, lr
 800aed2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	ebaa 0303 	sub.w	r3, sl, r3
 800aedc:	f8dc a000 	ldr.w	sl, [ip]
 800aee0:	0c12      	lsrs	r2, r2, #16
 800aee2:	fa13 f38a 	uxtah	r3, r3, sl
 800aee6:	fb06 e202 	mla	r2, r6, r2, lr
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	9b00      	ldr	r3, [sp, #0]
 800aeee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aef2:	b292      	uxth	r2, r2
 800aef4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aefc:	f8bd 3000 	ldrh.w	r3, [sp]
 800af00:	4581      	cmp	r9, r0
 800af02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af06:	f84c 3b04 	str.w	r3, [ip], #4
 800af0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af0e:	d2db      	bcs.n	800aec8 <quorem+0x44>
 800af10:	f855 300b 	ldr.w	r3, [r5, fp]
 800af14:	b92b      	cbnz	r3, 800af22 <quorem+0x9e>
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	3b04      	subs	r3, #4
 800af1a:	429d      	cmp	r5, r3
 800af1c:	461a      	mov	r2, r3
 800af1e:	d32e      	bcc.n	800af7e <quorem+0xfa>
 800af20:	613c      	str	r4, [r7, #16]
 800af22:	4638      	mov	r0, r7
 800af24:	f001 fd64 	bl	800c9f0 <__mcmp>
 800af28:	2800      	cmp	r0, #0
 800af2a:	db24      	blt.n	800af76 <quorem+0xf2>
 800af2c:	3601      	adds	r6, #1
 800af2e:	4628      	mov	r0, r5
 800af30:	f04f 0c00 	mov.w	ip, #0
 800af34:	f858 2b04 	ldr.w	r2, [r8], #4
 800af38:	f8d0 e000 	ldr.w	lr, [r0]
 800af3c:	b293      	uxth	r3, r2
 800af3e:	ebac 0303 	sub.w	r3, ip, r3
 800af42:	0c12      	lsrs	r2, r2, #16
 800af44:	fa13 f38e 	uxtah	r3, r3, lr
 800af48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af50:	b29b      	uxth	r3, r3
 800af52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af56:	45c1      	cmp	r9, r8
 800af58:	f840 3b04 	str.w	r3, [r0], #4
 800af5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af60:	d2e8      	bcs.n	800af34 <quorem+0xb0>
 800af62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af6a:	b922      	cbnz	r2, 800af76 <quorem+0xf2>
 800af6c:	3b04      	subs	r3, #4
 800af6e:	429d      	cmp	r5, r3
 800af70:	461a      	mov	r2, r3
 800af72:	d30a      	bcc.n	800af8a <quorem+0x106>
 800af74:	613c      	str	r4, [r7, #16]
 800af76:	4630      	mov	r0, r6
 800af78:	b003      	add	sp, #12
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	6812      	ldr	r2, [r2, #0]
 800af80:	3b04      	subs	r3, #4
 800af82:	2a00      	cmp	r2, #0
 800af84:	d1cc      	bne.n	800af20 <quorem+0x9c>
 800af86:	3c01      	subs	r4, #1
 800af88:	e7c7      	b.n	800af1a <quorem+0x96>
 800af8a:	6812      	ldr	r2, [r2, #0]
 800af8c:	3b04      	subs	r3, #4
 800af8e:	2a00      	cmp	r2, #0
 800af90:	d1f0      	bne.n	800af74 <quorem+0xf0>
 800af92:	3c01      	subs	r4, #1
 800af94:	e7eb      	b.n	800af6e <quorem+0xea>
 800af96:	2000      	movs	r0, #0
 800af98:	e7ee      	b.n	800af78 <quorem+0xf4>
 800af9a:	0000      	movs	r0, r0
 800af9c:	0000      	movs	r0, r0
	...

0800afa0 <_dtoa_r>:
 800afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	ed2d 8b04 	vpush	{d8-d9}
 800afa8:	ec57 6b10 	vmov	r6, r7, d0
 800afac:	b093      	sub	sp, #76	; 0x4c
 800afae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afb4:	9106      	str	r1, [sp, #24]
 800afb6:	ee10 aa10 	vmov	sl, s0
 800afba:	4604      	mov	r4, r0
 800afbc:	9209      	str	r2, [sp, #36]	; 0x24
 800afbe:	930c      	str	r3, [sp, #48]	; 0x30
 800afc0:	46bb      	mov	fp, r7
 800afc2:	b975      	cbnz	r5, 800afe2 <_dtoa_r+0x42>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f001 fa21 	bl	800c40c <malloc>
 800afca:	4602      	mov	r2, r0
 800afcc:	6260      	str	r0, [r4, #36]	; 0x24
 800afce:	b920      	cbnz	r0, 800afda <_dtoa_r+0x3a>
 800afd0:	4ba7      	ldr	r3, [pc, #668]	; (800b270 <_dtoa_r+0x2d0>)
 800afd2:	21ea      	movs	r1, #234	; 0xea
 800afd4:	48a7      	ldr	r0, [pc, #668]	; (800b274 <_dtoa_r+0x2d4>)
 800afd6:	f002 f8fd 	bl	800d1d4 <__assert_func>
 800afda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afde:	6005      	str	r5, [r0, #0]
 800afe0:	60c5      	str	r5, [r0, #12]
 800afe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe4:	6819      	ldr	r1, [r3, #0]
 800afe6:	b151      	cbz	r1, 800affe <_dtoa_r+0x5e>
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	604a      	str	r2, [r1, #4]
 800afec:	2301      	movs	r3, #1
 800afee:	4093      	lsls	r3, r2
 800aff0:	608b      	str	r3, [r1, #8]
 800aff2:	4620      	mov	r0, r4
 800aff4:	f001 fa70 	bl	800c4d8 <_Bfree>
 800aff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800affa:	2200      	movs	r2, #0
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	1e3b      	subs	r3, r7, #0
 800b000:	bfaa      	itet	ge
 800b002:	2300      	movge	r3, #0
 800b004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b008:	f8c8 3000 	strge.w	r3, [r8]
 800b00c:	4b9a      	ldr	r3, [pc, #616]	; (800b278 <_dtoa_r+0x2d8>)
 800b00e:	bfbc      	itt	lt
 800b010:	2201      	movlt	r2, #1
 800b012:	f8c8 2000 	strlt.w	r2, [r8]
 800b016:	ea33 030b 	bics.w	r3, r3, fp
 800b01a:	d11b      	bne.n	800b054 <_dtoa_r+0xb4>
 800b01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b01e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b022:	6013      	str	r3, [r2, #0]
 800b024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b028:	4333      	orrs	r3, r6
 800b02a:	f000 8592 	beq.w	800bb52 <_dtoa_r+0xbb2>
 800b02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b030:	b963      	cbnz	r3, 800b04c <_dtoa_r+0xac>
 800b032:	4b92      	ldr	r3, [pc, #584]	; (800b27c <_dtoa_r+0x2dc>)
 800b034:	e022      	b.n	800b07c <_dtoa_r+0xdc>
 800b036:	4b92      	ldr	r3, [pc, #584]	; (800b280 <_dtoa_r+0x2e0>)
 800b038:	9301      	str	r3, [sp, #4]
 800b03a:	3308      	adds	r3, #8
 800b03c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	9801      	ldr	r0, [sp, #4]
 800b042:	b013      	add	sp, #76	; 0x4c
 800b044:	ecbd 8b04 	vpop	{d8-d9}
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	4b8b      	ldr	r3, [pc, #556]	; (800b27c <_dtoa_r+0x2dc>)
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	3303      	adds	r3, #3
 800b052:	e7f3      	b.n	800b03c <_dtoa_r+0x9c>
 800b054:	2200      	movs	r2, #0
 800b056:	2300      	movs	r3, #0
 800b058:	4650      	mov	r0, sl
 800b05a:	4659      	mov	r1, fp
 800b05c:	f7f5 fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 800b060:	ec4b ab19 	vmov	d9, sl, fp
 800b064:	4680      	mov	r8, r0
 800b066:	b158      	cbz	r0, 800b080 <_dtoa_r+0xe0>
 800b068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b06a:	2301      	movs	r3, #1
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 856b 	beq.w	800bb4c <_dtoa_r+0xbac>
 800b076:	4883      	ldr	r0, [pc, #524]	; (800b284 <_dtoa_r+0x2e4>)
 800b078:	6018      	str	r0, [r3, #0]
 800b07a:	1e43      	subs	r3, r0, #1
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	e7df      	b.n	800b040 <_dtoa_r+0xa0>
 800b080:	ec4b ab10 	vmov	d0, sl, fp
 800b084:	aa10      	add	r2, sp, #64	; 0x40
 800b086:	a911      	add	r1, sp, #68	; 0x44
 800b088:	4620      	mov	r0, r4
 800b08a:	f001 fdd3 	bl	800cc34 <__d2b>
 800b08e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b092:	ee08 0a10 	vmov	s16, r0
 800b096:	2d00      	cmp	r5, #0
 800b098:	f000 8084 	beq.w	800b1a4 <_dtoa_r+0x204>
 800b09c:	ee19 3a90 	vmov	r3, s19
 800b0a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0a8:	4656      	mov	r6, sl
 800b0aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b0b6:	4b74      	ldr	r3, [pc, #464]	; (800b288 <_dtoa_r+0x2e8>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f7f5 f90b 	bl	80002d8 <__aeabi_dsub>
 800b0c2:	a365      	add	r3, pc, #404	; (adr r3, 800b258 <_dtoa_r+0x2b8>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f7f5 fabe 	bl	8000648 <__aeabi_dmul>
 800b0cc:	a364      	add	r3, pc, #400	; (adr r3, 800b260 <_dtoa_r+0x2c0>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 f903 	bl	80002dc <__adddf3>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	4628      	mov	r0, r5
 800b0da:	460f      	mov	r7, r1
 800b0dc:	f7f5 fa4a 	bl	8000574 <__aeabi_i2d>
 800b0e0:	a361      	add	r3, pc, #388	; (adr r3, 800b268 <_dtoa_r+0x2c8>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	f7f5 faaf 	bl	8000648 <__aeabi_dmul>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 f8f3 	bl	80002dc <__adddf3>
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460f      	mov	r7, r1
 800b0fa:	f7f5 fd55 	bl	8000ba8 <__aeabi_d2iz>
 800b0fe:	2200      	movs	r2, #0
 800b100:	9000      	str	r0, [sp, #0]
 800b102:	2300      	movs	r3, #0
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800b10c:	b150      	cbz	r0, 800b124 <_dtoa_r+0x184>
 800b10e:	9800      	ldr	r0, [sp, #0]
 800b110:	f7f5 fa30 	bl	8000574 <__aeabi_i2d>
 800b114:	4632      	mov	r2, r6
 800b116:	463b      	mov	r3, r7
 800b118:	f7f5 fcfe 	bl	8000b18 <__aeabi_dcmpeq>
 800b11c:	b910      	cbnz	r0, 800b124 <_dtoa_r+0x184>
 800b11e:	9b00      	ldr	r3, [sp, #0]
 800b120:	3b01      	subs	r3, #1
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	9b00      	ldr	r3, [sp, #0]
 800b126:	2b16      	cmp	r3, #22
 800b128:	d85a      	bhi.n	800b1e0 <_dtoa_r+0x240>
 800b12a:	9a00      	ldr	r2, [sp, #0]
 800b12c:	4b57      	ldr	r3, [pc, #348]	; (800b28c <_dtoa_r+0x2ec>)
 800b12e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	ec51 0b19 	vmov	r0, r1, d9
 800b13a:	f7f5 fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d050      	beq.n	800b1e4 <_dtoa_r+0x244>
 800b142:	9b00      	ldr	r3, [sp, #0]
 800b144:	3b01      	subs	r3, #1
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b14e:	1b5d      	subs	r5, r3, r5
 800b150:	1e6b      	subs	r3, r5, #1
 800b152:	9305      	str	r3, [sp, #20]
 800b154:	bf45      	ittet	mi
 800b156:	f1c5 0301 	rsbmi	r3, r5, #1
 800b15a:	9304      	strmi	r3, [sp, #16]
 800b15c:	2300      	movpl	r3, #0
 800b15e:	2300      	movmi	r3, #0
 800b160:	bf4c      	ite	mi
 800b162:	9305      	strmi	r3, [sp, #20]
 800b164:	9304      	strpl	r3, [sp, #16]
 800b166:	9b00      	ldr	r3, [sp, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	db3d      	blt.n	800b1e8 <_dtoa_r+0x248>
 800b16c:	9b05      	ldr	r3, [sp, #20]
 800b16e:	9a00      	ldr	r2, [sp, #0]
 800b170:	920a      	str	r2, [sp, #40]	; 0x28
 800b172:	4413      	add	r3, r2
 800b174:	9305      	str	r3, [sp, #20]
 800b176:	2300      	movs	r3, #0
 800b178:	9307      	str	r3, [sp, #28]
 800b17a:	9b06      	ldr	r3, [sp, #24]
 800b17c:	2b09      	cmp	r3, #9
 800b17e:	f200 8089 	bhi.w	800b294 <_dtoa_r+0x2f4>
 800b182:	2b05      	cmp	r3, #5
 800b184:	bfc4      	itt	gt
 800b186:	3b04      	subgt	r3, #4
 800b188:	9306      	strgt	r3, [sp, #24]
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	f1a3 0302 	sub.w	r3, r3, #2
 800b190:	bfcc      	ite	gt
 800b192:	2500      	movgt	r5, #0
 800b194:	2501      	movle	r5, #1
 800b196:	2b03      	cmp	r3, #3
 800b198:	f200 8087 	bhi.w	800b2aa <_dtoa_r+0x30a>
 800b19c:	e8df f003 	tbb	[pc, r3]
 800b1a0:	59383a2d 	.word	0x59383a2d
 800b1a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1a8:	441d      	add	r5, r3
 800b1aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	bfc1      	itttt	gt
 800b1b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1c2:	bfda      	itte	le
 800b1c4:	f1c3 0320 	rsble	r3, r3, #32
 800b1c8:	fa06 f003 	lslle.w	r0, r6, r3
 800b1cc:	4318      	orrgt	r0, r3
 800b1ce:	f7f5 f9c1 	bl	8000554 <__aeabi_ui2d>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b1da:	3d01      	subs	r5, #1
 800b1dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b1de:	e76a      	b.n	800b0b6 <_dtoa_r+0x116>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e7b2      	b.n	800b14a <_dtoa_r+0x1aa>
 800b1e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1e6:	e7b1      	b.n	800b14c <_dtoa_r+0x1ac>
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	9a00      	ldr	r2, [sp, #0]
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	9304      	str	r3, [sp, #16]
 800b1f0:	4253      	negs	r3, r2
 800b1f2:	9307      	str	r3, [sp, #28]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1f8:	e7bf      	b.n	800b17a <_dtoa_r+0x1da>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9308      	str	r3, [sp, #32]
 800b1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b200:	2b00      	cmp	r3, #0
 800b202:	dc55      	bgt.n	800b2b0 <_dtoa_r+0x310>
 800b204:	2301      	movs	r3, #1
 800b206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b20a:	461a      	mov	r2, r3
 800b20c:	9209      	str	r2, [sp, #36]	; 0x24
 800b20e:	e00c      	b.n	800b22a <_dtoa_r+0x28a>
 800b210:	2301      	movs	r3, #1
 800b212:	e7f3      	b.n	800b1fc <_dtoa_r+0x25c>
 800b214:	2300      	movs	r3, #0
 800b216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b218:	9308      	str	r3, [sp, #32]
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	4413      	add	r3, r2
 800b21e:	9302      	str	r3, [sp, #8]
 800b220:	3301      	adds	r3, #1
 800b222:	2b01      	cmp	r3, #1
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	bfb8      	it	lt
 800b228:	2301      	movlt	r3, #1
 800b22a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b22c:	2200      	movs	r2, #0
 800b22e:	6042      	str	r2, [r0, #4]
 800b230:	2204      	movs	r2, #4
 800b232:	f102 0614 	add.w	r6, r2, #20
 800b236:	429e      	cmp	r6, r3
 800b238:	6841      	ldr	r1, [r0, #4]
 800b23a:	d93d      	bls.n	800b2b8 <_dtoa_r+0x318>
 800b23c:	4620      	mov	r0, r4
 800b23e:	f001 f90b 	bl	800c458 <_Balloc>
 800b242:	9001      	str	r0, [sp, #4]
 800b244:	2800      	cmp	r0, #0
 800b246:	d13b      	bne.n	800b2c0 <_dtoa_r+0x320>
 800b248:	4b11      	ldr	r3, [pc, #68]	; (800b290 <_dtoa_r+0x2f0>)
 800b24a:	4602      	mov	r2, r0
 800b24c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b250:	e6c0      	b.n	800afd4 <_dtoa_r+0x34>
 800b252:	2301      	movs	r3, #1
 800b254:	e7df      	b.n	800b216 <_dtoa_r+0x276>
 800b256:	bf00      	nop
 800b258:	636f4361 	.word	0x636f4361
 800b25c:	3fd287a7 	.word	0x3fd287a7
 800b260:	8b60c8b3 	.word	0x8b60c8b3
 800b264:	3fc68a28 	.word	0x3fc68a28
 800b268:	509f79fb 	.word	0x509f79fb
 800b26c:	3fd34413 	.word	0x3fd34413
 800b270:	0800dcb6 	.word	0x0800dcb6
 800b274:	0800dccd 	.word	0x0800dccd
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	0800dcb2 	.word	0x0800dcb2
 800b280:	0800dca9 	.word	0x0800dca9
 800b284:	0800db29 	.word	0x0800db29
 800b288:	3ff80000 	.word	0x3ff80000
 800b28c:	0800de38 	.word	0x0800de38
 800b290:	0800dd28 	.word	0x0800dd28
 800b294:	2501      	movs	r5, #1
 800b296:	2300      	movs	r3, #0
 800b298:	9306      	str	r3, [sp, #24]
 800b29a:	9508      	str	r5, [sp, #32]
 800b29c:	f04f 33ff 	mov.w	r3, #4294967295
 800b2a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2312      	movs	r3, #18
 800b2a8:	e7b0      	b.n	800b20c <_dtoa_r+0x26c>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	9308      	str	r3, [sp, #32]
 800b2ae:	e7f5      	b.n	800b29c <_dtoa_r+0x2fc>
 800b2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2b6:	e7b8      	b.n	800b22a <_dtoa_r+0x28a>
 800b2b8:	3101      	adds	r1, #1
 800b2ba:	6041      	str	r1, [r0, #4]
 800b2bc:	0052      	lsls	r2, r2, #1
 800b2be:	e7b8      	b.n	800b232 <_dtoa_r+0x292>
 800b2c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c2:	9a01      	ldr	r2, [sp, #4]
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	2b0e      	cmp	r3, #14
 800b2ca:	f200 809d 	bhi.w	800b408 <_dtoa_r+0x468>
 800b2ce:	2d00      	cmp	r5, #0
 800b2d0:	f000 809a 	beq.w	800b408 <_dtoa_r+0x468>
 800b2d4:	9b00      	ldr	r3, [sp, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dd32      	ble.n	800b340 <_dtoa_r+0x3a0>
 800b2da:	4ab7      	ldr	r2, [pc, #732]	; (800b5b8 <_dtoa_r+0x618>)
 800b2dc:	f003 030f 	and.w	r3, r3, #15
 800b2e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2e8:	9b00      	ldr	r3, [sp, #0]
 800b2ea:	05d8      	lsls	r0, r3, #23
 800b2ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b2f0:	d516      	bpl.n	800b320 <_dtoa_r+0x380>
 800b2f2:	4bb2      	ldr	r3, [pc, #712]	; (800b5bc <_dtoa_r+0x61c>)
 800b2f4:	ec51 0b19 	vmov	r0, r1, d9
 800b2f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2fc:	f7f5 face 	bl	800089c <__aeabi_ddiv>
 800b300:	f007 070f 	and.w	r7, r7, #15
 800b304:	4682      	mov	sl, r0
 800b306:	468b      	mov	fp, r1
 800b308:	2503      	movs	r5, #3
 800b30a:	4eac      	ldr	r6, [pc, #688]	; (800b5bc <_dtoa_r+0x61c>)
 800b30c:	b957      	cbnz	r7, 800b324 <_dtoa_r+0x384>
 800b30e:	4642      	mov	r2, r8
 800b310:	464b      	mov	r3, r9
 800b312:	4650      	mov	r0, sl
 800b314:	4659      	mov	r1, fp
 800b316:	f7f5 fac1 	bl	800089c <__aeabi_ddiv>
 800b31a:	4682      	mov	sl, r0
 800b31c:	468b      	mov	fp, r1
 800b31e:	e028      	b.n	800b372 <_dtoa_r+0x3d2>
 800b320:	2502      	movs	r5, #2
 800b322:	e7f2      	b.n	800b30a <_dtoa_r+0x36a>
 800b324:	07f9      	lsls	r1, r7, #31
 800b326:	d508      	bpl.n	800b33a <_dtoa_r+0x39a>
 800b328:	4640      	mov	r0, r8
 800b32a:	4649      	mov	r1, r9
 800b32c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b330:	f7f5 f98a 	bl	8000648 <__aeabi_dmul>
 800b334:	3501      	adds	r5, #1
 800b336:	4680      	mov	r8, r0
 800b338:	4689      	mov	r9, r1
 800b33a:	107f      	asrs	r7, r7, #1
 800b33c:	3608      	adds	r6, #8
 800b33e:	e7e5      	b.n	800b30c <_dtoa_r+0x36c>
 800b340:	f000 809b 	beq.w	800b47a <_dtoa_r+0x4da>
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	4f9d      	ldr	r7, [pc, #628]	; (800b5bc <_dtoa_r+0x61c>)
 800b348:	425e      	negs	r6, r3
 800b34a:	4b9b      	ldr	r3, [pc, #620]	; (800b5b8 <_dtoa_r+0x618>)
 800b34c:	f006 020f 	and.w	r2, r6, #15
 800b350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	ec51 0b19 	vmov	r0, r1, d9
 800b35c:	f7f5 f974 	bl	8000648 <__aeabi_dmul>
 800b360:	1136      	asrs	r6, r6, #4
 800b362:	4682      	mov	sl, r0
 800b364:	468b      	mov	fp, r1
 800b366:	2300      	movs	r3, #0
 800b368:	2502      	movs	r5, #2
 800b36a:	2e00      	cmp	r6, #0
 800b36c:	d17a      	bne.n	800b464 <_dtoa_r+0x4c4>
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1d3      	bne.n	800b31a <_dtoa_r+0x37a>
 800b372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 8082 	beq.w	800b47e <_dtoa_r+0x4de>
 800b37a:	4b91      	ldr	r3, [pc, #580]	; (800b5c0 <_dtoa_r+0x620>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	4650      	mov	r0, sl
 800b380:	4659      	mov	r1, fp
 800b382:	f7f5 fbd3 	bl	8000b2c <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	d079      	beq.n	800b47e <_dtoa_r+0x4de>
 800b38a:	9b03      	ldr	r3, [sp, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d076      	beq.n	800b47e <_dtoa_r+0x4de>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	dd36      	ble.n	800b404 <_dtoa_r+0x464>
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	4650      	mov	r0, sl
 800b39a:	4659      	mov	r1, fp
 800b39c:	1e5f      	subs	r7, r3, #1
 800b39e:	2200      	movs	r2, #0
 800b3a0:	4b88      	ldr	r3, [pc, #544]	; (800b5c4 <_dtoa_r+0x624>)
 800b3a2:	f7f5 f951 	bl	8000648 <__aeabi_dmul>
 800b3a6:	9e02      	ldr	r6, [sp, #8]
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	468b      	mov	fp, r1
 800b3ac:	3501      	adds	r5, #1
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f7f5 f8e0 	bl	8000574 <__aeabi_i2d>
 800b3b4:	4652      	mov	r2, sl
 800b3b6:	465b      	mov	r3, fp
 800b3b8:	f7f5 f946 	bl	8000648 <__aeabi_dmul>
 800b3bc:	4b82      	ldr	r3, [pc, #520]	; (800b5c8 <_dtoa_r+0x628>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f7f4 ff8c 	bl	80002dc <__adddf3>
 800b3c4:	46d0      	mov	r8, sl
 800b3c6:	46d9      	mov	r9, fp
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	d158      	bne.n	800b484 <_dtoa_r+0x4e4>
 800b3d2:	4b7e      	ldr	r3, [pc, #504]	; (800b5cc <_dtoa_r+0x62c>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	4649      	mov	r1, r9
 800b3da:	f7f4 ff7d 	bl	80002d8 <__aeabi_dsub>
 800b3de:	4652      	mov	r2, sl
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	4689      	mov	r9, r1
 800b3e6:	f7f5 fbbf 	bl	8000b68 <__aeabi_dcmpgt>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f040 8295 	bne.w	800b91a <_dtoa_r+0x97a>
 800b3f0:	4652      	mov	r2, sl
 800b3f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	f7f5 fb97 	bl	8000b2c <__aeabi_dcmplt>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f040 8289 	bne.w	800b916 <_dtoa_r+0x976>
 800b404:	ec5b ab19 	vmov	sl, fp, d9
 800b408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f2c0 8148 	blt.w	800b6a0 <_dtoa_r+0x700>
 800b410:	9a00      	ldr	r2, [sp, #0]
 800b412:	2a0e      	cmp	r2, #14
 800b414:	f300 8144 	bgt.w	800b6a0 <_dtoa_r+0x700>
 800b418:	4b67      	ldr	r3, [pc, #412]	; (800b5b8 <_dtoa_r+0x618>)
 800b41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b41e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b424:	2b00      	cmp	r3, #0
 800b426:	f280 80d5 	bge.w	800b5d4 <_dtoa_r+0x634>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f300 80d1 	bgt.w	800b5d4 <_dtoa_r+0x634>
 800b432:	f040 826f 	bne.w	800b914 <_dtoa_r+0x974>
 800b436:	4b65      	ldr	r3, [pc, #404]	; (800b5cc <_dtoa_r+0x62c>)
 800b438:	2200      	movs	r2, #0
 800b43a:	4640      	mov	r0, r8
 800b43c:	4649      	mov	r1, r9
 800b43e:	f7f5 f903 	bl	8000648 <__aeabi_dmul>
 800b442:	4652      	mov	r2, sl
 800b444:	465b      	mov	r3, fp
 800b446:	f7f5 fb85 	bl	8000b54 <__aeabi_dcmpge>
 800b44a:	9e03      	ldr	r6, [sp, #12]
 800b44c:	4637      	mov	r7, r6
 800b44e:	2800      	cmp	r0, #0
 800b450:	f040 8245 	bne.w	800b8de <_dtoa_r+0x93e>
 800b454:	9d01      	ldr	r5, [sp, #4]
 800b456:	2331      	movs	r3, #49	; 0x31
 800b458:	f805 3b01 	strb.w	r3, [r5], #1
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	e240      	b.n	800b8e6 <_dtoa_r+0x946>
 800b464:	07f2      	lsls	r2, r6, #31
 800b466:	d505      	bpl.n	800b474 <_dtoa_r+0x4d4>
 800b468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b46c:	f7f5 f8ec 	bl	8000648 <__aeabi_dmul>
 800b470:	3501      	adds	r5, #1
 800b472:	2301      	movs	r3, #1
 800b474:	1076      	asrs	r6, r6, #1
 800b476:	3708      	adds	r7, #8
 800b478:	e777      	b.n	800b36a <_dtoa_r+0x3ca>
 800b47a:	2502      	movs	r5, #2
 800b47c:	e779      	b.n	800b372 <_dtoa_r+0x3d2>
 800b47e:	9f00      	ldr	r7, [sp, #0]
 800b480:	9e03      	ldr	r6, [sp, #12]
 800b482:	e794      	b.n	800b3ae <_dtoa_r+0x40e>
 800b484:	9901      	ldr	r1, [sp, #4]
 800b486:	4b4c      	ldr	r3, [pc, #304]	; (800b5b8 <_dtoa_r+0x618>)
 800b488:	4431      	add	r1, r6
 800b48a:	910d      	str	r1, [sp, #52]	; 0x34
 800b48c:	9908      	ldr	r1, [sp, #32]
 800b48e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b496:	2900      	cmp	r1, #0
 800b498:	d043      	beq.n	800b522 <_dtoa_r+0x582>
 800b49a:	494d      	ldr	r1, [pc, #308]	; (800b5d0 <_dtoa_r+0x630>)
 800b49c:	2000      	movs	r0, #0
 800b49e:	f7f5 f9fd 	bl	800089c <__aeabi_ddiv>
 800b4a2:	4652      	mov	r2, sl
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	f7f4 ff17 	bl	80002d8 <__aeabi_dsub>
 800b4aa:	9d01      	ldr	r5, [sp, #4]
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	468b      	mov	fp, r1
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	f7f5 fb78 	bl	8000ba8 <__aeabi_d2iz>
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	f7f5 f85b 	bl	8000574 <__aeabi_i2d>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f4 ff07 	bl	80002d8 <__aeabi_dsub>
 800b4ca:	3630      	adds	r6, #48	; 0x30
 800b4cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b4d0:	4652      	mov	r2, sl
 800b4d2:	465b      	mov	r3, fp
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	4689      	mov	r9, r1
 800b4d8:	f7f5 fb28 	bl	8000b2c <__aeabi_dcmplt>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d163      	bne.n	800b5a8 <_dtoa_r+0x608>
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	464b      	mov	r3, r9
 800b4e4:	4936      	ldr	r1, [pc, #216]	; (800b5c0 <_dtoa_r+0x620>)
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f7f4 fef6 	bl	80002d8 <__aeabi_dsub>
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	465b      	mov	r3, fp
 800b4f0:	f7f5 fb1c 	bl	8000b2c <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f040 80b5 	bne.w	800b664 <_dtoa_r+0x6c4>
 800b4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4fc:	429d      	cmp	r5, r3
 800b4fe:	d081      	beq.n	800b404 <_dtoa_r+0x464>
 800b500:	4b30      	ldr	r3, [pc, #192]	; (800b5c4 <_dtoa_r+0x624>)
 800b502:	2200      	movs	r2, #0
 800b504:	4650      	mov	r0, sl
 800b506:	4659      	mov	r1, fp
 800b508:	f7f5 f89e 	bl	8000648 <__aeabi_dmul>
 800b50c:	4b2d      	ldr	r3, [pc, #180]	; (800b5c4 <_dtoa_r+0x624>)
 800b50e:	4682      	mov	sl, r0
 800b510:	468b      	mov	fp, r1
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	2200      	movs	r2, #0
 800b518:	f7f5 f896 	bl	8000648 <__aeabi_dmul>
 800b51c:	4680      	mov	r8, r0
 800b51e:	4689      	mov	r9, r1
 800b520:	e7c6      	b.n	800b4b0 <_dtoa_r+0x510>
 800b522:	4650      	mov	r0, sl
 800b524:	4659      	mov	r1, fp
 800b526:	f7f5 f88f 	bl	8000648 <__aeabi_dmul>
 800b52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b52c:	9d01      	ldr	r5, [sp, #4]
 800b52e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b530:	4682      	mov	sl, r0
 800b532:	468b      	mov	fp, r1
 800b534:	4649      	mov	r1, r9
 800b536:	4640      	mov	r0, r8
 800b538:	f7f5 fb36 	bl	8000ba8 <__aeabi_d2iz>
 800b53c:	4606      	mov	r6, r0
 800b53e:	f7f5 f819 	bl	8000574 <__aeabi_i2d>
 800b542:	3630      	adds	r6, #48	; 0x30
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	4640      	mov	r0, r8
 800b54a:	4649      	mov	r1, r9
 800b54c:	f7f4 fec4 	bl	80002d8 <__aeabi_dsub>
 800b550:	f805 6b01 	strb.w	r6, [r5], #1
 800b554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b556:	429d      	cmp	r5, r3
 800b558:	4680      	mov	r8, r0
 800b55a:	4689      	mov	r9, r1
 800b55c:	f04f 0200 	mov.w	r2, #0
 800b560:	d124      	bne.n	800b5ac <_dtoa_r+0x60c>
 800b562:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <_dtoa_r+0x630>)
 800b564:	4650      	mov	r0, sl
 800b566:	4659      	mov	r1, fp
 800b568:	f7f4 feb8 	bl	80002dc <__adddf3>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4640      	mov	r0, r8
 800b572:	4649      	mov	r1, r9
 800b574:	f7f5 faf8 	bl	8000b68 <__aeabi_dcmpgt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d173      	bne.n	800b664 <_dtoa_r+0x6c4>
 800b57c:	4652      	mov	r2, sl
 800b57e:	465b      	mov	r3, fp
 800b580:	4913      	ldr	r1, [pc, #76]	; (800b5d0 <_dtoa_r+0x630>)
 800b582:	2000      	movs	r0, #0
 800b584:	f7f4 fea8 	bl	80002d8 <__aeabi_dsub>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4640      	mov	r0, r8
 800b58e:	4649      	mov	r1, r9
 800b590:	f7f5 facc 	bl	8000b2c <__aeabi_dcmplt>
 800b594:	2800      	cmp	r0, #0
 800b596:	f43f af35 	beq.w	800b404 <_dtoa_r+0x464>
 800b59a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b59c:	1e6b      	subs	r3, r5, #1
 800b59e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5a4:	2b30      	cmp	r3, #48	; 0x30
 800b5a6:	d0f8      	beq.n	800b59a <_dtoa_r+0x5fa>
 800b5a8:	9700      	str	r7, [sp, #0]
 800b5aa:	e049      	b.n	800b640 <_dtoa_r+0x6a0>
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <_dtoa_r+0x624>)
 800b5ae:	f7f5 f84b 	bl	8000648 <__aeabi_dmul>
 800b5b2:	4680      	mov	r8, r0
 800b5b4:	4689      	mov	r9, r1
 800b5b6:	e7bd      	b.n	800b534 <_dtoa_r+0x594>
 800b5b8:	0800de38 	.word	0x0800de38
 800b5bc:	0800de10 	.word	0x0800de10
 800b5c0:	3ff00000 	.word	0x3ff00000
 800b5c4:	40240000 	.word	0x40240000
 800b5c8:	401c0000 	.word	0x401c0000
 800b5cc:	40140000 	.word	0x40140000
 800b5d0:	3fe00000 	.word	0x3fe00000
 800b5d4:	9d01      	ldr	r5, [sp, #4]
 800b5d6:	4656      	mov	r6, sl
 800b5d8:	465f      	mov	r7, fp
 800b5da:	4642      	mov	r2, r8
 800b5dc:	464b      	mov	r3, r9
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f5 f95b 	bl	800089c <__aeabi_ddiv>
 800b5e6:	f7f5 fadf 	bl	8000ba8 <__aeabi_d2iz>
 800b5ea:	4682      	mov	sl, r0
 800b5ec:	f7f4 ffc2 	bl	8000574 <__aeabi_i2d>
 800b5f0:	4642      	mov	r2, r8
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	f7f5 f828 	bl	8000648 <__aeabi_dmul>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	4639      	mov	r1, r7
 800b600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b604:	f7f4 fe68 	bl	80002d8 <__aeabi_dsub>
 800b608:	f805 6b01 	strb.w	r6, [r5], #1
 800b60c:	9e01      	ldr	r6, [sp, #4]
 800b60e:	9f03      	ldr	r7, [sp, #12]
 800b610:	1bae      	subs	r6, r5, r6
 800b612:	42b7      	cmp	r7, r6
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	d135      	bne.n	800b686 <_dtoa_r+0x6e6>
 800b61a:	f7f4 fe5f 	bl	80002dc <__adddf3>
 800b61e:	4642      	mov	r2, r8
 800b620:	464b      	mov	r3, r9
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	f7f5 fa9f 	bl	8000b68 <__aeabi_dcmpgt>
 800b62a:	b9d0      	cbnz	r0, 800b662 <_dtoa_r+0x6c2>
 800b62c:	4642      	mov	r2, r8
 800b62e:	464b      	mov	r3, r9
 800b630:	4630      	mov	r0, r6
 800b632:	4639      	mov	r1, r7
 800b634:	f7f5 fa70 	bl	8000b18 <__aeabi_dcmpeq>
 800b638:	b110      	cbz	r0, 800b640 <_dtoa_r+0x6a0>
 800b63a:	f01a 0f01 	tst.w	sl, #1
 800b63e:	d110      	bne.n	800b662 <_dtoa_r+0x6c2>
 800b640:	4620      	mov	r0, r4
 800b642:	ee18 1a10 	vmov	r1, s16
 800b646:	f000 ff47 	bl	800c4d8 <_Bfree>
 800b64a:	2300      	movs	r3, #0
 800b64c:	9800      	ldr	r0, [sp, #0]
 800b64e:	702b      	strb	r3, [r5, #0]
 800b650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b652:	3001      	adds	r0, #1
 800b654:	6018      	str	r0, [r3, #0]
 800b656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f43f acf1 	beq.w	800b040 <_dtoa_r+0xa0>
 800b65e:	601d      	str	r5, [r3, #0]
 800b660:	e4ee      	b.n	800b040 <_dtoa_r+0xa0>
 800b662:	9f00      	ldr	r7, [sp, #0]
 800b664:	462b      	mov	r3, r5
 800b666:	461d      	mov	r5, r3
 800b668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b66c:	2a39      	cmp	r2, #57	; 0x39
 800b66e:	d106      	bne.n	800b67e <_dtoa_r+0x6de>
 800b670:	9a01      	ldr	r2, [sp, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d1f7      	bne.n	800b666 <_dtoa_r+0x6c6>
 800b676:	9901      	ldr	r1, [sp, #4]
 800b678:	2230      	movs	r2, #48	; 0x30
 800b67a:	3701      	adds	r7, #1
 800b67c:	700a      	strb	r2, [r1, #0]
 800b67e:	781a      	ldrb	r2, [r3, #0]
 800b680:	3201      	adds	r2, #1
 800b682:	701a      	strb	r2, [r3, #0]
 800b684:	e790      	b.n	800b5a8 <_dtoa_r+0x608>
 800b686:	4ba6      	ldr	r3, [pc, #664]	; (800b920 <_dtoa_r+0x980>)
 800b688:	2200      	movs	r2, #0
 800b68a:	f7f4 ffdd 	bl	8000648 <__aeabi_dmul>
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	4606      	mov	r6, r0
 800b694:	460f      	mov	r7, r1
 800b696:	f7f5 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d09d      	beq.n	800b5da <_dtoa_r+0x63a>
 800b69e:	e7cf      	b.n	800b640 <_dtoa_r+0x6a0>
 800b6a0:	9a08      	ldr	r2, [sp, #32]
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	f000 80d7 	beq.w	800b856 <_dtoa_r+0x8b6>
 800b6a8:	9a06      	ldr	r2, [sp, #24]
 800b6aa:	2a01      	cmp	r2, #1
 800b6ac:	f300 80ba 	bgt.w	800b824 <_dtoa_r+0x884>
 800b6b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6b2:	2a00      	cmp	r2, #0
 800b6b4:	f000 80b2 	beq.w	800b81c <_dtoa_r+0x87c>
 800b6b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6bc:	9e07      	ldr	r6, [sp, #28]
 800b6be:	9d04      	ldr	r5, [sp, #16]
 800b6c0:	9a04      	ldr	r2, [sp, #16]
 800b6c2:	441a      	add	r2, r3
 800b6c4:	9204      	str	r2, [sp, #16]
 800b6c6:	9a05      	ldr	r2, [sp, #20]
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	441a      	add	r2, r3
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	9205      	str	r2, [sp, #20]
 800b6d0:	f001 f804 	bl	800c6dc <__i2b>
 800b6d4:	4607      	mov	r7, r0
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	dd0c      	ble.n	800b6f4 <_dtoa_r+0x754>
 800b6da:	9b05      	ldr	r3, [sp, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dd09      	ble.n	800b6f4 <_dtoa_r+0x754>
 800b6e0:	42ab      	cmp	r3, r5
 800b6e2:	9a04      	ldr	r2, [sp, #16]
 800b6e4:	bfa8      	it	ge
 800b6e6:	462b      	movge	r3, r5
 800b6e8:	1ad2      	subs	r2, r2, r3
 800b6ea:	9204      	str	r2, [sp, #16]
 800b6ec:	9a05      	ldr	r2, [sp, #20]
 800b6ee:	1aed      	subs	r5, r5, r3
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	9305      	str	r3, [sp, #20]
 800b6f4:	9b07      	ldr	r3, [sp, #28]
 800b6f6:	b31b      	cbz	r3, 800b740 <_dtoa_r+0x7a0>
 800b6f8:	9b08      	ldr	r3, [sp, #32]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 80af 	beq.w	800b85e <_dtoa_r+0x8be>
 800b700:	2e00      	cmp	r6, #0
 800b702:	dd13      	ble.n	800b72c <_dtoa_r+0x78c>
 800b704:	4639      	mov	r1, r7
 800b706:	4632      	mov	r2, r6
 800b708:	4620      	mov	r0, r4
 800b70a:	f001 f8a7 	bl	800c85c <__pow5mult>
 800b70e:	ee18 2a10 	vmov	r2, s16
 800b712:	4601      	mov	r1, r0
 800b714:	4607      	mov	r7, r0
 800b716:	4620      	mov	r0, r4
 800b718:	f000 fff6 	bl	800c708 <__multiply>
 800b71c:	ee18 1a10 	vmov	r1, s16
 800b720:	4680      	mov	r8, r0
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fed8 	bl	800c4d8 <_Bfree>
 800b728:	ee08 8a10 	vmov	s16, r8
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	1b9a      	subs	r2, r3, r6
 800b730:	d006      	beq.n	800b740 <_dtoa_r+0x7a0>
 800b732:	ee18 1a10 	vmov	r1, s16
 800b736:	4620      	mov	r0, r4
 800b738:	f001 f890 	bl	800c85c <__pow5mult>
 800b73c:	ee08 0a10 	vmov	s16, r0
 800b740:	2101      	movs	r1, #1
 800b742:	4620      	mov	r0, r4
 800b744:	f000 ffca 	bl	800c6dc <__i2b>
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	4606      	mov	r6, r0
 800b74e:	f340 8088 	ble.w	800b862 <_dtoa_r+0x8c2>
 800b752:	461a      	mov	r2, r3
 800b754:	4601      	mov	r1, r0
 800b756:	4620      	mov	r0, r4
 800b758:	f001 f880 	bl	800c85c <__pow5mult>
 800b75c:	9b06      	ldr	r3, [sp, #24]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	4606      	mov	r6, r0
 800b762:	f340 8081 	ble.w	800b868 <_dtoa_r+0x8c8>
 800b766:	f04f 0800 	mov.w	r8, #0
 800b76a:	6933      	ldr	r3, [r6, #16]
 800b76c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b770:	6918      	ldr	r0, [r3, #16]
 800b772:	f000 ff63 	bl	800c63c <__hi0bits>
 800b776:	f1c0 0020 	rsb	r0, r0, #32
 800b77a:	9b05      	ldr	r3, [sp, #20]
 800b77c:	4418      	add	r0, r3
 800b77e:	f010 001f 	ands.w	r0, r0, #31
 800b782:	f000 8092 	beq.w	800b8aa <_dtoa_r+0x90a>
 800b786:	f1c0 0320 	rsb	r3, r0, #32
 800b78a:	2b04      	cmp	r3, #4
 800b78c:	f340 808a 	ble.w	800b8a4 <_dtoa_r+0x904>
 800b790:	f1c0 001c 	rsb	r0, r0, #28
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	4403      	add	r3, r0
 800b798:	9304      	str	r3, [sp, #16]
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	4403      	add	r3, r0
 800b79e:	4405      	add	r5, r0
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	9b04      	ldr	r3, [sp, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dd07      	ble.n	800b7b8 <_dtoa_r+0x818>
 800b7a8:	ee18 1a10 	vmov	r1, s16
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f001 f8ae 	bl	800c910 <__lshift>
 800b7b4:	ee08 0a10 	vmov	s16, r0
 800b7b8:	9b05      	ldr	r3, [sp, #20]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dd05      	ble.n	800b7ca <_dtoa_r+0x82a>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f001 f8a4 	bl	800c910 <__lshift>
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d06e      	beq.n	800b8ae <_dtoa_r+0x90e>
 800b7d0:	ee18 0a10 	vmov	r0, s16
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	f001 f90b 	bl	800c9f0 <__mcmp>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	da67      	bge.n	800b8ae <_dtoa_r+0x90e>
 800b7de:	9b00      	ldr	r3, [sp, #0]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	ee18 1a10 	vmov	r1, s16
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fe95 	bl	800c51c <__multadd>
 800b7f2:	9b08      	ldr	r3, [sp, #32]
 800b7f4:	ee08 0a10 	vmov	s16, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 81b1 	beq.w	800bb60 <_dtoa_r+0xbc0>
 800b7fe:	2300      	movs	r3, #0
 800b800:	4639      	mov	r1, r7
 800b802:	220a      	movs	r2, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fe89 	bl	800c51c <__multadd>
 800b80a:	9b02      	ldr	r3, [sp, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	4607      	mov	r7, r0
 800b810:	f300 808e 	bgt.w	800b930 <_dtoa_r+0x990>
 800b814:	9b06      	ldr	r3, [sp, #24]
 800b816:	2b02      	cmp	r3, #2
 800b818:	dc51      	bgt.n	800b8be <_dtoa_r+0x91e>
 800b81a:	e089      	b.n	800b930 <_dtoa_r+0x990>
 800b81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b81e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b822:	e74b      	b.n	800b6bc <_dtoa_r+0x71c>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	1e5e      	subs	r6, r3, #1
 800b828:	9b07      	ldr	r3, [sp, #28]
 800b82a:	42b3      	cmp	r3, r6
 800b82c:	bfbf      	itttt	lt
 800b82e:	9b07      	ldrlt	r3, [sp, #28]
 800b830:	9607      	strlt	r6, [sp, #28]
 800b832:	1af2      	sublt	r2, r6, r3
 800b834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b836:	bfb6      	itet	lt
 800b838:	189b      	addlt	r3, r3, r2
 800b83a:	1b9e      	subge	r6, r3, r6
 800b83c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	bfb8      	it	lt
 800b842:	2600      	movlt	r6, #0
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfb7      	itett	lt
 800b848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b84c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b850:	1a9d      	sublt	r5, r3, r2
 800b852:	2300      	movlt	r3, #0
 800b854:	e734      	b.n	800b6c0 <_dtoa_r+0x720>
 800b856:	9e07      	ldr	r6, [sp, #28]
 800b858:	9d04      	ldr	r5, [sp, #16]
 800b85a:	9f08      	ldr	r7, [sp, #32]
 800b85c:	e73b      	b.n	800b6d6 <_dtoa_r+0x736>
 800b85e:	9a07      	ldr	r2, [sp, #28]
 800b860:	e767      	b.n	800b732 <_dtoa_r+0x792>
 800b862:	9b06      	ldr	r3, [sp, #24]
 800b864:	2b01      	cmp	r3, #1
 800b866:	dc18      	bgt.n	800b89a <_dtoa_r+0x8fa>
 800b868:	f1ba 0f00 	cmp.w	sl, #0
 800b86c:	d115      	bne.n	800b89a <_dtoa_r+0x8fa>
 800b86e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b872:	b993      	cbnz	r3, 800b89a <_dtoa_r+0x8fa>
 800b874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b878:	0d1b      	lsrs	r3, r3, #20
 800b87a:	051b      	lsls	r3, r3, #20
 800b87c:	b183      	cbz	r3, 800b8a0 <_dtoa_r+0x900>
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	3301      	adds	r3, #1
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	9b05      	ldr	r3, [sp, #20]
 800b886:	3301      	adds	r3, #1
 800b888:	9305      	str	r3, [sp, #20]
 800b88a:	f04f 0801 	mov.w	r8, #1
 800b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b890:	2b00      	cmp	r3, #0
 800b892:	f47f af6a 	bne.w	800b76a <_dtoa_r+0x7ca>
 800b896:	2001      	movs	r0, #1
 800b898:	e76f      	b.n	800b77a <_dtoa_r+0x7da>
 800b89a:	f04f 0800 	mov.w	r8, #0
 800b89e:	e7f6      	b.n	800b88e <_dtoa_r+0x8ee>
 800b8a0:	4698      	mov	r8, r3
 800b8a2:	e7f4      	b.n	800b88e <_dtoa_r+0x8ee>
 800b8a4:	f43f af7d 	beq.w	800b7a2 <_dtoa_r+0x802>
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	301c      	adds	r0, #28
 800b8ac:	e772      	b.n	800b794 <_dtoa_r+0x7f4>
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc37      	bgt.n	800b924 <_dtoa_r+0x984>
 800b8b4:	9b06      	ldr	r3, [sp, #24]
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	dd34      	ble.n	800b924 <_dtoa_r+0x984>
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	9302      	str	r3, [sp, #8]
 800b8be:	9b02      	ldr	r3, [sp, #8]
 800b8c0:	b96b      	cbnz	r3, 800b8de <_dtoa_r+0x93e>
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	2205      	movs	r2, #5
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 fe28 	bl	800c51c <__multadd>
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	ee18 0a10 	vmov	r0, s16
 800b8d4:	f001 f88c 	bl	800c9f0 <__mcmp>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	f73f adbb 	bgt.w	800b454 <_dtoa_r+0x4b4>
 800b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e0:	9d01      	ldr	r5, [sp, #4]
 800b8e2:	43db      	mvns	r3, r3
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fdf3 	bl	800c4d8 <_Bfree>
 800b8f2:	2f00      	cmp	r7, #0
 800b8f4:	f43f aea4 	beq.w	800b640 <_dtoa_r+0x6a0>
 800b8f8:	f1b8 0f00 	cmp.w	r8, #0
 800b8fc:	d005      	beq.n	800b90a <_dtoa_r+0x96a>
 800b8fe:	45b8      	cmp	r8, r7
 800b900:	d003      	beq.n	800b90a <_dtoa_r+0x96a>
 800b902:	4641      	mov	r1, r8
 800b904:	4620      	mov	r0, r4
 800b906:	f000 fde7 	bl	800c4d8 <_Bfree>
 800b90a:	4639      	mov	r1, r7
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 fde3 	bl	800c4d8 <_Bfree>
 800b912:	e695      	b.n	800b640 <_dtoa_r+0x6a0>
 800b914:	2600      	movs	r6, #0
 800b916:	4637      	mov	r7, r6
 800b918:	e7e1      	b.n	800b8de <_dtoa_r+0x93e>
 800b91a:	9700      	str	r7, [sp, #0]
 800b91c:	4637      	mov	r7, r6
 800b91e:	e599      	b.n	800b454 <_dtoa_r+0x4b4>
 800b920:	40240000 	.word	0x40240000
 800b924:	9b08      	ldr	r3, [sp, #32]
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 80ca 	beq.w	800bac0 <_dtoa_r+0xb20>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	9302      	str	r3, [sp, #8]
 800b930:	2d00      	cmp	r5, #0
 800b932:	dd05      	ble.n	800b940 <_dtoa_r+0x9a0>
 800b934:	4639      	mov	r1, r7
 800b936:	462a      	mov	r2, r5
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 ffe9 	bl	800c910 <__lshift>
 800b93e:	4607      	mov	r7, r0
 800b940:	f1b8 0f00 	cmp.w	r8, #0
 800b944:	d05b      	beq.n	800b9fe <_dtoa_r+0xa5e>
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fd85 	bl	800c458 <_Balloc>
 800b94e:	4605      	mov	r5, r0
 800b950:	b928      	cbnz	r0, 800b95e <_dtoa_r+0x9be>
 800b952:	4b87      	ldr	r3, [pc, #540]	; (800bb70 <_dtoa_r+0xbd0>)
 800b954:	4602      	mov	r2, r0
 800b956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b95a:	f7ff bb3b 	b.w	800afd4 <_dtoa_r+0x34>
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	3202      	adds	r2, #2
 800b962:	0092      	lsls	r2, r2, #2
 800b964:	f107 010c 	add.w	r1, r7, #12
 800b968:	300c      	adds	r0, #12
 800b96a:	f7fd fbb2 	bl	80090d2 <memcpy>
 800b96e:	2201      	movs	r2, #1
 800b970:	4629      	mov	r1, r5
 800b972:	4620      	mov	r0, r4
 800b974:	f000 ffcc 	bl	800c910 <__lshift>
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	f103 0901 	add.w	r9, r3, #1
 800b97e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b982:	4413      	add	r3, r2
 800b984:	9305      	str	r3, [sp, #20]
 800b986:	f00a 0301 	and.w	r3, sl, #1
 800b98a:	46b8      	mov	r8, r7
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	4607      	mov	r7, r0
 800b990:	4631      	mov	r1, r6
 800b992:	ee18 0a10 	vmov	r0, s16
 800b996:	f7ff fa75 	bl	800ae84 <quorem>
 800b99a:	4641      	mov	r1, r8
 800b99c:	9002      	str	r0, [sp, #8]
 800b99e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9a2:	ee18 0a10 	vmov	r0, s16
 800b9a6:	f001 f823 	bl	800c9f0 <__mcmp>
 800b9aa:	463a      	mov	r2, r7
 800b9ac:	9003      	str	r0, [sp, #12]
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f001 f839 	bl	800ca28 <__mdiff>
 800b9b6:	68c2      	ldr	r2, [r0, #12]
 800b9b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9bc:	4605      	mov	r5, r0
 800b9be:	bb02      	cbnz	r2, 800ba02 <_dtoa_r+0xa62>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	ee18 0a10 	vmov	r0, s16
 800b9c6:	f001 f813 	bl	800c9f0 <__mcmp>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	9207      	str	r2, [sp, #28]
 800b9d2:	f000 fd81 	bl	800c4d8 <_Bfree>
 800b9d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b9da:	ea43 0102 	orr.w	r1, r3, r2
 800b9de:	9b04      	ldr	r3, [sp, #16]
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	464d      	mov	r5, r9
 800b9e4:	d10f      	bne.n	800ba06 <_dtoa_r+0xa66>
 800b9e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9ea:	d02a      	beq.n	800ba42 <_dtoa_r+0xaa2>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	dd02      	ble.n	800b9f8 <_dtoa_r+0xa58>
 800b9f2:	9b02      	ldr	r3, [sp, #8]
 800b9f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b9f8:	f88b a000 	strb.w	sl, [fp]
 800b9fc:	e775      	b.n	800b8ea <_dtoa_r+0x94a>
 800b9fe:	4638      	mov	r0, r7
 800ba00:	e7ba      	b.n	800b978 <_dtoa_r+0x9d8>
 800ba02:	2201      	movs	r2, #1
 800ba04:	e7e2      	b.n	800b9cc <_dtoa_r+0xa2c>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	db04      	blt.n	800ba16 <_dtoa_r+0xa76>
 800ba0c:	9906      	ldr	r1, [sp, #24]
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	9904      	ldr	r1, [sp, #16]
 800ba12:	430b      	orrs	r3, r1
 800ba14:	d122      	bne.n	800ba5c <_dtoa_r+0xabc>
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	ddee      	ble.n	800b9f8 <_dtoa_r+0xa58>
 800ba1a:	ee18 1a10 	vmov	r1, s16
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4620      	mov	r0, r4
 800ba22:	f000 ff75 	bl	800c910 <__lshift>
 800ba26:	4631      	mov	r1, r6
 800ba28:	ee08 0a10 	vmov	s16, r0
 800ba2c:	f000 ffe0 	bl	800c9f0 <__mcmp>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	dc03      	bgt.n	800ba3c <_dtoa_r+0xa9c>
 800ba34:	d1e0      	bne.n	800b9f8 <_dtoa_r+0xa58>
 800ba36:	f01a 0f01 	tst.w	sl, #1
 800ba3a:	d0dd      	beq.n	800b9f8 <_dtoa_r+0xa58>
 800ba3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba40:	d1d7      	bne.n	800b9f2 <_dtoa_r+0xa52>
 800ba42:	2339      	movs	r3, #57	; 0x39
 800ba44:	f88b 3000 	strb.w	r3, [fp]
 800ba48:	462b      	mov	r3, r5
 800ba4a:	461d      	mov	r5, r3
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba52:	2a39      	cmp	r2, #57	; 0x39
 800ba54:	d071      	beq.n	800bb3a <_dtoa_r+0xb9a>
 800ba56:	3201      	adds	r2, #1
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e746      	b.n	800b8ea <_dtoa_r+0x94a>
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	dd07      	ble.n	800ba70 <_dtoa_r+0xad0>
 800ba60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba64:	d0ed      	beq.n	800ba42 <_dtoa_r+0xaa2>
 800ba66:	f10a 0301 	add.w	r3, sl, #1
 800ba6a:	f88b 3000 	strb.w	r3, [fp]
 800ba6e:	e73c      	b.n	800b8ea <_dtoa_r+0x94a>
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ba76:	4599      	cmp	r9, r3
 800ba78:	d047      	beq.n	800bb0a <_dtoa_r+0xb6a>
 800ba7a:	ee18 1a10 	vmov	r1, s16
 800ba7e:	2300      	movs	r3, #0
 800ba80:	220a      	movs	r2, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fd4a 	bl	800c51c <__multadd>
 800ba88:	45b8      	cmp	r8, r7
 800ba8a:	ee08 0a10 	vmov	s16, r0
 800ba8e:	f04f 0300 	mov.w	r3, #0
 800ba92:	f04f 020a 	mov.w	r2, #10
 800ba96:	4641      	mov	r1, r8
 800ba98:	4620      	mov	r0, r4
 800ba9a:	d106      	bne.n	800baaa <_dtoa_r+0xb0a>
 800ba9c:	f000 fd3e 	bl	800c51c <__multadd>
 800baa0:	4680      	mov	r8, r0
 800baa2:	4607      	mov	r7, r0
 800baa4:	f109 0901 	add.w	r9, r9, #1
 800baa8:	e772      	b.n	800b990 <_dtoa_r+0x9f0>
 800baaa:	f000 fd37 	bl	800c51c <__multadd>
 800baae:	4639      	mov	r1, r7
 800bab0:	4680      	mov	r8, r0
 800bab2:	2300      	movs	r3, #0
 800bab4:	220a      	movs	r2, #10
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 fd30 	bl	800c51c <__multadd>
 800babc:	4607      	mov	r7, r0
 800babe:	e7f1      	b.n	800baa4 <_dtoa_r+0xb04>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	9302      	str	r3, [sp, #8]
 800bac4:	9d01      	ldr	r5, [sp, #4]
 800bac6:	ee18 0a10 	vmov	r0, s16
 800baca:	4631      	mov	r1, r6
 800bacc:	f7ff f9da 	bl	800ae84 <quorem>
 800bad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bad4:	9b01      	ldr	r3, [sp, #4]
 800bad6:	f805 ab01 	strb.w	sl, [r5], #1
 800bada:	1aea      	subs	r2, r5, r3
 800badc:	9b02      	ldr	r3, [sp, #8]
 800bade:	4293      	cmp	r3, r2
 800bae0:	dd09      	ble.n	800baf6 <_dtoa_r+0xb56>
 800bae2:	ee18 1a10 	vmov	r1, s16
 800bae6:	2300      	movs	r3, #0
 800bae8:	220a      	movs	r2, #10
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fd16 	bl	800c51c <__multadd>
 800baf0:	ee08 0a10 	vmov	s16, r0
 800baf4:	e7e7      	b.n	800bac6 <_dtoa_r+0xb26>
 800baf6:	9b02      	ldr	r3, [sp, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bfc8      	it	gt
 800bafc:	461d      	movgt	r5, r3
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	bfd8      	it	le
 800bb02:	2501      	movle	r5, #1
 800bb04:	441d      	add	r5, r3
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	ee18 1a10 	vmov	r1, s16
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4620      	mov	r0, r4
 800bb12:	f000 fefd 	bl	800c910 <__lshift>
 800bb16:	4631      	mov	r1, r6
 800bb18:	ee08 0a10 	vmov	s16, r0
 800bb1c:	f000 ff68 	bl	800c9f0 <__mcmp>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	dc91      	bgt.n	800ba48 <_dtoa_r+0xaa8>
 800bb24:	d102      	bne.n	800bb2c <_dtoa_r+0xb8c>
 800bb26:	f01a 0f01 	tst.w	sl, #1
 800bb2a:	d18d      	bne.n	800ba48 <_dtoa_r+0xaa8>
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	461d      	mov	r5, r3
 800bb30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb34:	2a30      	cmp	r2, #48	; 0x30
 800bb36:	d0fa      	beq.n	800bb2e <_dtoa_r+0xb8e>
 800bb38:	e6d7      	b.n	800b8ea <_dtoa_r+0x94a>
 800bb3a:	9a01      	ldr	r2, [sp, #4]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d184      	bne.n	800ba4a <_dtoa_r+0xaaa>
 800bb40:	9b00      	ldr	r3, [sp, #0]
 800bb42:	3301      	adds	r3, #1
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	2331      	movs	r3, #49	; 0x31
 800bb48:	7013      	strb	r3, [r2, #0]
 800bb4a:	e6ce      	b.n	800b8ea <_dtoa_r+0x94a>
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <_dtoa_r+0xbd4>)
 800bb4e:	f7ff ba95 	b.w	800b07c <_dtoa_r+0xdc>
 800bb52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f47f aa6e 	bne.w	800b036 <_dtoa_r+0x96>
 800bb5a:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <_dtoa_r+0xbd8>)
 800bb5c:	f7ff ba8e 	b.w	800b07c <_dtoa_r+0xdc>
 800bb60:	9b02      	ldr	r3, [sp, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dcae      	bgt.n	800bac4 <_dtoa_r+0xb24>
 800bb66:	9b06      	ldr	r3, [sp, #24]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	f73f aea8 	bgt.w	800b8be <_dtoa_r+0x91e>
 800bb6e:	e7a9      	b.n	800bac4 <_dtoa_r+0xb24>
 800bb70:	0800dd28 	.word	0x0800dd28
 800bb74:	0800db28 	.word	0x0800db28
 800bb78:	0800dca9 	.word	0x0800dca9

0800bb7c <__sflush_r>:
 800bb7c:	898a      	ldrh	r2, [r1, #12]
 800bb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	4605      	mov	r5, r0
 800bb84:	0710      	lsls	r0, r2, #28
 800bb86:	460c      	mov	r4, r1
 800bb88:	d458      	bmi.n	800bc3c <__sflush_r+0xc0>
 800bb8a:	684b      	ldr	r3, [r1, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dc05      	bgt.n	800bb9c <__sflush_r+0x20>
 800bb90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	dc02      	bgt.n	800bb9c <__sflush_r+0x20>
 800bb96:	2000      	movs	r0, #0
 800bb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	d0f9      	beq.n	800bb96 <__sflush_r+0x1a>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bba8:	682f      	ldr	r7, [r5, #0]
 800bbaa:	602b      	str	r3, [r5, #0]
 800bbac:	d032      	beq.n	800bc14 <__sflush_r+0x98>
 800bbae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	075a      	lsls	r2, r3, #29
 800bbb4:	d505      	bpl.n	800bbc2 <__sflush_r+0x46>
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	1ac0      	subs	r0, r0, r3
 800bbba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbbc:	b10b      	cbz	r3, 800bbc2 <__sflush_r+0x46>
 800bbbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbc0:	1ac0      	subs	r0, r0, r3
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbc8:	6a21      	ldr	r1, [r4, #32]
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b0      	blx	r6
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	d106      	bne.n	800bbe2 <__sflush_r+0x66>
 800bbd4:	6829      	ldr	r1, [r5, #0]
 800bbd6:	291d      	cmp	r1, #29
 800bbd8:	d82c      	bhi.n	800bc34 <__sflush_r+0xb8>
 800bbda:	4a2a      	ldr	r2, [pc, #168]	; (800bc84 <__sflush_r+0x108>)
 800bbdc:	40ca      	lsrs	r2, r1
 800bbde:	07d6      	lsls	r6, r2, #31
 800bbe0:	d528      	bpl.n	800bc34 <__sflush_r+0xb8>
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	6062      	str	r2, [r4, #4]
 800bbe6:	04d9      	lsls	r1, r3, #19
 800bbe8:	6922      	ldr	r2, [r4, #16]
 800bbea:	6022      	str	r2, [r4, #0]
 800bbec:	d504      	bpl.n	800bbf8 <__sflush_r+0x7c>
 800bbee:	1c42      	adds	r2, r0, #1
 800bbf0:	d101      	bne.n	800bbf6 <__sflush_r+0x7a>
 800bbf2:	682b      	ldr	r3, [r5, #0]
 800bbf4:	b903      	cbnz	r3, 800bbf8 <__sflush_r+0x7c>
 800bbf6:	6560      	str	r0, [r4, #84]	; 0x54
 800bbf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbfa:	602f      	str	r7, [r5, #0]
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	d0ca      	beq.n	800bb96 <__sflush_r+0x1a>
 800bc00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc04:	4299      	cmp	r1, r3
 800bc06:	d002      	beq.n	800bc0e <__sflush_r+0x92>
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f001 f8fd 	bl	800ce08 <_free_r>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	6360      	str	r0, [r4, #52]	; 0x34
 800bc12:	e7c1      	b.n	800bb98 <__sflush_r+0x1c>
 800bc14:	6a21      	ldr	r1, [r4, #32]
 800bc16:	2301      	movs	r3, #1
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b0      	blx	r6
 800bc1c:	1c41      	adds	r1, r0, #1
 800bc1e:	d1c7      	bne.n	800bbb0 <__sflush_r+0x34>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0c4      	beq.n	800bbb0 <__sflush_r+0x34>
 800bc26:	2b1d      	cmp	r3, #29
 800bc28:	d001      	beq.n	800bc2e <__sflush_r+0xb2>
 800bc2a:	2b16      	cmp	r3, #22
 800bc2c:	d101      	bne.n	800bc32 <__sflush_r+0xb6>
 800bc2e:	602f      	str	r7, [r5, #0]
 800bc30:	e7b1      	b.n	800bb96 <__sflush_r+0x1a>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	e7ad      	b.n	800bb98 <__sflush_r+0x1c>
 800bc3c:	690f      	ldr	r7, [r1, #16]
 800bc3e:	2f00      	cmp	r7, #0
 800bc40:	d0a9      	beq.n	800bb96 <__sflush_r+0x1a>
 800bc42:	0793      	lsls	r3, r2, #30
 800bc44:	680e      	ldr	r6, [r1, #0]
 800bc46:	bf08      	it	eq
 800bc48:	694b      	ldreq	r3, [r1, #20]
 800bc4a:	600f      	str	r7, [r1, #0]
 800bc4c:	bf18      	it	ne
 800bc4e:	2300      	movne	r3, #0
 800bc50:	eba6 0807 	sub.w	r8, r6, r7
 800bc54:	608b      	str	r3, [r1, #8]
 800bc56:	f1b8 0f00 	cmp.w	r8, #0
 800bc5a:	dd9c      	ble.n	800bb96 <__sflush_r+0x1a>
 800bc5c:	6a21      	ldr	r1, [r4, #32]
 800bc5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc60:	4643      	mov	r3, r8
 800bc62:	463a      	mov	r2, r7
 800bc64:	4628      	mov	r0, r5
 800bc66:	47b0      	blx	r6
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	dc06      	bgt.n	800bc7a <__sflush_r+0xfe>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	e78e      	b.n	800bb98 <__sflush_r+0x1c>
 800bc7a:	4407      	add	r7, r0
 800bc7c:	eba8 0800 	sub.w	r8, r8, r0
 800bc80:	e7e9      	b.n	800bc56 <__sflush_r+0xda>
 800bc82:	bf00      	nop
 800bc84:	20400001 	.word	0x20400001

0800bc88 <_fflush_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	690b      	ldr	r3, [r1, #16]
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	b913      	cbnz	r3, 800bc98 <_fflush_r+0x10>
 800bc92:	2500      	movs	r5, #0
 800bc94:	4628      	mov	r0, r5
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	b118      	cbz	r0, 800bca2 <_fflush_r+0x1a>
 800bc9a:	6983      	ldr	r3, [r0, #24]
 800bc9c:	b90b      	cbnz	r3, 800bca2 <_fflush_r+0x1a>
 800bc9e:	f7fd f953 	bl	8008f48 <__sinit>
 800bca2:	4b14      	ldr	r3, [pc, #80]	; (800bcf4 <_fflush_r+0x6c>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d11b      	bne.n	800bce0 <_fflush_r+0x58>
 800bca8:	686c      	ldr	r4, [r5, #4]
 800bcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0ef      	beq.n	800bc92 <_fflush_r+0xa>
 800bcb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcb4:	07d0      	lsls	r0, r2, #31
 800bcb6:	d404      	bmi.n	800bcc2 <_fflush_r+0x3a>
 800bcb8:	0599      	lsls	r1, r3, #22
 800bcba:	d402      	bmi.n	800bcc2 <_fflush_r+0x3a>
 800bcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcbe:	f7fd fa06 	bl	80090ce <__retarget_lock_acquire_recursive>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f7ff ff59 	bl	800bb7c <__sflush_r>
 800bcca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bccc:	07da      	lsls	r2, r3, #31
 800bcce:	4605      	mov	r5, r0
 800bcd0:	d4e0      	bmi.n	800bc94 <_fflush_r+0xc>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	059b      	lsls	r3, r3, #22
 800bcd6:	d4dd      	bmi.n	800bc94 <_fflush_r+0xc>
 800bcd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcda:	f7fd f9f9 	bl	80090d0 <__retarget_lock_release_recursive>
 800bcde:	e7d9      	b.n	800bc94 <_fflush_r+0xc>
 800bce0:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <_fflush_r+0x70>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d101      	bne.n	800bcea <_fflush_r+0x62>
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	e7df      	b.n	800bcaa <_fflush_r+0x22>
 800bcea:	4b04      	ldr	r3, [pc, #16]	; (800bcfc <_fflush_r+0x74>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	bf08      	it	eq
 800bcf0:	68ec      	ldreq	r4, [r5, #12]
 800bcf2:	e7da      	b.n	800bcaa <_fflush_r+0x22>
 800bcf4:	0800dad4 	.word	0x0800dad4
 800bcf8:	0800daf4 	.word	0x0800daf4
 800bcfc:	0800dab4 	.word	0x0800dab4

0800bd00 <rshift>:
 800bd00:	6903      	ldr	r3, [r0, #16]
 800bd02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd0e:	f100 0414 	add.w	r4, r0, #20
 800bd12:	dd45      	ble.n	800bda0 <rshift+0xa0>
 800bd14:	f011 011f 	ands.w	r1, r1, #31
 800bd18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd20:	d10c      	bne.n	800bd3c <rshift+0x3c>
 800bd22:	f100 0710 	add.w	r7, r0, #16
 800bd26:	4629      	mov	r1, r5
 800bd28:	42b1      	cmp	r1, r6
 800bd2a:	d334      	bcc.n	800bd96 <rshift+0x96>
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	1eea      	subs	r2, r5, #3
 800bd32:	4296      	cmp	r6, r2
 800bd34:	bf38      	it	cc
 800bd36:	2300      	movcc	r3, #0
 800bd38:	4423      	add	r3, r4
 800bd3a:	e015      	b.n	800bd68 <rshift+0x68>
 800bd3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd40:	f1c1 0820 	rsb	r8, r1, #32
 800bd44:	40cf      	lsrs	r7, r1
 800bd46:	f105 0e04 	add.w	lr, r5, #4
 800bd4a:	46a1      	mov	r9, r4
 800bd4c:	4576      	cmp	r6, lr
 800bd4e:	46f4      	mov	ip, lr
 800bd50:	d815      	bhi.n	800bd7e <rshift+0x7e>
 800bd52:	1a9a      	subs	r2, r3, r2
 800bd54:	0092      	lsls	r2, r2, #2
 800bd56:	3a04      	subs	r2, #4
 800bd58:	3501      	adds	r5, #1
 800bd5a:	42ae      	cmp	r6, r5
 800bd5c:	bf38      	it	cc
 800bd5e:	2200      	movcc	r2, #0
 800bd60:	18a3      	adds	r3, r4, r2
 800bd62:	50a7      	str	r7, [r4, r2]
 800bd64:	b107      	cbz	r7, 800bd68 <rshift+0x68>
 800bd66:	3304      	adds	r3, #4
 800bd68:	1b1a      	subs	r2, r3, r4
 800bd6a:	42a3      	cmp	r3, r4
 800bd6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd70:	bf08      	it	eq
 800bd72:	2300      	moveq	r3, #0
 800bd74:	6102      	str	r2, [r0, #16]
 800bd76:	bf08      	it	eq
 800bd78:	6143      	streq	r3, [r0, #20]
 800bd7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd7e:	f8dc c000 	ldr.w	ip, [ip]
 800bd82:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd86:	ea4c 0707 	orr.w	r7, ip, r7
 800bd8a:	f849 7b04 	str.w	r7, [r9], #4
 800bd8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd92:	40cf      	lsrs	r7, r1
 800bd94:	e7da      	b.n	800bd4c <rshift+0x4c>
 800bd96:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd9a:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd9e:	e7c3      	b.n	800bd28 <rshift+0x28>
 800bda0:	4623      	mov	r3, r4
 800bda2:	e7e1      	b.n	800bd68 <rshift+0x68>

0800bda4 <__hexdig_fun>:
 800bda4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bda8:	2b09      	cmp	r3, #9
 800bdaa:	d802      	bhi.n	800bdb2 <__hexdig_fun+0xe>
 800bdac:	3820      	subs	r0, #32
 800bdae:	b2c0      	uxtb	r0, r0
 800bdb0:	4770      	bx	lr
 800bdb2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d801      	bhi.n	800bdbe <__hexdig_fun+0x1a>
 800bdba:	3847      	subs	r0, #71	; 0x47
 800bdbc:	e7f7      	b.n	800bdae <__hexdig_fun+0xa>
 800bdbe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bdc2:	2b05      	cmp	r3, #5
 800bdc4:	d801      	bhi.n	800bdca <__hexdig_fun+0x26>
 800bdc6:	3827      	subs	r0, #39	; 0x27
 800bdc8:	e7f1      	b.n	800bdae <__hexdig_fun+0xa>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <__gethex>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	ed2d 8b02 	vpush	{d8}
 800bdd8:	b089      	sub	sp, #36	; 0x24
 800bdda:	ee08 0a10 	vmov	s16, r0
 800bdde:	9304      	str	r3, [sp, #16]
 800bde0:	4bb4      	ldr	r3, [pc, #720]	; (800c0b4 <__gethex+0x2e4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	468b      	mov	fp, r1
 800bdea:	4690      	mov	r8, r2
 800bdec:	f7f4 fa18 	bl	8000220 <strlen>
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	f8db 2000 	ldr.w	r2, [fp]
 800bdf6:	4403      	add	r3, r0
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bdfe:	9305      	str	r3, [sp, #20]
 800be00:	1c93      	adds	r3, r2, #2
 800be02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be0a:	32fe      	adds	r2, #254	; 0xfe
 800be0c:	18d1      	adds	r1, r2, r3
 800be0e:	461f      	mov	r7, r3
 800be10:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be14:	9100      	str	r1, [sp, #0]
 800be16:	2830      	cmp	r0, #48	; 0x30
 800be18:	d0f8      	beq.n	800be0c <__gethex+0x3c>
 800be1a:	f7ff ffc3 	bl	800bda4 <__hexdig_fun>
 800be1e:	4604      	mov	r4, r0
 800be20:	2800      	cmp	r0, #0
 800be22:	d13a      	bne.n	800be9a <__gethex+0xca>
 800be24:	9901      	ldr	r1, [sp, #4]
 800be26:	4652      	mov	r2, sl
 800be28:	4638      	mov	r0, r7
 800be2a:	f001 f9b1 	bl	800d190 <strncmp>
 800be2e:	4605      	mov	r5, r0
 800be30:	2800      	cmp	r0, #0
 800be32:	d168      	bne.n	800bf06 <__gethex+0x136>
 800be34:	f817 000a 	ldrb.w	r0, [r7, sl]
 800be38:	eb07 060a 	add.w	r6, r7, sl
 800be3c:	f7ff ffb2 	bl	800bda4 <__hexdig_fun>
 800be40:	2800      	cmp	r0, #0
 800be42:	d062      	beq.n	800bf0a <__gethex+0x13a>
 800be44:	4633      	mov	r3, r6
 800be46:	7818      	ldrb	r0, [r3, #0]
 800be48:	2830      	cmp	r0, #48	; 0x30
 800be4a:	461f      	mov	r7, r3
 800be4c:	f103 0301 	add.w	r3, r3, #1
 800be50:	d0f9      	beq.n	800be46 <__gethex+0x76>
 800be52:	f7ff ffa7 	bl	800bda4 <__hexdig_fun>
 800be56:	2301      	movs	r3, #1
 800be58:	fab0 f480 	clz	r4, r0
 800be5c:	0964      	lsrs	r4, r4, #5
 800be5e:	4635      	mov	r5, r6
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	463a      	mov	r2, r7
 800be64:	4616      	mov	r6, r2
 800be66:	3201      	adds	r2, #1
 800be68:	7830      	ldrb	r0, [r6, #0]
 800be6a:	f7ff ff9b 	bl	800bda4 <__hexdig_fun>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d1f8      	bne.n	800be64 <__gethex+0x94>
 800be72:	9901      	ldr	r1, [sp, #4]
 800be74:	4652      	mov	r2, sl
 800be76:	4630      	mov	r0, r6
 800be78:	f001 f98a 	bl	800d190 <strncmp>
 800be7c:	b980      	cbnz	r0, 800bea0 <__gethex+0xd0>
 800be7e:	b94d      	cbnz	r5, 800be94 <__gethex+0xc4>
 800be80:	eb06 050a 	add.w	r5, r6, sl
 800be84:	462a      	mov	r2, r5
 800be86:	4616      	mov	r6, r2
 800be88:	3201      	adds	r2, #1
 800be8a:	7830      	ldrb	r0, [r6, #0]
 800be8c:	f7ff ff8a 	bl	800bda4 <__hexdig_fun>
 800be90:	2800      	cmp	r0, #0
 800be92:	d1f8      	bne.n	800be86 <__gethex+0xb6>
 800be94:	1bad      	subs	r5, r5, r6
 800be96:	00ad      	lsls	r5, r5, #2
 800be98:	e004      	b.n	800bea4 <__gethex+0xd4>
 800be9a:	2400      	movs	r4, #0
 800be9c:	4625      	mov	r5, r4
 800be9e:	e7e0      	b.n	800be62 <__gethex+0x92>
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	d1f7      	bne.n	800be94 <__gethex+0xc4>
 800bea4:	7833      	ldrb	r3, [r6, #0]
 800bea6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800beaa:	2b50      	cmp	r3, #80	; 0x50
 800beac:	d13b      	bne.n	800bf26 <__gethex+0x156>
 800beae:	7873      	ldrb	r3, [r6, #1]
 800beb0:	2b2b      	cmp	r3, #43	; 0x2b
 800beb2:	d02c      	beq.n	800bf0e <__gethex+0x13e>
 800beb4:	2b2d      	cmp	r3, #45	; 0x2d
 800beb6:	d02e      	beq.n	800bf16 <__gethex+0x146>
 800beb8:	1c71      	adds	r1, r6, #1
 800beba:	f04f 0900 	mov.w	r9, #0
 800bebe:	7808      	ldrb	r0, [r1, #0]
 800bec0:	f7ff ff70 	bl	800bda4 <__hexdig_fun>
 800bec4:	1e43      	subs	r3, r0, #1
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b18      	cmp	r3, #24
 800beca:	d82c      	bhi.n	800bf26 <__gethex+0x156>
 800becc:	f1a0 0210 	sub.w	r2, r0, #16
 800bed0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bed4:	f7ff ff66 	bl	800bda4 <__hexdig_fun>
 800bed8:	1e43      	subs	r3, r0, #1
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b18      	cmp	r3, #24
 800bede:	d91d      	bls.n	800bf1c <__gethex+0x14c>
 800bee0:	f1b9 0f00 	cmp.w	r9, #0
 800bee4:	d000      	beq.n	800bee8 <__gethex+0x118>
 800bee6:	4252      	negs	r2, r2
 800bee8:	4415      	add	r5, r2
 800beea:	f8cb 1000 	str.w	r1, [fp]
 800beee:	b1e4      	cbz	r4, 800bf2a <__gethex+0x15a>
 800bef0:	9b00      	ldr	r3, [sp, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bf14      	ite	ne
 800bef6:	2700      	movne	r7, #0
 800bef8:	2706      	moveq	r7, #6
 800befa:	4638      	mov	r0, r7
 800befc:	b009      	add	sp, #36	; 0x24
 800befe:	ecbd 8b02 	vpop	{d8}
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	463e      	mov	r6, r7
 800bf08:	4625      	mov	r5, r4
 800bf0a:	2401      	movs	r4, #1
 800bf0c:	e7ca      	b.n	800bea4 <__gethex+0xd4>
 800bf0e:	f04f 0900 	mov.w	r9, #0
 800bf12:	1cb1      	adds	r1, r6, #2
 800bf14:	e7d3      	b.n	800bebe <__gethex+0xee>
 800bf16:	f04f 0901 	mov.w	r9, #1
 800bf1a:	e7fa      	b.n	800bf12 <__gethex+0x142>
 800bf1c:	230a      	movs	r3, #10
 800bf1e:	fb03 0202 	mla	r2, r3, r2, r0
 800bf22:	3a10      	subs	r2, #16
 800bf24:	e7d4      	b.n	800bed0 <__gethex+0x100>
 800bf26:	4631      	mov	r1, r6
 800bf28:	e7df      	b.n	800beea <__gethex+0x11a>
 800bf2a:	1bf3      	subs	r3, r6, r7
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	4621      	mov	r1, r4
 800bf30:	2b07      	cmp	r3, #7
 800bf32:	dc0b      	bgt.n	800bf4c <__gethex+0x17c>
 800bf34:	ee18 0a10 	vmov	r0, s16
 800bf38:	f000 fa8e 	bl	800c458 <_Balloc>
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	b940      	cbnz	r0, 800bf52 <__gethex+0x182>
 800bf40:	4b5d      	ldr	r3, [pc, #372]	; (800c0b8 <__gethex+0x2e8>)
 800bf42:	4602      	mov	r2, r0
 800bf44:	21de      	movs	r1, #222	; 0xde
 800bf46:	485d      	ldr	r0, [pc, #372]	; (800c0bc <__gethex+0x2ec>)
 800bf48:	f001 f944 	bl	800d1d4 <__assert_func>
 800bf4c:	3101      	adds	r1, #1
 800bf4e:	105b      	asrs	r3, r3, #1
 800bf50:	e7ee      	b.n	800bf30 <__gethex+0x160>
 800bf52:	f100 0914 	add.w	r9, r0, #20
 800bf56:	f04f 0b00 	mov.w	fp, #0
 800bf5a:	f1ca 0301 	rsb	r3, sl, #1
 800bf5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf62:	f8cd b000 	str.w	fp, [sp]
 800bf66:	9306      	str	r3, [sp, #24]
 800bf68:	42b7      	cmp	r7, r6
 800bf6a:	d340      	bcc.n	800bfee <__gethex+0x21e>
 800bf6c:	9802      	ldr	r0, [sp, #8]
 800bf6e:	9b00      	ldr	r3, [sp, #0]
 800bf70:	f840 3b04 	str.w	r3, [r0], #4
 800bf74:	eba0 0009 	sub.w	r0, r0, r9
 800bf78:	1080      	asrs	r0, r0, #2
 800bf7a:	0146      	lsls	r6, r0, #5
 800bf7c:	6120      	str	r0, [r4, #16]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 fb5c 	bl	800c63c <__hi0bits>
 800bf84:	1a30      	subs	r0, r6, r0
 800bf86:	f8d8 6000 	ldr.w	r6, [r8]
 800bf8a:	42b0      	cmp	r0, r6
 800bf8c:	dd63      	ble.n	800c056 <__gethex+0x286>
 800bf8e:	1b87      	subs	r7, r0, r6
 800bf90:	4639      	mov	r1, r7
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 ff00 	bl	800cd98 <__any_on>
 800bf98:	4682      	mov	sl, r0
 800bf9a:	b1a8      	cbz	r0, 800bfc8 <__gethex+0x1f8>
 800bf9c:	1e7b      	subs	r3, r7, #1
 800bf9e:	1159      	asrs	r1, r3, #5
 800bfa0:	f003 021f 	and.w	r2, r3, #31
 800bfa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bfa8:	f04f 0a01 	mov.w	sl, #1
 800bfac:	fa0a f202 	lsl.w	r2, sl, r2
 800bfb0:	420a      	tst	r2, r1
 800bfb2:	d009      	beq.n	800bfc8 <__gethex+0x1f8>
 800bfb4:	4553      	cmp	r3, sl
 800bfb6:	dd05      	ble.n	800bfc4 <__gethex+0x1f4>
 800bfb8:	1eb9      	subs	r1, r7, #2
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 feec 	bl	800cd98 <__any_on>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d145      	bne.n	800c050 <__gethex+0x280>
 800bfc4:	f04f 0a02 	mov.w	sl, #2
 800bfc8:	4639      	mov	r1, r7
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f7ff fe98 	bl	800bd00 <rshift>
 800bfd0:	443d      	add	r5, r7
 800bfd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfd6:	42ab      	cmp	r3, r5
 800bfd8:	da4c      	bge.n	800c074 <__gethex+0x2a4>
 800bfda:	ee18 0a10 	vmov	r0, s16
 800bfde:	4621      	mov	r1, r4
 800bfe0:	f000 fa7a 	bl	800c4d8 <_Bfree>
 800bfe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	27a3      	movs	r7, #163	; 0xa3
 800bfec:	e785      	b.n	800befa <__gethex+0x12a>
 800bfee:	1e73      	subs	r3, r6, #1
 800bff0:	9a05      	ldr	r2, [sp, #20]
 800bff2:	9303      	str	r3, [sp, #12]
 800bff4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d019      	beq.n	800c030 <__gethex+0x260>
 800bffc:	f1bb 0f20 	cmp.w	fp, #32
 800c000:	d107      	bne.n	800c012 <__gethex+0x242>
 800c002:	9b02      	ldr	r3, [sp, #8]
 800c004:	9a00      	ldr	r2, [sp, #0]
 800c006:	f843 2b04 	str.w	r2, [r3], #4
 800c00a:	9302      	str	r3, [sp, #8]
 800c00c:	2300      	movs	r3, #0
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	469b      	mov	fp, r3
 800c012:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c016:	f7ff fec5 	bl	800bda4 <__hexdig_fun>
 800c01a:	9b00      	ldr	r3, [sp, #0]
 800c01c:	f000 000f 	and.w	r0, r0, #15
 800c020:	fa00 f00b 	lsl.w	r0, r0, fp
 800c024:	4303      	orrs	r3, r0
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	f10b 0b04 	add.w	fp, fp, #4
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	e00d      	b.n	800c04c <__gethex+0x27c>
 800c030:	9b03      	ldr	r3, [sp, #12]
 800c032:	9a06      	ldr	r2, [sp, #24]
 800c034:	4413      	add	r3, r2
 800c036:	42bb      	cmp	r3, r7
 800c038:	d3e0      	bcc.n	800bffc <__gethex+0x22c>
 800c03a:	4618      	mov	r0, r3
 800c03c:	9901      	ldr	r1, [sp, #4]
 800c03e:	9307      	str	r3, [sp, #28]
 800c040:	4652      	mov	r2, sl
 800c042:	f001 f8a5 	bl	800d190 <strncmp>
 800c046:	9b07      	ldr	r3, [sp, #28]
 800c048:	2800      	cmp	r0, #0
 800c04a:	d1d7      	bne.n	800bffc <__gethex+0x22c>
 800c04c:	461e      	mov	r6, r3
 800c04e:	e78b      	b.n	800bf68 <__gethex+0x198>
 800c050:	f04f 0a03 	mov.w	sl, #3
 800c054:	e7b8      	b.n	800bfc8 <__gethex+0x1f8>
 800c056:	da0a      	bge.n	800c06e <__gethex+0x29e>
 800c058:	1a37      	subs	r7, r6, r0
 800c05a:	4621      	mov	r1, r4
 800c05c:	ee18 0a10 	vmov	r0, s16
 800c060:	463a      	mov	r2, r7
 800c062:	f000 fc55 	bl	800c910 <__lshift>
 800c066:	1bed      	subs	r5, r5, r7
 800c068:	4604      	mov	r4, r0
 800c06a:	f100 0914 	add.w	r9, r0, #20
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	e7ae      	b.n	800bfd2 <__gethex+0x202>
 800c074:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c078:	42a8      	cmp	r0, r5
 800c07a:	dd72      	ble.n	800c162 <__gethex+0x392>
 800c07c:	1b45      	subs	r5, r0, r5
 800c07e:	42ae      	cmp	r6, r5
 800c080:	dc36      	bgt.n	800c0f0 <__gethex+0x320>
 800c082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c086:	2b02      	cmp	r3, #2
 800c088:	d02a      	beq.n	800c0e0 <__gethex+0x310>
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d02c      	beq.n	800c0e8 <__gethex+0x318>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d11c      	bne.n	800c0cc <__gethex+0x2fc>
 800c092:	42ae      	cmp	r6, r5
 800c094:	d11a      	bne.n	800c0cc <__gethex+0x2fc>
 800c096:	2e01      	cmp	r6, #1
 800c098:	d112      	bne.n	800c0c0 <__gethex+0x2f0>
 800c09a:	9a04      	ldr	r2, [sp, #16]
 800c09c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	f8c9 3000 	str.w	r3, [r9]
 800c0aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0ac:	2762      	movs	r7, #98	; 0x62
 800c0ae:	601c      	str	r4, [r3, #0]
 800c0b0:	e723      	b.n	800befa <__gethex+0x12a>
 800c0b2:	bf00      	nop
 800c0b4:	0800dda0 	.word	0x0800dda0
 800c0b8:	0800dd28 	.word	0x0800dd28
 800c0bc:	0800dd39 	.word	0x0800dd39
 800c0c0:	1e71      	subs	r1, r6, #1
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 fe68 	bl	800cd98 <__any_on>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d1e6      	bne.n	800c09a <__gethex+0x2ca>
 800c0cc:	ee18 0a10 	vmov	r0, s16
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	f000 fa01 	bl	800c4d8 <_Bfree>
 800c0d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c0d8:	2300      	movs	r3, #0
 800c0da:	6013      	str	r3, [r2, #0]
 800c0dc:	2750      	movs	r7, #80	; 0x50
 800c0de:	e70c      	b.n	800befa <__gethex+0x12a>
 800c0e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1f2      	bne.n	800c0cc <__gethex+0x2fc>
 800c0e6:	e7d8      	b.n	800c09a <__gethex+0x2ca>
 800c0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1d5      	bne.n	800c09a <__gethex+0x2ca>
 800c0ee:	e7ed      	b.n	800c0cc <__gethex+0x2fc>
 800c0f0:	1e6f      	subs	r7, r5, #1
 800c0f2:	f1ba 0f00 	cmp.w	sl, #0
 800c0f6:	d131      	bne.n	800c15c <__gethex+0x38c>
 800c0f8:	b127      	cbz	r7, 800c104 <__gethex+0x334>
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f000 fe4b 	bl	800cd98 <__any_on>
 800c102:	4682      	mov	sl, r0
 800c104:	117b      	asrs	r3, r7, #5
 800c106:	2101      	movs	r1, #1
 800c108:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c10c:	f007 071f 	and.w	r7, r7, #31
 800c110:	fa01 f707 	lsl.w	r7, r1, r7
 800c114:	421f      	tst	r7, r3
 800c116:	4629      	mov	r1, r5
 800c118:	4620      	mov	r0, r4
 800c11a:	bf18      	it	ne
 800c11c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c120:	1b76      	subs	r6, r6, r5
 800c122:	f7ff fded 	bl	800bd00 <rshift>
 800c126:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c12a:	2702      	movs	r7, #2
 800c12c:	f1ba 0f00 	cmp.w	sl, #0
 800c130:	d048      	beq.n	800c1c4 <__gethex+0x3f4>
 800c132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c136:	2b02      	cmp	r3, #2
 800c138:	d015      	beq.n	800c166 <__gethex+0x396>
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d017      	beq.n	800c16e <__gethex+0x39e>
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d109      	bne.n	800c156 <__gethex+0x386>
 800c142:	f01a 0f02 	tst.w	sl, #2
 800c146:	d006      	beq.n	800c156 <__gethex+0x386>
 800c148:	f8d9 0000 	ldr.w	r0, [r9]
 800c14c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c150:	f01a 0f01 	tst.w	sl, #1
 800c154:	d10e      	bne.n	800c174 <__gethex+0x3a4>
 800c156:	f047 0710 	orr.w	r7, r7, #16
 800c15a:	e033      	b.n	800c1c4 <__gethex+0x3f4>
 800c15c:	f04f 0a01 	mov.w	sl, #1
 800c160:	e7d0      	b.n	800c104 <__gethex+0x334>
 800c162:	2701      	movs	r7, #1
 800c164:	e7e2      	b.n	800c12c <__gethex+0x35c>
 800c166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c168:	f1c3 0301 	rsb	r3, r3, #1
 800c16c:	9315      	str	r3, [sp, #84]	; 0x54
 800c16e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0f0      	beq.n	800c156 <__gethex+0x386>
 800c174:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c178:	f104 0314 	add.w	r3, r4, #20
 800c17c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c180:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c184:	f04f 0c00 	mov.w	ip, #0
 800c188:	4618      	mov	r0, r3
 800c18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c192:	d01c      	beq.n	800c1ce <__gethex+0x3fe>
 800c194:	3201      	adds	r2, #1
 800c196:	6002      	str	r2, [r0, #0]
 800c198:	2f02      	cmp	r7, #2
 800c19a:	f104 0314 	add.w	r3, r4, #20
 800c19e:	d13f      	bne.n	800c220 <__gethex+0x450>
 800c1a0:	f8d8 2000 	ldr.w	r2, [r8]
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	42b2      	cmp	r2, r6
 800c1a8:	d10a      	bne.n	800c1c0 <__gethex+0x3f0>
 800c1aa:	1171      	asrs	r1, r6, #5
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1b2:	f006 061f 	and.w	r6, r6, #31
 800c1b6:	fa02 f606 	lsl.w	r6, r2, r6
 800c1ba:	421e      	tst	r6, r3
 800c1bc:	bf18      	it	ne
 800c1be:	4617      	movne	r7, r2
 800c1c0:	f047 0720 	orr.w	r7, r7, #32
 800c1c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1c6:	601c      	str	r4, [r3, #0]
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	601d      	str	r5, [r3, #0]
 800c1cc:	e695      	b.n	800befa <__gethex+0x12a>
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800c1d4:	d8d8      	bhi.n	800c188 <__gethex+0x3b8>
 800c1d6:	68a3      	ldr	r3, [r4, #8]
 800c1d8:	459b      	cmp	fp, r3
 800c1da:	db19      	blt.n	800c210 <__gethex+0x440>
 800c1dc:	6861      	ldr	r1, [r4, #4]
 800c1de:	ee18 0a10 	vmov	r0, s16
 800c1e2:	3101      	adds	r1, #1
 800c1e4:	f000 f938 	bl	800c458 <_Balloc>
 800c1e8:	4681      	mov	r9, r0
 800c1ea:	b918      	cbnz	r0, 800c1f4 <__gethex+0x424>
 800c1ec:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <__gethex+0x488>)
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	2184      	movs	r1, #132	; 0x84
 800c1f2:	e6a8      	b.n	800bf46 <__gethex+0x176>
 800c1f4:	6922      	ldr	r2, [r4, #16]
 800c1f6:	3202      	adds	r2, #2
 800c1f8:	f104 010c 	add.w	r1, r4, #12
 800c1fc:	0092      	lsls	r2, r2, #2
 800c1fe:	300c      	adds	r0, #12
 800c200:	f7fc ff67 	bl	80090d2 <memcpy>
 800c204:	4621      	mov	r1, r4
 800c206:	ee18 0a10 	vmov	r0, s16
 800c20a:	f000 f965 	bl	800c4d8 <_Bfree>
 800c20e:	464c      	mov	r4, r9
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	1c5a      	adds	r2, r3, #1
 800c214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c218:	6122      	str	r2, [r4, #16]
 800c21a:	2201      	movs	r2, #1
 800c21c:	615a      	str	r2, [r3, #20]
 800c21e:	e7bb      	b.n	800c198 <__gethex+0x3c8>
 800c220:	6922      	ldr	r2, [r4, #16]
 800c222:	455a      	cmp	r2, fp
 800c224:	dd0b      	ble.n	800c23e <__gethex+0x46e>
 800c226:	2101      	movs	r1, #1
 800c228:	4620      	mov	r0, r4
 800c22a:	f7ff fd69 	bl	800bd00 <rshift>
 800c22e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c232:	3501      	adds	r5, #1
 800c234:	42ab      	cmp	r3, r5
 800c236:	f6ff aed0 	blt.w	800bfda <__gethex+0x20a>
 800c23a:	2701      	movs	r7, #1
 800c23c:	e7c0      	b.n	800c1c0 <__gethex+0x3f0>
 800c23e:	f016 061f 	ands.w	r6, r6, #31
 800c242:	d0fa      	beq.n	800c23a <__gethex+0x46a>
 800c244:	4453      	add	r3, sl
 800c246:	f1c6 0620 	rsb	r6, r6, #32
 800c24a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c24e:	f000 f9f5 	bl	800c63c <__hi0bits>
 800c252:	42b0      	cmp	r0, r6
 800c254:	dbe7      	blt.n	800c226 <__gethex+0x456>
 800c256:	e7f0      	b.n	800c23a <__gethex+0x46a>
 800c258:	0800dd28 	.word	0x0800dd28

0800c25c <L_shift>:
 800c25c:	f1c2 0208 	rsb	r2, r2, #8
 800c260:	0092      	lsls	r2, r2, #2
 800c262:	b570      	push	{r4, r5, r6, lr}
 800c264:	f1c2 0620 	rsb	r6, r2, #32
 800c268:	6843      	ldr	r3, [r0, #4]
 800c26a:	6804      	ldr	r4, [r0, #0]
 800c26c:	fa03 f506 	lsl.w	r5, r3, r6
 800c270:	432c      	orrs	r4, r5
 800c272:	40d3      	lsrs	r3, r2
 800c274:	6004      	str	r4, [r0, #0]
 800c276:	f840 3f04 	str.w	r3, [r0, #4]!
 800c27a:	4288      	cmp	r0, r1
 800c27c:	d3f4      	bcc.n	800c268 <L_shift+0xc>
 800c27e:	bd70      	pop	{r4, r5, r6, pc}

0800c280 <__match>:
 800c280:	b530      	push	{r4, r5, lr}
 800c282:	6803      	ldr	r3, [r0, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c28a:	b914      	cbnz	r4, 800c292 <__match+0x12>
 800c28c:	6003      	str	r3, [r0, #0]
 800c28e:	2001      	movs	r0, #1
 800c290:	bd30      	pop	{r4, r5, pc}
 800c292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c296:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c29a:	2d19      	cmp	r5, #25
 800c29c:	bf98      	it	ls
 800c29e:	3220      	addls	r2, #32
 800c2a0:	42a2      	cmp	r2, r4
 800c2a2:	d0f0      	beq.n	800c286 <__match+0x6>
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	e7f3      	b.n	800c290 <__match+0x10>

0800c2a8 <__hexnan>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	680b      	ldr	r3, [r1, #0]
 800c2ae:	115e      	asrs	r6, r3, #5
 800c2b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2b4:	f013 031f 	ands.w	r3, r3, #31
 800c2b8:	b087      	sub	sp, #28
 800c2ba:	bf18      	it	ne
 800c2bc:	3604      	addne	r6, #4
 800c2be:	2500      	movs	r5, #0
 800c2c0:	1f37      	subs	r7, r6, #4
 800c2c2:	4690      	mov	r8, r2
 800c2c4:	6802      	ldr	r2, [r0, #0]
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	4682      	mov	sl, r0
 800c2ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2ce:	46b9      	mov	r9, r7
 800c2d0:	463c      	mov	r4, r7
 800c2d2:	9502      	str	r5, [sp, #8]
 800c2d4:	46ab      	mov	fp, r5
 800c2d6:	7851      	ldrb	r1, [r2, #1]
 800c2d8:	1c53      	adds	r3, r2, #1
 800c2da:	9303      	str	r3, [sp, #12]
 800c2dc:	b341      	cbz	r1, 800c330 <__hexnan+0x88>
 800c2de:	4608      	mov	r0, r1
 800c2e0:	9205      	str	r2, [sp, #20]
 800c2e2:	9104      	str	r1, [sp, #16]
 800c2e4:	f7ff fd5e 	bl	800bda4 <__hexdig_fun>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d14f      	bne.n	800c38c <__hexnan+0xe4>
 800c2ec:	9904      	ldr	r1, [sp, #16]
 800c2ee:	9a05      	ldr	r2, [sp, #20]
 800c2f0:	2920      	cmp	r1, #32
 800c2f2:	d818      	bhi.n	800c326 <__hexnan+0x7e>
 800c2f4:	9b02      	ldr	r3, [sp, #8]
 800c2f6:	459b      	cmp	fp, r3
 800c2f8:	dd13      	ble.n	800c322 <__hexnan+0x7a>
 800c2fa:	454c      	cmp	r4, r9
 800c2fc:	d206      	bcs.n	800c30c <__hexnan+0x64>
 800c2fe:	2d07      	cmp	r5, #7
 800c300:	dc04      	bgt.n	800c30c <__hexnan+0x64>
 800c302:	462a      	mov	r2, r5
 800c304:	4649      	mov	r1, r9
 800c306:	4620      	mov	r0, r4
 800c308:	f7ff ffa8 	bl	800c25c <L_shift>
 800c30c:	4544      	cmp	r4, r8
 800c30e:	d950      	bls.n	800c3b2 <__hexnan+0x10a>
 800c310:	2300      	movs	r3, #0
 800c312:	f1a4 0904 	sub.w	r9, r4, #4
 800c316:	f844 3c04 	str.w	r3, [r4, #-4]
 800c31a:	f8cd b008 	str.w	fp, [sp, #8]
 800c31e:	464c      	mov	r4, r9
 800c320:	461d      	mov	r5, r3
 800c322:	9a03      	ldr	r2, [sp, #12]
 800c324:	e7d7      	b.n	800c2d6 <__hexnan+0x2e>
 800c326:	2929      	cmp	r1, #41	; 0x29
 800c328:	d156      	bne.n	800c3d8 <__hexnan+0x130>
 800c32a:	3202      	adds	r2, #2
 800c32c:	f8ca 2000 	str.w	r2, [sl]
 800c330:	f1bb 0f00 	cmp.w	fp, #0
 800c334:	d050      	beq.n	800c3d8 <__hexnan+0x130>
 800c336:	454c      	cmp	r4, r9
 800c338:	d206      	bcs.n	800c348 <__hexnan+0xa0>
 800c33a:	2d07      	cmp	r5, #7
 800c33c:	dc04      	bgt.n	800c348 <__hexnan+0xa0>
 800c33e:	462a      	mov	r2, r5
 800c340:	4649      	mov	r1, r9
 800c342:	4620      	mov	r0, r4
 800c344:	f7ff ff8a 	bl	800c25c <L_shift>
 800c348:	4544      	cmp	r4, r8
 800c34a:	d934      	bls.n	800c3b6 <__hexnan+0x10e>
 800c34c:	f1a8 0204 	sub.w	r2, r8, #4
 800c350:	4623      	mov	r3, r4
 800c352:	f853 1b04 	ldr.w	r1, [r3], #4
 800c356:	f842 1f04 	str.w	r1, [r2, #4]!
 800c35a:	429f      	cmp	r7, r3
 800c35c:	d2f9      	bcs.n	800c352 <__hexnan+0xaa>
 800c35e:	1b3b      	subs	r3, r7, r4
 800c360:	f023 0303 	bic.w	r3, r3, #3
 800c364:	3304      	adds	r3, #4
 800c366:	3401      	adds	r4, #1
 800c368:	3e03      	subs	r6, #3
 800c36a:	42b4      	cmp	r4, r6
 800c36c:	bf88      	it	hi
 800c36e:	2304      	movhi	r3, #4
 800c370:	4443      	add	r3, r8
 800c372:	2200      	movs	r2, #0
 800c374:	f843 2b04 	str.w	r2, [r3], #4
 800c378:	429f      	cmp	r7, r3
 800c37a:	d2fb      	bcs.n	800c374 <__hexnan+0xcc>
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	b91b      	cbnz	r3, 800c388 <__hexnan+0xe0>
 800c380:	4547      	cmp	r7, r8
 800c382:	d127      	bne.n	800c3d4 <__hexnan+0x12c>
 800c384:	2301      	movs	r3, #1
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	2005      	movs	r0, #5
 800c38a:	e026      	b.n	800c3da <__hexnan+0x132>
 800c38c:	3501      	adds	r5, #1
 800c38e:	2d08      	cmp	r5, #8
 800c390:	f10b 0b01 	add.w	fp, fp, #1
 800c394:	dd06      	ble.n	800c3a4 <__hexnan+0xfc>
 800c396:	4544      	cmp	r4, r8
 800c398:	d9c3      	bls.n	800c322 <__hexnan+0x7a>
 800c39a:	2300      	movs	r3, #0
 800c39c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3a0:	2501      	movs	r5, #1
 800c3a2:	3c04      	subs	r4, #4
 800c3a4:	6822      	ldr	r2, [r4, #0]
 800c3a6:	f000 000f 	and.w	r0, r0, #15
 800c3aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c3ae:	6022      	str	r2, [r4, #0]
 800c3b0:	e7b7      	b.n	800c322 <__hexnan+0x7a>
 800c3b2:	2508      	movs	r5, #8
 800c3b4:	e7b5      	b.n	800c322 <__hexnan+0x7a>
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0df      	beq.n	800c37c <__hexnan+0xd4>
 800c3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c0:	f1c3 0320 	rsb	r3, r3, #32
 800c3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3cc:	401a      	ands	r2, r3
 800c3ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800c3d2:	e7d3      	b.n	800c37c <__hexnan+0xd4>
 800c3d4:	3f04      	subs	r7, #4
 800c3d6:	e7d1      	b.n	800c37c <__hexnan+0xd4>
 800c3d8:	2004      	movs	r0, #4
 800c3da:	b007      	add	sp, #28
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3e0 <_localeconv_r>:
 800c3e0:	4800      	ldr	r0, [pc, #0]	; (800c3e4 <_localeconv_r+0x4>)
 800c3e2:	4770      	bx	lr
 800c3e4:	20000168 	.word	0x20000168

0800c3e8 <_lseek_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d07      	ldr	r5, [pc, #28]	; (800c408 <_lseek_r+0x20>)
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	602a      	str	r2, [r5, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f7f5 fc76 	bl	8001ce8 <_lseek>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_lseek_r+0x1e>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_lseek_r+0x1e>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20002e78 	.word	0x20002e78

0800c40c <malloc>:
 800c40c:	4b02      	ldr	r3, [pc, #8]	; (800c418 <malloc+0xc>)
 800c40e:	4601      	mov	r1, r0
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	f7fc be95 	b.w	8009140 <_malloc_r>
 800c416:	bf00      	nop
 800c418:	20000010 	.word	0x20000010

0800c41c <__ascii_mbtowc>:
 800c41c:	b082      	sub	sp, #8
 800c41e:	b901      	cbnz	r1, 800c422 <__ascii_mbtowc+0x6>
 800c420:	a901      	add	r1, sp, #4
 800c422:	b142      	cbz	r2, 800c436 <__ascii_mbtowc+0x1a>
 800c424:	b14b      	cbz	r3, 800c43a <__ascii_mbtowc+0x1e>
 800c426:	7813      	ldrb	r3, [r2, #0]
 800c428:	600b      	str	r3, [r1, #0]
 800c42a:	7812      	ldrb	r2, [r2, #0]
 800c42c:	1e10      	subs	r0, r2, #0
 800c42e:	bf18      	it	ne
 800c430:	2001      	movne	r0, #1
 800c432:	b002      	add	sp, #8
 800c434:	4770      	bx	lr
 800c436:	4610      	mov	r0, r2
 800c438:	e7fb      	b.n	800c432 <__ascii_mbtowc+0x16>
 800c43a:	f06f 0001 	mvn.w	r0, #1
 800c43e:	e7f8      	b.n	800c432 <__ascii_mbtowc+0x16>

0800c440 <__malloc_lock>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__malloc_lock+0x8>)
 800c442:	f7fc be44 	b.w	80090ce <__retarget_lock_acquire_recursive>
 800c446:	bf00      	nop
 800c448:	20002e6c 	.word	0x20002e6c

0800c44c <__malloc_unlock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__malloc_unlock+0x8>)
 800c44e:	f7fc be3f 	b.w	80090d0 <__retarget_lock_release_recursive>
 800c452:	bf00      	nop
 800c454:	20002e6c 	.word	0x20002e6c

0800c458 <_Balloc>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	b976      	cbnz	r6, 800c480 <_Balloc+0x28>
 800c462:	2010      	movs	r0, #16
 800c464:	f7ff ffd2 	bl	800c40c <malloc>
 800c468:	4602      	mov	r2, r0
 800c46a:	6260      	str	r0, [r4, #36]	; 0x24
 800c46c:	b920      	cbnz	r0, 800c478 <_Balloc+0x20>
 800c46e:	4b18      	ldr	r3, [pc, #96]	; (800c4d0 <_Balloc+0x78>)
 800c470:	4818      	ldr	r0, [pc, #96]	; (800c4d4 <_Balloc+0x7c>)
 800c472:	2166      	movs	r1, #102	; 0x66
 800c474:	f000 feae 	bl	800d1d4 <__assert_func>
 800c478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c47c:	6006      	str	r6, [r0, #0]
 800c47e:	60c6      	str	r6, [r0, #12]
 800c480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c482:	68f3      	ldr	r3, [r6, #12]
 800c484:	b183      	cbz	r3, 800c4a8 <_Balloc+0x50>
 800c486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c48e:	b9b8      	cbnz	r0, 800c4c0 <_Balloc+0x68>
 800c490:	2101      	movs	r1, #1
 800c492:	fa01 f605 	lsl.w	r6, r1, r5
 800c496:	1d72      	adds	r2, r6, #5
 800c498:	0092      	lsls	r2, r2, #2
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fc9d 	bl	800cdda <_calloc_r>
 800c4a0:	b160      	cbz	r0, 800c4bc <_Balloc+0x64>
 800c4a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4a6:	e00e      	b.n	800c4c6 <_Balloc+0x6e>
 800c4a8:	2221      	movs	r2, #33	; 0x21
 800c4aa:	2104      	movs	r1, #4
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 fc94 	bl	800cdda <_calloc_r>
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	60f0      	str	r0, [r6, #12]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1e4      	bne.n	800c486 <_Balloc+0x2e>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	bd70      	pop	{r4, r5, r6, pc}
 800c4c0:	6802      	ldr	r2, [r0, #0]
 800c4c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4cc:	e7f7      	b.n	800c4be <_Balloc+0x66>
 800c4ce:	bf00      	nop
 800c4d0:	0800dcb6 	.word	0x0800dcb6
 800c4d4:	0800ddb4 	.word	0x0800ddb4

0800c4d8 <_Bfree>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4dc:	4605      	mov	r5, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	b976      	cbnz	r6, 800c500 <_Bfree+0x28>
 800c4e2:	2010      	movs	r0, #16
 800c4e4:	f7ff ff92 	bl	800c40c <malloc>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	6268      	str	r0, [r5, #36]	; 0x24
 800c4ec:	b920      	cbnz	r0, 800c4f8 <_Bfree+0x20>
 800c4ee:	4b09      	ldr	r3, [pc, #36]	; (800c514 <_Bfree+0x3c>)
 800c4f0:	4809      	ldr	r0, [pc, #36]	; (800c518 <_Bfree+0x40>)
 800c4f2:	218a      	movs	r1, #138	; 0x8a
 800c4f4:	f000 fe6e 	bl	800d1d4 <__assert_func>
 800c4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4fc:	6006      	str	r6, [r0, #0]
 800c4fe:	60c6      	str	r6, [r0, #12]
 800c500:	b13c      	cbz	r4, 800c512 <_Bfree+0x3a>
 800c502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c504:	6862      	ldr	r2, [r4, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c50c:	6021      	str	r1, [r4, #0]
 800c50e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c512:	bd70      	pop	{r4, r5, r6, pc}
 800c514:	0800dcb6 	.word	0x0800dcb6
 800c518:	0800ddb4 	.word	0x0800ddb4

0800c51c <__multadd>:
 800c51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c520:	690d      	ldr	r5, [r1, #16]
 800c522:	4607      	mov	r7, r0
 800c524:	460c      	mov	r4, r1
 800c526:	461e      	mov	r6, r3
 800c528:	f101 0c14 	add.w	ip, r1, #20
 800c52c:	2000      	movs	r0, #0
 800c52e:	f8dc 3000 	ldr.w	r3, [ip]
 800c532:	b299      	uxth	r1, r3
 800c534:	fb02 6101 	mla	r1, r2, r1, r6
 800c538:	0c1e      	lsrs	r6, r3, #16
 800c53a:	0c0b      	lsrs	r3, r1, #16
 800c53c:	fb02 3306 	mla	r3, r2, r6, r3
 800c540:	b289      	uxth	r1, r1
 800c542:	3001      	adds	r0, #1
 800c544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c548:	4285      	cmp	r5, r0
 800c54a:	f84c 1b04 	str.w	r1, [ip], #4
 800c54e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c552:	dcec      	bgt.n	800c52e <__multadd+0x12>
 800c554:	b30e      	cbz	r6, 800c59a <__multadd+0x7e>
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	42ab      	cmp	r3, r5
 800c55a:	dc19      	bgt.n	800c590 <__multadd+0x74>
 800c55c:	6861      	ldr	r1, [r4, #4]
 800c55e:	4638      	mov	r0, r7
 800c560:	3101      	adds	r1, #1
 800c562:	f7ff ff79 	bl	800c458 <_Balloc>
 800c566:	4680      	mov	r8, r0
 800c568:	b928      	cbnz	r0, 800c576 <__multadd+0x5a>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <__multadd+0x84>)
 800c56e:	480d      	ldr	r0, [pc, #52]	; (800c5a4 <__multadd+0x88>)
 800c570:	21b5      	movs	r1, #181	; 0xb5
 800c572:	f000 fe2f 	bl	800d1d4 <__assert_func>
 800c576:	6922      	ldr	r2, [r4, #16]
 800c578:	3202      	adds	r2, #2
 800c57a:	f104 010c 	add.w	r1, r4, #12
 800c57e:	0092      	lsls	r2, r2, #2
 800c580:	300c      	adds	r0, #12
 800c582:	f7fc fda6 	bl	80090d2 <memcpy>
 800c586:	4621      	mov	r1, r4
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff ffa5 	bl	800c4d8 <_Bfree>
 800c58e:	4644      	mov	r4, r8
 800c590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c594:	3501      	adds	r5, #1
 800c596:	615e      	str	r6, [r3, #20]
 800c598:	6125      	str	r5, [r4, #16]
 800c59a:	4620      	mov	r0, r4
 800c59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a0:	0800dd28 	.word	0x0800dd28
 800c5a4:	0800ddb4 	.word	0x0800ddb4

0800c5a8 <__s2b>:
 800c5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	4615      	mov	r5, r2
 800c5b0:	461f      	mov	r7, r3
 800c5b2:	2209      	movs	r2, #9
 800c5b4:	3308      	adds	r3, #8
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5bc:	2100      	movs	r1, #0
 800c5be:	2201      	movs	r2, #1
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	db09      	blt.n	800c5d8 <__s2b+0x30>
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff ff47 	bl	800c458 <_Balloc>
 800c5ca:	b940      	cbnz	r0, 800c5de <__s2b+0x36>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	4b19      	ldr	r3, [pc, #100]	; (800c634 <__s2b+0x8c>)
 800c5d0:	4819      	ldr	r0, [pc, #100]	; (800c638 <__s2b+0x90>)
 800c5d2:	21ce      	movs	r1, #206	; 0xce
 800c5d4:	f000 fdfe 	bl	800d1d4 <__assert_func>
 800c5d8:	0052      	lsls	r2, r2, #1
 800c5da:	3101      	adds	r1, #1
 800c5dc:	e7f0      	b.n	800c5c0 <__s2b+0x18>
 800c5de:	9b08      	ldr	r3, [sp, #32]
 800c5e0:	6143      	str	r3, [r0, #20]
 800c5e2:	2d09      	cmp	r5, #9
 800c5e4:	f04f 0301 	mov.w	r3, #1
 800c5e8:	6103      	str	r3, [r0, #16]
 800c5ea:	dd16      	ble.n	800c61a <__s2b+0x72>
 800c5ec:	f104 0909 	add.w	r9, r4, #9
 800c5f0:	46c8      	mov	r8, r9
 800c5f2:	442c      	add	r4, r5
 800c5f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	3b30      	subs	r3, #48	; 0x30
 800c5fc:	220a      	movs	r2, #10
 800c5fe:	4630      	mov	r0, r6
 800c600:	f7ff ff8c 	bl	800c51c <__multadd>
 800c604:	45a0      	cmp	r8, r4
 800c606:	d1f5      	bne.n	800c5f4 <__s2b+0x4c>
 800c608:	f1a5 0408 	sub.w	r4, r5, #8
 800c60c:	444c      	add	r4, r9
 800c60e:	1b2d      	subs	r5, r5, r4
 800c610:	1963      	adds	r3, r4, r5
 800c612:	42bb      	cmp	r3, r7
 800c614:	db04      	blt.n	800c620 <__s2b+0x78>
 800c616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c61a:	340a      	adds	r4, #10
 800c61c:	2509      	movs	r5, #9
 800c61e:	e7f6      	b.n	800c60e <__s2b+0x66>
 800c620:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c624:	4601      	mov	r1, r0
 800c626:	3b30      	subs	r3, #48	; 0x30
 800c628:	220a      	movs	r2, #10
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ff76 	bl	800c51c <__multadd>
 800c630:	e7ee      	b.n	800c610 <__s2b+0x68>
 800c632:	bf00      	nop
 800c634:	0800dd28 	.word	0x0800dd28
 800c638:	0800ddb4 	.word	0x0800ddb4

0800c63c <__hi0bits>:
 800c63c:	0c03      	lsrs	r3, r0, #16
 800c63e:	041b      	lsls	r3, r3, #16
 800c640:	b9d3      	cbnz	r3, 800c678 <__hi0bits+0x3c>
 800c642:	0400      	lsls	r0, r0, #16
 800c644:	2310      	movs	r3, #16
 800c646:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c64a:	bf04      	itt	eq
 800c64c:	0200      	lsleq	r0, r0, #8
 800c64e:	3308      	addeq	r3, #8
 800c650:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c654:	bf04      	itt	eq
 800c656:	0100      	lsleq	r0, r0, #4
 800c658:	3304      	addeq	r3, #4
 800c65a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c65e:	bf04      	itt	eq
 800c660:	0080      	lsleq	r0, r0, #2
 800c662:	3302      	addeq	r3, #2
 800c664:	2800      	cmp	r0, #0
 800c666:	db05      	blt.n	800c674 <__hi0bits+0x38>
 800c668:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c66c:	f103 0301 	add.w	r3, r3, #1
 800c670:	bf08      	it	eq
 800c672:	2320      	moveq	r3, #32
 800c674:	4618      	mov	r0, r3
 800c676:	4770      	bx	lr
 800c678:	2300      	movs	r3, #0
 800c67a:	e7e4      	b.n	800c646 <__hi0bits+0xa>

0800c67c <__lo0bits>:
 800c67c:	6803      	ldr	r3, [r0, #0]
 800c67e:	f013 0207 	ands.w	r2, r3, #7
 800c682:	4601      	mov	r1, r0
 800c684:	d00b      	beq.n	800c69e <__lo0bits+0x22>
 800c686:	07da      	lsls	r2, r3, #31
 800c688:	d423      	bmi.n	800c6d2 <__lo0bits+0x56>
 800c68a:	0798      	lsls	r0, r3, #30
 800c68c:	bf49      	itett	mi
 800c68e:	085b      	lsrmi	r3, r3, #1
 800c690:	089b      	lsrpl	r3, r3, #2
 800c692:	2001      	movmi	r0, #1
 800c694:	600b      	strmi	r3, [r1, #0]
 800c696:	bf5c      	itt	pl
 800c698:	600b      	strpl	r3, [r1, #0]
 800c69a:	2002      	movpl	r0, #2
 800c69c:	4770      	bx	lr
 800c69e:	b298      	uxth	r0, r3
 800c6a0:	b9a8      	cbnz	r0, 800c6ce <__lo0bits+0x52>
 800c6a2:	0c1b      	lsrs	r3, r3, #16
 800c6a4:	2010      	movs	r0, #16
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	b90a      	cbnz	r2, 800c6ae <__lo0bits+0x32>
 800c6aa:	3008      	adds	r0, #8
 800c6ac:	0a1b      	lsrs	r3, r3, #8
 800c6ae:	071a      	lsls	r2, r3, #28
 800c6b0:	bf04      	itt	eq
 800c6b2:	091b      	lsreq	r3, r3, #4
 800c6b4:	3004      	addeq	r0, #4
 800c6b6:	079a      	lsls	r2, r3, #30
 800c6b8:	bf04      	itt	eq
 800c6ba:	089b      	lsreq	r3, r3, #2
 800c6bc:	3002      	addeq	r0, #2
 800c6be:	07da      	lsls	r2, r3, #31
 800c6c0:	d403      	bmi.n	800c6ca <__lo0bits+0x4e>
 800c6c2:	085b      	lsrs	r3, r3, #1
 800c6c4:	f100 0001 	add.w	r0, r0, #1
 800c6c8:	d005      	beq.n	800c6d6 <__lo0bits+0x5a>
 800c6ca:	600b      	str	r3, [r1, #0]
 800c6cc:	4770      	bx	lr
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	e7e9      	b.n	800c6a6 <__lo0bits+0x2a>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	4770      	bx	lr
 800c6d6:	2020      	movs	r0, #32
 800c6d8:	4770      	bx	lr
	...

0800c6dc <__i2b>:
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	460c      	mov	r4, r1
 800c6e0:	2101      	movs	r1, #1
 800c6e2:	f7ff feb9 	bl	800c458 <_Balloc>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	b928      	cbnz	r0, 800c6f6 <__i2b+0x1a>
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <__i2b+0x24>)
 800c6ec:	4805      	ldr	r0, [pc, #20]	; (800c704 <__i2b+0x28>)
 800c6ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6f2:	f000 fd6f 	bl	800d1d4 <__assert_func>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	6144      	str	r4, [r0, #20]
 800c6fa:	6103      	str	r3, [r0, #16]
 800c6fc:	bd10      	pop	{r4, pc}
 800c6fe:	bf00      	nop
 800c700:	0800dd28 	.word	0x0800dd28
 800c704:	0800ddb4 	.word	0x0800ddb4

0800c708 <__multiply>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	4691      	mov	r9, r2
 800c70e:	690a      	ldr	r2, [r1, #16]
 800c710:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c714:	429a      	cmp	r2, r3
 800c716:	bfb8      	it	lt
 800c718:	460b      	movlt	r3, r1
 800c71a:	460c      	mov	r4, r1
 800c71c:	bfbc      	itt	lt
 800c71e:	464c      	movlt	r4, r9
 800c720:	4699      	movlt	r9, r3
 800c722:	6927      	ldr	r7, [r4, #16]
 800c724:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c728:	68a3      	ldr	r3, [r4, #8]
 800c72a:	6861      	ldr	r1, [r4, #4]
 800c72c:	eb07 060a 	add.w	r6, r7, sl
 800c730:	42b3      	cmp	r3, r6
 800c732:	b085      	sub	sp, #20
 800c734:	bfb8      	it	lt
 800c736:	3101      	addlt	r1, #1
 800c738:	f7ff fe8e 	bl	800c458 <_Balloc>
 800c73c:	b930      	cbnz	r0, 800c74c <__multiply+0x44>
 800c73e:	4602      	mov	r2, r0
 800c740:	4b44      	ldr	r3, [pc, #272]	; (800c854 <__multiply+0x14c>)
 800c742:	4845      	ldr	r0, [pc, #276]	; (800c858 <__multiply+0x150>)
 800c744:	f240 115d 	movw	r1, #349	; 0x15d
 800c748:	f000 fd44 	bl	800d1d4 <__assert_func>
 800c74c:	f100 0514 	add.w	r5, r0, #20
 800c750:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c754:	462b      	mov	r3, r5
 800c756:	2200      	movs	r2, #0
 800c758:	4543      	cmp	r3, r8
 800c75a:	d321      	bcc.n	800c7a0 <__multiply+0x98>
 800c75c:	f104 0314 	add.w	r3, r4, #20
 800c760:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c764:	f109 0314 	add.w	r3, r9, #20
 800c768:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c76c:	9202      	str	r2, [sp, #8]
 800c76e:	1b3a      	subs	r2, r7, r4
 800c770:	3a15      	subs	r2, #21
 800c772:	f022 0203 	bic.w	r2, r2, #3
 800c776:	3204      	adds	r2, #4
 800c778:	f104 0115 	add.w	r1, r4, #21
 800c77c:	428f      	cmp	r7, r1
 800c77e:	bf38      	it	cc
 800c780:	2204      	movcc	r2, #4
 800c782:	9201      	str	r2, [sp, #4]
 800c784:	9a02      	ldr	r2, [sp, #8]
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d80c      	bhi.n	800c7a6 <__multiply+0x9e>
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	dd03      	ble.n	800c798 <__multiply+0x90>
 800c790:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c794:	2b00      	cmp	r3, #0
 800c796:	d05a      	beq.n	800c84e <__multiply+0x146>
 800c798:	6106      	str	r6, [r0, #16]
 800c79a:	b005      	add	sp, #20
 800c79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a0:	f843 2b04 	str.w	r2, [r3], #4
 800c7a4:	e7d8      	b.n	800c758 <__multiply+0x50>
 800c7a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7aa:	f1ba 0f00 	cmp.w	sl, #0
 800c7ae:	d024      	beq.n	800c7fa <__multiply+0xf2>
 800c7b0:	f104 0e14 	add.w	lr, r4, #20
 800c7b4:	46a9      	mov	r9, r5
 800c7b6:	f04f 0c00 	mov.w	ip, #0
 800c7ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7be:	f8d9 1000 	ldr.w	r1, [r9]
 800c7c2:	fa1f fb82 	uxth.w	fp, r2
 800c7c6:	b289      	uxth	r1, r1
 800c7c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7d0:	f8d9 2000 	ldr.w	r2, [r9]
 800c7d4:	4461      	add	r1, ip
 800c7d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7da:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7e2:	b289      	uxth	r1, r1
 800c7e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7e8:	4577      	cmp	r7, lr
 800c7ea:	f849 1b04 	str.w	r1, [r9], #4
 800c7ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7f2:	d8e2      	bhi.n	800c7ba <__multiply+0xb2>
 800c7f4:	9a01      	ldr	r2, [sp, #4]
 800c7f6:	f845 c002 	str.w	ip, [r5, r2]
 800c7fa:	9a03      	ldr	r2, [sp, #12]
 800c7fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c800:	3304      	adds	r3, #4
 800c802:	f1b9 0f00 	cmp.w	r9, #0
 800c806:	d020      	beq.n	800c84a <__multiply+0x142>
 800c808:	6829      	ldr	r1, [r5, #0]
 800c80a:	f104 0c14 	add.w	ip, r4, #20
 800c80e:	46ae      	mov	lr, r5
 800c810:	f04f 0a00 	mov.w	sl, #0
 800c814:	f8bc b000 	ldrh.w	fp, [ip]
 800c818:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c81c:	fb09 220b 	mla	r2, r9, fp, r2
 800c820:	4492      	add	sl, r2
 800c822:	b289      	uxth	r1, r1
 800c824:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c828:	f84e 1b04 	str.w	r1, [lr], #4
 800c82c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c830:	f8be 1000 	ldrh.w	r1, [lr]
 800c834:	0c12      	lsrs	r2, r2, #16
 800c836:	fb09 1102 	mla	r1, r9, r2, r1
 800c83a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c83e:	4567      	cmp	r7, ip
 800c840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c844:	d8e6      	bhi.n	800c814 <__multiply+0x10c>
 800c846:	9a01      	ldr	r2, [sp, #4]
 800c848:	50a9      	str	r1, [r5, r2]
 800c84a:	3504      	adds	r5, #4
 800c84c:	e79a      	b.n	800c784 <__multiply+0x7c>
 800c84e:	3e01      	subs	r6, #1
 800c850:	e79c      	b.n	800c78c <__multiply+0x84>
 800c852:	bf00      	nop
 800c854:	0800dd28 	.word	0x0800dd28
 800c858:	0800ddb4 	.word	0x0800ddb4

0800c85c <__pow5mult>:
 800c85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c860:	4615      	mov	r5, r2
 800c862:	f012 0203 	ands.w	r2, r2, #3
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	d007      	beq.n	800c87c <__pow5mult+0x20>
 800c86c:	4c25      	ldr	r4, [pc, #148]	; (800c904 <__pow5mult+0xa8>)
 800c86e:	3a01      	subs	r2, #1
 800c870:	2300      	movs	r3, #0
 800c872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c876:	f7ff fe51 	bl	800c51c <__multadd>
 800c87a:	4607      	mov	r7, r0
 800c87c:	10ad      	asrs	r5, r5, #2
 800c87e:	d03d      	beq.n	800c8fc <__pow5mult+0xa0>
 800c880:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c882:	b97c      	cbnz	r4, 800c8a4 <__pow5mult+0x48>
 800c884:	2010      	movs	r0, #16
 800c886:	f7ff fdc1 	bl	800c40c <malloc>
 800c88a:	4602      	mov	r2, r0
 800c88c:	6270      	str	r0, [r6, #36]	; 0x24
 800c88e:	b928      	cbnz	r0, 800c89c <__pow5mult+0x40>
 800c890:	4b1d      	ldr	r3, [pc, #116]	; (800c908 <__pow5mult+0xac>)
 800c892:	481e      	ldr	r0, [pc, #120]	; (800c90c <__pow5mult+0xb0>)
 800c894:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c898:	f000 fc9c 	bl	800d1d4 <__assert_func>
 800c89c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8a0:	6004      	str	r4, [r0, #0]
 800c8a2:	60c4      	str	r4, [r0, #12]
 800c8a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8ac:	b94c      	cbnz	r4, 800c8c2 <__pow5mult+0x66>
 800c8ae:	f240 2171 	movw	r1, #625	; 0x271
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7ff ff12 	bl	800c6dc <__i2b>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8be:	4604      	mov	r4, r0
 800c8c0:	6003      	str	r3, [r0, #0]
 800c8c2:	f04f 0900 	mov.w	r9, #0
 800c8c6:	07eb      	lsls	r3, r5, #31
 800c8c8:	d50a      	bpl.n	800c8e0 <__pow5mult+0x84>
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff ff1a 	bl	800c708 <__multiply>
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	4680      	mov	r8, r0
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f7ff fdfd 	bl	800c4d8 <_Bfree>
 800c8de:	4647      	mov	r7, r8
 800c8e0:	106d      	asrs	r5, r5, #1
 800c8e2:	d00b      	beq.n	800c8fc <__pow5mult+0xa0>
 800c8e4:	6820      	ldr	r0, [r4, #0]
 800c8e6:	b938      	cbnz	r0, 800c8f8 <__pow5mult+0x9c>
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff ff0b 	bl	800c708 <__multiply>
 800c8f2:	6020      	str	r0, [r4, #0]
 800c8f4:	f8c0 9000 	str.w	r9, [r0]
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	e7e4      	b.n	800c8c6 <__pow5mult+0x6a>
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c902:	bf00      	nop
 800c904:	0800df00 	.word	0x0800df00
 800c908:	0800dcb6 	.word	0x0800dcb6
 800c90c:	0800ddb4 	.word	0x0800ddb4

0800c910 <__lshift>:
 800c910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	460c      	mov	r4, r1
 800c916:	6849      	ldr	r1, [r1, #4]
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c91e:	68a3      	ldr	r3, [r4, #8]
 800c920:	4607      	mov	r7, r0
 800c922:	4691      	mov	r9, r2
 800c924:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c928:	f108 0601 	add.w	r6, r8, #1
 800c92c:	42b3      	cmp	r3, r6
 800c92e:	db0b      	blt.n	800c948 <__lshift+0x38>
 800c930:	4638      	mov	r0, r7
 800c932:	f7ff fd91 	bl	800c458 <_Balloc>
 800c936:	4605      	mov	r5, r0
 800c938:	b948      	cbnz	r0, 800c94e <__lshift+0x3e>
 800c93a:	4602      	mov	r2, r0
 800c93c:	4b2a      	ldr	r3, [pc, #168]	; (800c9e8 <__lshift+0xd8>)
 800c93e:	482b      	ldr	r0, [pc, #172]	; (800c9ec <__lshift+0xdc>)
 800c940:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c944:	f000 fc46 	bl	800d1d4 <__assert_func>
 800c948:	3101      	adds	r1, #1
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	e7ee      	b.n	800c92c <__lshift+0x1c>
 800c94e:	2300      	movs	r3, #0
 800c950:	f100 0114 	add.w	r1, r0, #20
 800c954:	f100 0210 	add.w	r2, r0, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	4553      	cmp	r3, sl
 800c95c:	db37      	blt.n	800c9ce <__lshift+0xbe>
 800c95e:	6920      	ldr	r0, [r4, #16]
 800c960:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c964:	f104 0314 	add.w	r3, r4, #20
 800c968:	f019 091f 	ands.w	r9, r9, #31
 800c96c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c970:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c974:	d02f      	beq.n	800c9d6 <__lshift+0xc6>
 800c976:	f1c9 0e20 	rsb	lr, r9, #32
 800c97a:	468a      	mov	sl, r1
 800c97c:	f04f 0c00 	mov.w	ip, #0
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	fa02 f209 	lsl.w	r2, r2, r9
 800c986:	ea42 020c 	orr.w	r2, r2, ip
 800c98a:	f84a 2b04 	str.w	r2, [sl], #4
 800c98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c992:	4298      	cmp	r0, r3
 800c994:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c998:	d8f2      	bhi.n	800c980 <__lshift+0x70>
 800c99a:	1b03      	subs	r3, r0, r4
 800c99c:	3b15      	subs	r3, #21
 800c99e:	f023 0303 	bic.w	r3, r3, #3
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	f104 0215 	add.w	r2, r4, #21
 800c9a8:	4290      	cmp	r0, r2
 800c9aa:	bf38      	it	cc
 800c9ac:	2304      	movcc	r3, #4
 800c9ae:	f841 c003 	str.w	ip, [r1, r3]
 800c9b2:	f1bc 0f00 	cmp.w	ip, #0
 800c9b6:	d001      	beq.n	800c9bc <__lshift+0xac>
 800c9b8:	f108 0602 	add.w	r6, r8, #2
 800c9bc:	3e01      	subs	r6, #1
 800c9be:	4638      	mov	r0, r7
 800c9c0:	612e      	str	r6, [r5, #16]
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	f7ff fd88 	bl	800c4d8 <_Bfree>
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	e7c1      	b.n	800c95a <__lshift+0x4a>
 800c9d6:	3904      	subs	r1, #4
 800c9d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9e0:	4298      	cmp	r0, r3
 800c9e2:	d8f9      	bhi.n	800c9d8 <__lshift+0xc8>
 800c9e4:	e7ea      	b.n	800c9bc <__lshift+0xac>
 800c9e6:	bf00      	nop
 800c9e8:	0800dd28 	.word	0x0800dd28
 800c9ec:	0800ddb4 	.word	0x0800ddb4

0800c9f0 <__mcmp>:
 800c9f0:	b530      	push	{r4, r5, lr}
 800c9f2:	6902      	ldr	r2, [r0, #16]
 800c9f4:	690c      	ldr	r4, [r1, #16]
 800c9f6:	1b12      	subs	r2, r2, r4
 800c9f8:	d10e      	bne.n	800ca18 <__mcmp+0x28>
 800c9fa:	f100 0314 	add.w	r3, r0, #20
 800c9fe:	3114      	adds	r1, #20
 800ca00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca10:	42a5      	cmp	r5, r4
 800ca12:	d003      	beq.n	800ca1c <__mcmp+0x2c>
 800ca14:	d305      	bcc.n	800ca22 <__mcmp+0x32>
 800ca16:	2201      	movs	r2, #1
 800ca18:	4610      	mov	r0, r2
 800ca1a:	bd30      	pop	{r4, r5, pc}
 800ca1c:	4283      	cmp	r3, r0
 800ca1e:	d3f3      	bcc.n	800ca08 <__mcmp+0x18>
 800ca20:	e7fa      	b.n	800ca18 <__mcmp+0x28>
 800ca22:	f04f 32ff 	mov.w	r2, #4294967295
 800ca26:	e7f7      	b.n	800ca18 <__mcmp+0x28>

0800ca28 <__mdiff>:
 800ca28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	4606      	mov	r6, r0
 800ca30:	4611      	mov	r1, r2
 800ca32:	4620      	mov	r0, r4
 800ca34:	4690      	mov	r8, r2
 800ca36:	f7ff ffdb 	bl	800c9f0 <__mcmp>
 800ca3a:	1e05      	subs	r5, r0, #0
 800ca3c:	d110      	bne.n	800ca60 <__mdiff+0x38>
 800ca3e:	4629      	mov	r1, r5
 800ca40:	4630      	mov	r0, r6
 800ca42:	f7ff fd09 	bl	800c458 <_Balloc>
 800ca46:	b930      	cbnz	r0, 800ca56 <__mdiff+0x2e>
 800ca48:	4b3a      	ldr	r3, [pc, #232]	; (800cb34 <__mdiff+0x10c>)
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	f240 2132 	movw	r1, #562	; 0x232
 800ca50:	4839      	ldr	r0, [pc, #228]	; (800cb38 <__mdiff+0x110>)
 800ca52:	f000 fbbf 	bl	800d1d4 <__assert_func>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca60:	bfa4      	itt	ge
 800ca62:	4643      	movge	r3, r8
 800ca64:	46a0      	movge	r8, r4
 800ca66:	4630      	mov	r0, r6
 800ca68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca6c:	bfa6      	itte	ge
 800ca6e:	461c      	movge	r4, r3
 800ca70:	2500      	movge	r5, #0
 800ca72:	2501      	movlt	r5, #1
 800ca74:	f7ff fcf0 	bl	800c458 <_Balloc>
 800ca78:	b920      	cbnz	r0, 800ca84 <__mdiff+0x5c>
 800ca7a:	4b2e      	ldr	r3, [pc, #184]	; (800cb34 <__mdiff+0x10c>)
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca82:	e7e5      	b.n	800ca50 <__mdiff+0x28>
 800ca84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca88:	6926      	ldr	r6, [r4, #16]
 800ca8a:	60c5      	str	r5, [r0, #12]
 800ca8c:	f104 0914 	add.w	r9, r4, #20
 800ca90:	f108 0514 	add.w	r5, r8, #20
 800ca94:	f100 0e14 	add.w	lr, r0, #20
 800ca98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caa0:	f108 0210 	add.w	r2, r8, #16
 800caa4:	46f2      	mov	sl, lr
 800caa6:	2100      	movs	r1, #0
 800caa8:	f859 3b04 	ldr.w	r3, [r9], #4
 800caac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cab0:	fa1f f883 	uxth.w	r8, r3
 800cab4:	fa11 f18b 	uxtah	r1, r1, fp
 800cab8:	0c1b      	lsrs	r3, r3, #16
 800caba:	eba1 0808 	sub.w	r8, r1, r8
 800cabe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cac2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cac6:	fa1f f888 	uxth.w	r8, r8
 800caca:	1419      	asrs	r1, r3, #16
 800cacc:	454e      	cmp	r6, r9
 800cace:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cad2:	f84a 3b04 	str.w	r3, [sl], #4
 800cad6:	d8e7      	bhi.n	800caa8 <__mdiff+0x80>
 800cad8:	1b33      	subs	r3, r6, r4
 800cada:	3b15      	subs	r3, #21
 800cadc:	f023 0303 	bic.w	r3, r3, #3
 800cae0:	3304      	adds	r3, #4
 800cae2:	3415      	adds	r4, #21
 800cae4:	42a6      	cmp	r6, r4
 800cae6:	bf38      	it	cc
 800cae8:	2304      	movcc	r3, #4
 800caea:	441d      	add	r5, r3
 800caec:	4473      	add	r3, lr
 800caee:	469e      	mov	lr, r3
 800caf0:	462e      	mov	r6, r5
 800caf2:	4566      	cmp	r6, ip
 800caf4:	d30e      	bcc.n	800cb14 <__mdiff+0xec>
 800caf6:	f10c 0203 	add.w	r2, ip, #3
 800cafa:	1b52      	subs	r2, r2, r5
 800cafc:	f022 0203 	bic.w	r2, r2, #3
 800cb00:	3d03      	subs	r5, #3
 800cb02:	45ac      	cmp	ip, r5
 800cb04:	bf38      	it	cc
 800cb06:	2200      	movcc	r2, #0
 800cb08:	441a      	add	r2, r3
 800cb0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb0e:	b17b      	cbz	r3, 800cb30 <__mdiff+0x108>
 800cb10:	6107      	str	r7, [r0, #16]
 800cb12:	e7a3      	b.n	800ca5c <__mdiff+0x34>
 800cb14:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb18:	fa11 f288 	uxtah	r2, r1, r8
 800cb1c:	1414      	asrs	r4, r2, #16
 800cb1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb22:	b292      	uxth	r2, r2
 800cb24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb28:	f84e 2b04 	str.w	r2, [lr], #4
 800cb2c:	1421      	asrs	r1, r4, #16
 800cb2e:	e7e0      	b.n	800caf2 <__mdiff+0xca>
 800cb30:	3f01      	subs	r7, #1
 800cb32:	e7ea      	b.n	800cb0a <__mdiff+0xe2>
 800cb34:	0800dd28 	.word	0x0800dd28
 800cb38:	0800ddb4 	.word	0x0800ddb4

0800cb3c <__ulp>:
 800cb3c:	b082      	sub	sp, #8
 800cb3e:	ed8d 0b00 	vstr	d0, [sp]
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	4912      	ldr	r1, [pc, #72]	; (800cb90 <__ulp+0x54>)
 800cb46:	4019      	ands	r1, r3
 800cb48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	dd05      	ble.n	800cb5c <__ulp+0x20>
 800cb50:	2200      	movs	r2, #0
 800cb52:	460b      	mov	r3, r1
 800cb54:	ec43 2b10 	vmov	d0, r2, r3
 800cb58:	b002      	add	sp, #8
 800cb5a:	4770      	bx	lr
 800cb5c:	4249      	negs	r1, r1
 800cb5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cb62:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f04f 0300 	mov.w	r3, #0
 800cb6e:	da04      	bge.n	800cb7a <__ulp+0x3e>
 800cb70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb74:	fa41 f300 	asr.w	r3, r1, r0
 800cb78:	e7ec      	b.n	800cb54 <__ulp+0x18>
 800cb7a:	f1a0 0114 	sub.w	r1, r0, #20
 800cb7e:	291e      	cmp	r1, #30
 800cb80:	bfda      	itte	le
 800cb82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb86:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb8a:	2101      	movgt	r1, #1
 800cb8c:	460a      	mov	r2, r1
 800cb8e:	e7e1      	b.n	800cb54 <__ulp+0x18>
 800cb90:	7ff00000 	.word	0x7ff00000

0800cb94 <__b2d>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	6905      	ldr	r5, [r0, #16]
 800cb98:	f100 0714 	add.w	r7, r0, #20
 800cb9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cba0:	1f2e      	subs	r6, r5, #4
 800cba2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff fd48 	bl	800c63c <__hi0bits>
 800cbac:	f1c0 0320 	rsb	r3, r0, #32
 800cbb0:	280a      	cmp	r0, #10
 800cbb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc30 <__b2d+0x9c>
 800cbb6:	600b      	str	r3, [r1, #0]
 800cbb8:	dc14      	bgt.n	800cbe4 <__b2d+0x50>
 800cbba:	f1c0 0e0b 	rsb	lr, r0, #11
 800cbbe:	fa24 f10e 	lsr.w	r1, r4, lr
 800cbc2:	42b7      	cmp	r7, r6
 800cbc4:	ea41 030c 	orr.w	r3, r1, ip
 800cbc8:	bf34      	ite	cc
 800cbca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbce:	2100      	movcs	r1, #0
 800cbd0:	3015      	adds	r0, #21
 800cbd2:	fa04 f000 	lsl.w	r0, r4, r0
 800cbd6:	fa21 f10e 	lsr.w	r1, r1, lr
 800cbda:	ea40 0201 	orr.w	r2, r0, r1
 800cbde:	ec43 2b10 	vmov	d0, r2, r3
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	42b7      	cmp	r7, r6
 800cbe6:	bf3a      	itte	cc
 800cbe8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbec:	f1a5 0608 	subcc.w	r6, r5, #8
 800cbf0:	2100      	movcs	r1, #0
 800cbf2:	380b      	subs	r0, #11
 800cbf4:	d017      	beq.n	800cc26 <__b2d+0x92>
 800cbf6:	f1c0 0c20 	rsb	ip, r0, #32
 800cbfa:	fa04 f500 	lsl.w	r5, r4, r0
 800cbfe:	42be      	cmp	r6, r7
 800cc00:	fa21 f40c 	lsr.w	r4, r1, ip
 800cc04:	ea45 0504 	orr.w	r5, r5, r4
 800cc08:	bf8c      	ite	hi
 800cc0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cc0e:	2400      	movls	r4, #0
 800cc10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cc14:	fa01 f000 	lsl.w	r0, r1, r0
 800cc18:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc20:	ea40 0204 	orr.w	r2, r0, r4
 800cc24:	e7db      	b.n	800cbde <__b2d+0x4a>
 800cc26:	ea44 030c 	orr.w	r3, r4, ip
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	e7d7      	b.n	800cbde <__b2d+0x4a>
 800cc2e:	bf00      	nop
 800cc30:	3ff00000 	.word	0x3ff00000

0800cc34 <__d2b>:
 800cc34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc38:	4689      	mov	r9, r1
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	ec57 6b10 	vmov	r6, r7, d0
 800cc40:	4690      	mov	r8, r2
 800cc42:	f7ff fc09 	bl	800c458 <_Balloc>
 800cc46:	4604      	mov	r4, r0
 800cc48:	b930      	cbnz	r0, 800cc58 <__d2b+0x24>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b25      	ldr	r3, [pc, #148]	; (800cce4 <__d2b+0xb0>)
 800cc4e:	4826      	ldr	r0, [pc, #152]	; (800cce8 <__d2b+0xb4>)
 800cc50:	f240 310a 	movw	r1, #778	; 0x30a
 800cc54:	f000 fabe 	bl	800d1d4 <__assert_func>
 800cc58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc60:	bb35      	cbnz	r5, 800ccb0 <__d2b+0x7c>
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	d028      	beq.n	800ccba <__d2b+0x86>
 800cc68:	4668      	mov	r0, sp
 800cc6a:	9600      	str	r6, [sp, #0]
 800cc6c:	f7ff fd06 	bl	800c67c <__lo0bits>
 800cc70:	9900      	ldr	r1, [sp, #0]
 800cc72:	b300      	cbz	r0, 800ccb6 <__d2b+0x82>
 800cc74:	9a01      	ldr	r2, [sp, #4]
 800cc76:	f1c0 0320 	rsb	r3, r0, #32
 800cc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	40c2      	lsrs	r2, r0
 800cc82:	6163      	str	r3, [r4, #20]
 800cc84:	9201      	str	r2, [sp, #4]
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	61a3      	str	r3, [r4, #24]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	bf14      	ite	ne
 800cc8e:	2202      	movne	r2, #2
 800cc90:	2201      	moveq	r2, #1
 800cc92:	6122      	str	r2, [r4, #16]
 800cc94:	b1d5      	cbz	r5, 800cccc <__d2b+0x98>
 800cc96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc9a:	4405      	add	r5, r0
 800cc9c:	f8c9 5000 	str.w	r5, [r9]
 800cca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cca4:	f8c8 0000 	str.w	r0, [r8]
 800cca8:	4620      	mov	r0, r4
 800ccaa:	b003      	add	sp, #12
 800ccac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccb4:	e7d5      	b.n	800cc62 <__d2b+0x2e>
 800ccb6:	6161      	str	r1, [r4, #20]
 800ccb8:	e7e5      	b.n	800cc86 <__d2b+0x52>
 800ccba:	a801      	add	r0, sp, #4
 800ccbc:	f7ff fcde 	bl	800c67c <__lo0bits>
 800ccc0:	9b01      	ldr	r3, [sp, #4]
 800ccc2:	6163      	str	r3, [r4, #20]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	6122      	str	r2, [r4, #16]
 800ccc8:	3020      	adds	r0, #32
 800ccca:	e7e3      	b.n	800cc94 <__d2b+0x60>
 800cccc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccd4:	f8c9 0000 	str.w	r0, [r9]
 800ccd8:	6918      	ldr	r0, [r3, #16]
 800ccda:	f7ff fcaf 	bl	800c63c <__hi0bits>
 800ccde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cce2:	e7df      	b.n	800cca4 <__d2b+0x70>
 800cce4:	0800dd28 	.word	0x0800dd28
 800cce8:	0800ddb4 	.word	0x0800ddb4

0800ccec <__ratio>:
 800ccec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	4688      	mov	r8, r1
 800ccf2:	4669      	mov	r1, sp
 800ccf4:	4681      	mov	r9, r0
 800ccf6:	f7ff ff4d 	bl	800cb94 <__b2d>
 800ccfa:	a901      	add	r1, sp, #4
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	ec55 4b10 	vmov	r4, r5, d0
 800cd02:	f7ff ff47 	bl	800cb94 <__b2d>
 800cd06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd0e:	eba3 0c02 	sub.w	ip, r3, r2
 800cd12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd16:	1a9b      	subs	r3, r3, r2
 800cd18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd1c:	ec51 0b10 	vmov	r0, r1, d0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	bfd6      	itet	le
 800cd24:	460a      	movle	r2, r1
 800cd26:	462a      	movgt	r2, r5
 800cd28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd2c:	468b      	mov	fp, r1
 800cd2e:	462f      	mov	r7, r5
 800cd30:	bfd4      	ite	le
 800cd32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	ee10 2a10 	vmov	r2, s0
 800cd40:	465b      	mov	r3, fp
 800cd42:	4639      	mov	r1, r7
 800cd44:	f7f3 fdaa 	bl	800089c <__aeabi_ddiv>
 800cd48:	ec41 0b10 	vmov	d0, r0, r1
 800cd4c:	b003      	add	sp, #12
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd52 <__copybits>:
 800cd52:	3901      	subs	r1, #1
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	1149      	asrs	r1, r1, #5
 800cd58:	6914      	ldr	r4, [r2, #16]
 800cd5a:	3101      	adds	r1, #1
 800cd5c:	f102 0314 	add.w	r3, r2, #20
 800cd60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd68:	1f05      	subs	r5, r0, #4
 800cd6a:	42a3      	cmp	r3, r4
 800cd6c:	d30c      	bcc.n	800cd88 <__copybits+0x36>
 800cd6e:	1aa3      	subs	r3, r4, r2
 800cd70:	3b11      	subs	r3, #17
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	3211      	adds	r2, #17
 800cd78:	42a2      	cmp	r2, r4
 800cd7a:	bf88      	it	hi
 800cd7c:	2300      	movhi	r3, #0
 800cd7e:	4418      	add	r0, r3
 800cd80:	2300      	movs	r3, #0
 800cd82:	4288      	cmp	r0, r1
 800cd84:	d305      	bcc.n	800cd92 <__copybits+0x40>
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd90:	e7eb      	b.n	800cd6a <__copybits+0x18>
 800cd92:	f840 3b04 	str.w	r3, [r0], #4
 800cd96:	e7f4      	b.n	800cd82 <__copybits+0x30>

0800cd98 <__any_on>:
 800cd98:	f100 0214 	add.w	r2, r0, #20
 800cd9c:	6900      	ldr	r0, [r0, #16]
 800cd9e:	114b      	asrs	r3, r1, #5
 800cda0:	4298      	cmp	r0, r3
 800cda2:	b510      	push	{r4, lr}
 800cda4:	db11      	blt.n	800cdca <__any_on+0x32>
 800cda6:	dd0a      	ble.n	800cdbe <__any_on+0x26>
 800cda8:	f011 011f 	ands.w	r1, r1, #31
 800cdac:	d007      	beq.n	800cdbe <__any_on+0x26>
 800cdae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdb2:	fa24 f001 	lsr.w	r0, r4, r1
 800cdb6:	fa00 f101 	lsl.w	r1, r0, r1
 800cdba:	428c      	cmp	r4, r1
 800cdbc:	d10b      	bne.n	800cdd6 <__any_on+0x3e>
 800cdbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d803      	bhi.n	800cdce <__any_on+0x36>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	4603      	mov	r3, r0
 800cdcc:	e7f7      	b.n	800cdbe <__any_on+0x26>
 800cdce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdd2:	2900      	cmp	r1, #0
 800cdd4:	d0f5      	beq.n	800cdc2 <__any_on+0x2a>
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	e7f6      	b.n	800cdc8 <__any_on+0x30>

0800cdda <_calloc_r>:
 800cdda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cddc:	fba1 2402 	umull	r2, r4, r1, r2
 800cde0:	b94c      	cbnz	r4, 800cdf6 <_calloc_r+0x1c>
 800cde2:	4611      	mov	r1, r2
 800cde4:	9201      	str	r2, [sp, #4]
 800cde6:	f7fc f9ab 	bl	8009140 <_malloc_r>
 800cdea:	9a01      	ldr	r2, [sp, #4]
 800cdec:	4605      	mov	r5, r0
 800cdee:	b930      	cbnz	r0, 800cdfe <_calloc_r+0x24>
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	b003      	add	sp, #12
 800cdf4:	bd30      	pop	{r4, r5, pc}
 800cdf6:	220c      	movs	r2, #12
 800cdf8:	6002      	str	r2, [r0, #0]
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	e7f8      	b.n	800cdf0 <_calloc_r+0x16>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	f7fc f975 	bl	80090ee <memset>
 800ce04:	e7f4      	b.n	800cdf0 <_calloc_r+0x16>
	...

0800ce08 <_free_r>:
 800ce08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce0a:	2900      	cmp	r1, #0
 800ce0c:	d044      	beq.n	800ce98 <_free_r+0x90>
 800ce0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce12:	9001      	str	r0, [sp, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f1a1 0404 	sub.w	r4, r1, #4
 800ce1a:	bfb8      	it	lt
 800ce1c:	18e4      	addlt	r4, r4, r3
 800ce1e:	f7ff fb0f 	bl	800c440 <__malloc_lock>
 800ce22:	4a1e      	ldr	r2, [pc, #120]	; (800ce9c <_free_r+0x94>)
 800ce24:	9801      	ldr	r0, [sp, #4]
 800ce26:	6813      	ldr	r3, [r2, #0]
 800ce28:	b933      	cbnz	r3, 800ce38 <_free_r+0x30>
 800ce2a:	6063      	str	r3, [r4, #4]
 800ce2c:	6014      	str	r4, [r2, #0]
 800ce2e:	b003      	add	sp, #12
 800ce30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce34:	f7ff bb0a 	b.w	800c44c <__malloc_unlock>
 800ce38:	42a3      	cmp	r3, r4
 800ce3a:	d908      	bls.n	800ce4e <_free_r+0x46>
 800ce3c:	6825      	ldr	r5, [r4, #0]
 800ce3e:	1961      	adds	r1, r4, r5
 800ce40:	428b      	cmp	r3, r1
 800ce42:	bf01      	itttt	eq
 800ce44:	6819      	ldreq	r1, [r3, #0]
 800ce46:	685b      	ldreq	r3, [r3, #4]
 800ce48:	1949      	addeq	r1, r1, r5
 800ce4a:	6021      	streq	r1, [r4, #0]
 800ce4c:	e7ed      	b.n	800ce2a <_free_r+0x22>
 800ce4e:	461a      	mov	r2, r3
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	b10b      	cbz	r3, 800ce58 <_free_r+0x50>
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	d9fa      	bls.n	800ce4e <_free_r+0x46>
 800ce58:	6811      	ldr	r1, [r2, #0]
 800ce5a:	1855      	adds	r5, r2, r1
 800ce5c:	42a5      	cmp	r5, r4
 800ce5e:	d10b      	bne.n	800ce78 <_free_r+0x70>
 800ce60:	6824      	ldr	r4, [r4, #0]
 800ce62:	4421      	add	r1, r4
 800ce64:	1854      	adds	r4, r2, r1
 800ce66:	42a3      	cmp	r3, r4
 800ce68:	6011      	str	r1, [r2, #0]
 800ce6a:	d1e0      	bne.n	800ce2e <_free_r+0x26>
 800ce6c:	681c      	ldr	r4, [r3, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	6053      	str	r3, [r2, #4]
 800ce72:	4421      	add	r1, r4
 800ce74:	6011      	str	r1, [r2, #0]
 800ce76:	e7da      	b.n	800ce2e <_free_r+0x26>
 800ce78:	d902      	bls.n	800ce80 <_free_r+0x78>
 800ce7a:	230c      	movs	r3, #12
 800ce7c:	6003      	str	r3, [r0, #0]
 800ce7e:	e7d6      	b.n	800ce2e <_free_r+0x26>
 800ce80:	6825      	ldr	r5, [r4, #0]
 800ce82:	1961      	adds	r1, r4, r5
 800ce84:	428b      	cmp	r3, r1
 800ce86:	bf04      	itt	eq
 800ce88:	6819      	ldreq	r1, [r3, #0]
 800ce8a:	685b      	ldreq	r3, [r3, #4]
 800ce8c:	6063      	str	r3, [r4, #4]
 800ce8e:	bf04      	itt	eq
 800ce90:	1949      	addeq	r1, r1, r5
 800ce92:	6021      	streq	r1, [r4, #0]
 800ce94:	6054      	str	r4, [r2, #4]
 800ce96:	e7ca      	b.n	800ce2e <_free_r+0x26>
 800ce98:	b003      	add	sp, #12
 800ce9a:	bd30      	pop	{r4, r5, pc}
 800ce9c:	20002e70 	.word	0x20002e70

0800cea0 <__ssputs_r>:
 800cea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea4:	688e      	ldr	r6, [r1, #8]
 800cea6:	429e      	cmp	r6, r3
 800cea8:	4682      	mov	sl, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	4690      	mov	r8, r2
 800ceae:	461f      	mov	r7, r3
 800ceb0:	d838      	bhi.n	800cf24 <__ssputs_r+0x84>
 800ceb2:	898a      	ldrh	r2, [r1, #12]
 800ceb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ceb8:	d032      	beq.n	800cf20 <__ssputs_r+0x80>
 800ceba:	6825      	ldr	r5, [r4, #0]
 800cebc:	6909      	ldr	r1, [r1, #16]
 800cebe:	eba5 0901 	sub.w	r9, r5, r1
 800cec2:	6965      	ldr	r5, [r4, #20]
 800cec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cec8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cecc:	3301      	adds	r3, #1
 800cece:	444b      	add	r3, r9
 800ced0:	106d      	asrs	r5, r5, #1
 800ced2:	429d      	cmp	r5, r3
 800ced4:	bf38      	it	cc
 800ced6:	461d      	movcc	r5, r3
 800ced8:	0553      	lsls	r3, r2, #21
 800ceda:	d531      	bpl.n	800cf40 <__ssputs_r+0xa0>
 800cedc:	4629      	mov	r1, r5
 800cede:	f7fc f92f 	bl	8009140 <_malloc_r>
 800cee2:	4606      	mov	r6, r0
 800cee4:	b950      	cbnz	r0, 800cefc <__ssputs_r+0x5c>
 800cee6:	230c      	movs	r3, #12
 800cee8:	f8ca 3000 	str.w	r3, [sl]
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	f04f 30ff 	mov.w	r0, #4294967295
 800cef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefc:	6921      	ldr	r1, [r4, #16]
 800cefe:	464a      	mov	r2, r9
 800cf00:	f7fc f8e7 	bl	80090d2 <memcpy>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf0e:	81a3      	strh	r3, [r4, #12]
 800cf10:	6126      	str	r6, [r4, #16]
 800cf12:	6165      	str	r5, [r4, #20]
 800cf14:	444e      	add	r6, r9
 800cf16:	eba5 0509 	sub.w	r5, r5, r9
 800cf1a:	6026      	str	r6, [r4, #0]
 800cf1c:	60a5      	str	r5, [r4, #8]
 800cf1e:	463e      	mov	r6, r7
 800cf20:	42be      	cmp	r6, r7
 800cf22:	d900      	bls.n	800cf26 <__ssputs_r+0x86>
 800cf24:	463e      	mov	r6, r7
 800cf26:	6820      	ldr	r0, [r4, #0]
 800cf28:	4632      	mov	r2, r6
 800cf2a:	4641      	mov	r1, r8
 800cf2c:	f000 f982 	bl	800d234 <memmove>
 800cf30:	68a3      	ldr	r3, [r4, #8]
 800cf32:	1b9b      	subs	r3, r3, r6
 800cf34:	60a3      	str	r3, [r4, #8]
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	4433      	add	r3, r6
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	e7db      	b.n	800cef8 <__ssputs_r+0x58>
 800cf40:	462a      	mov	r2, r5
 800cf42:	f000 f991 	bl	800d268 <_realloc_r>
 800cf46:	4606      	mov	r6, r0
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d1e1      	bne.n	800cf10 <__ssputs_r+0x70>
 800cf4c:	6921      	ldr	r1, [r4, #16]
 800cf4e:	4650      	mov	r0, sl
 800cf50:	f7ff ff5a 	bl	800ce08 <_free_r>
 800cf54:	e7c7      	b.n	800cee6 <__ssputs_r+0x46>
	...

0800cf58 <_svfiprintf_r>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	4698      	mov	r8, r3
 800cf5e:	898b      	ldrh	r3, [r1, #12]
 800cf60:	061b      	lsls	r3, r3, #24
 800cf62:	b09d      	sub	sp, #116	; 0x74
 800cf64:	4607      	mov	r7, r0
 800cf66:	460d      	mov	r5, r1
 800cf68:	4614      	mov	r4, r2
 800cf6a:	d50e      	bpl.n	800cf8a <_svfiprintf_r+0x32>
 800cf6c:	690b      	ldr	r3, [r1, #16]
 800cf6e:	b963      	cbnz	r3, 800cf8a <_svfiprintf_r+0x32>
 800cf70:	2140      	movs	r1, #64	; 0x40
 800cf72:	f7fc f8e5 	bl	8009140 <_malloc_r>
 800cf76:	6028      	str	r0, [r5, #0]
 800cf78:	6128      	str	r0, [r5, #16]
 800cf7a:	b920      	cbnz	r0, 800cf86 <_svfiprintf_r+0x2e>
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	e0d1      	b.n	800d12a <_svfiprintf_r+0x1d2>
 800cf86:	2340      	movs	r3, #64	; 0x40
 800cf88:	616b      	str	r3, [r5, #20]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8e:	2320      	movs	r3, #32
 800cf90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf94:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf98:	2330      	movs	r3, #48	; 0x30
 800cf9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d144 <_svfiprintf_r+0x1ec>
 800cf9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa2:	f04f 0901 	mov.w	r9, #1
 800cfa6:	4623      	mov	r3, r4
 800cfa8:	469a      	mov	sl, r3
 800cfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfae:	b10a      	cbz	r2, 800cfb4 <_svfiprintf_r+0x5c>
 800cfb0:	2a25      	cmp	r2, #37	; 0x25
 800cfb2:	d1f9      	bne.n	800cfa8 <_svfiprintf_r+0x50>
 800cfb4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfb8:	d00b      	beq.n	800cfd2 <_svfiprintf_r+0x7a>
 800cfba:	465b      	mov	r3, fp
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff ff6d 	bl	800cea0 <__ssputs_r>
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	f000 80aa 	beq.w	800d120 <_svfiprintf_r+0x1c8>
 800cfcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfce:	445a      	add	r2, fp
 800cfd0:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 80a2 	beq.w	800d120 <_svfiprintf_r+0x1c8>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe6:	f10a 0a01 	add.w	sl, sl, #1
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	9307      	str	r3, [sp, #28]
 800cfee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cff2:	931a      	str	r3, [sp, #104]	; 0x68
 800cff4:	4654      	mov	r4, sl
 800cff6:	2205      	movs	r2, #5
 800cff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffc:	4851      	ldr	r0, [pc, #324]	; (800d144 <_svfiprintf_r+0x1ec>)
 800cffe:	f7f3 f917 	bl	8000230 <memchr>
 800d002:	9a04      	ldr	r2, [sp, #16]
 800d004:	b9d8      	cbnz	r0, 800d03e <_svfiprintf_r+0xe6>
 800d006:	06d0      	lsls	r0, r2, #27
 800d008:	bf44      	itt	mi
 800d00a:	2320      	movmi	r3, #32
 800d00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d010:	0711      	lsls	r1, r2, #28
 800d012:	bf44      	itt	mi
 800d014:	232b      	movmi	r3, #43	; 0x2b
 800d016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d01a:	f89a 3000 	ldrb.w	r3, [sl]
 800d01e:	2b2a      	cmp	r3, #42	; 0x2a
 800d020:	d015      	beq.n	800d04e <_svfiprintf_r+0xf6>
 800d022:	9a07      	ldr	r2, [sp, #28]
 800d024:	4654      	mov	r4, sl
 800d026:	2000      	movs	r0, #0
 800d028:	f04f 0c0a 	mov.w	ip, #10
 800d02c:	4621      	mov	r1, r4
 800d02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d032:	3b30      	subs	r3, #48	; 0x30
 800d034:	2b09      	cmp	r3, #9
 800d036:	d94e      	bls.n	800d0d6 <_svfiprintf_r+0x17e>
 800d038:	b1b0      	cbz	r0, 800d068 <_svfiprintf_r+0x110>
 800d03a:	9207      	str	r2, [sp, #28]
 800d03c:	e014      	b.n	800d068 <_svfiprintf_r+0x110>
 800d03e:	eba0 0308 	sub.w	r3, r0, r8
 800d042:	fa09 f303 	lsl.w	r3, r9, r3
 800d046:	4313      	orrs	r3, r2
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	46a2      	mov	sl, r4
 800d04c:	e7d2      	b.n	800cff4 <_svfiprintf_r+0x9c>
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	1d19      	adds	r1, r3, #4
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	9103      	str	r1, [sp, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	bfbb      	ittet	lt
 800d05a:	425b      	neglt	r3, r3
 800d05c:	f042 0202 	orrlt.w	r2, r2, #2
 800d060:	9307      	strge	r3, [sp, #28]
 800d062:	9307      	strlt	r3, [sp, #28]
 800d064:	bfb8      	it	lt
 800d066:	9204      	strlt	r2, [sp, #16]
 800d068:	7823      	ldrb	r3, [r4, #0]
 800d06a:	2b2e      	cmp	r3, #46	; 0x2e
 800d06c:	d10c      	bne.n	800d088 <_svfiprintf_r+0x130>
 800d06e:	7863      	ldrb	r3, [r4, #1]
 800d070:	2b2a      	cmp	r3, #42	; 0x2a
 800d072:	d135      	bne.n	800d0e0 <_svfiprintf_r+0x188>
 800d074:	9b03      	ldr	r3, [sp, #12]
 800d076:	1d1a      	adds	r2, r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	9203      	str	r2, [sp, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	bfb8      	it	lt
 800d080:	f04f 33ff 	movlt.w	r3, #4294967295
 800d084:	3402      	adds	r4, #2
 800d086:	9305      	str	r3, [sp, #20]
 800d088:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d154 <_svfiprintf_r+0x1fc>
 800d08c:	7821      	ldrb	r1, [r4, #0]
 800d08e:	2203      	movs	r2, #3
 800d090:	4650      	mov	r0, sl
 800d092:	f7f3 f8cd 	bl	8000230 <memchr>
 800d096:	b140      	cbz	r0, 800d0aa <_svfiprintf_r+0x152>
 800d098:	2340      	movs	r3, #64	; 0x40
 800d09a:	eba0 000a 	sub.w	r0, r0, sl
 800d09e:	fa03 f000 	lsl.w	r0, r3, r0
 800d0a2:	9b04      	ldr	r3, [sp, #16]
 800d0a4:	4303      	orrs	r3, r0
 800d0a6:	3401      	adds	r4, #1
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ae:	4826      	ldr	r0, [pc, #152]	; (800d148 <_svfiprintf_r+0x1f0>)
 800d0b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0b4:	2206      	movs	r2, #6
 800d0b6:	f7f3 f8bb 	bl	8000230 <memchr>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d038      	beq.n	800d130 <_svfiprintf_r+0x1d8>
 800d0be:	4b23      	ldr	r3, [pc, #140]	; (800d14c <_svfiprintf_r+0x1f4>)
 800d0c0:	bb1b      	cbnz	r3, 800d10a <_svfiprintf_r+0x1b2>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	3307      	adds	r3, #7
 800d0c6:	f023 0307 	bic.w	r3, r3, #7
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	9303      	str	r3, [sp, #12]
 800d0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d0:	4433      	add	r3, r6
 800d0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d4:	e767      	b.n	800cfa6 <_svfiprintf_r+0x4e>
 800d0d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0da:	460c      	mov	r4, r1
 800d0dc:	2001      	movs	r0, #1
 800d0de:	e7a5      	b.n	800d02c <_svfiprintf_r+0xd4>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	3401      	adds	r4, #1
 800d0e4:	9305      	str	r3, [sp, #20]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	f04f 0c0a 	mov.w	ip, #10
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f2:	3a30      	subs	r2, #48	; 0x30
 800d0f4:	2a09      	cmp	r2, #9
 800d0f6:	d903      	bls.n	800d100 <_svfiprintf_r+0x1a8>
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0c5      	beq.n	800d088 <_svfiprintf_r+0x130>
 800d0fc:	9105      	str	r1, [sp, #20]
 800d0fe:	e7c3      	b.n	800d088 <_svfiprintf_r+0x130>
 800d100:	fb0c 2101 	mla	r1, ip, r1, r2
 800d104:	4604      	mov	r4, r0
 800d106:	2301      	movs	r3, #1
 800d108:	e7f0      	b.n	800d0ec <_svfiprintf_r+0x194>
 800d10a:	ab03      	add	r3, sp, #12
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	462a      	mov	r2, r5
 800d110:	4b0f      	ldr	r3, [pc, #60]	; (800d150 <_svfiprintf_r+0x1f8>)
 800d112:	a904      	add	r1, sp, #16
 800d114:	4638      	mov	r0, r7
 800d116:	f7fc f927 	bl	8009368 <_printf_float>
 800d11a:	1c42      	adds	r2, r0, #1
 800d11c:	4606      	mov	r6, r0
 800d11e:	d1d6      	bne.n	800d0ce <_svfiprintf_r+0x176>
 800d120:	89ab      	ldrh	r3, [r5, #12]
 800d122:	065b      	lsls	r3, r3, #25
 800d124:	f53f af2c 	bmi.w	800cf80 <_svfiprintf_r+0x28>
 800d128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d12a:	b01d      	add	sp, #116	; 0x74
 800d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d130:	ab03      	add	r3, sp, #12
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	462a      	mov	r2, r5
 800d136:	4b06      	ldr	r3, [pc, #24]	; (800d150 <_svfiprintf_r+0x1f8>)
 800d138:	a904      	add	r1, sp, #16
 800d13a:	4638      	mov	r0, r7
 800d13c:	f7fc fbb8 	bl	80098b0 <_printf_i>
 800d140:	e7eb      	b.n	800d11a <_svfiprintf_r+0x1c2>
 800d142:	bf00      	nop
 800d144:	0800df0c 	.word	0x0800df0c
 800d148:	0800df16 	.word	0x0800df16
 800d14c:	08009369 	.word	0x08009369
 800d150:	0800cea1 	.word	0x0800cea1
 800d154:	0800df12 	.word	0x0800df12

0800d158 <_read_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d07      	ldr	r5, [pc, #28]	; (800d178 <_read_r+0x20>)
 800d15c:	4604      	mov	r4, r0
 800d15e:	4608      	mov	r0, r1
 800d160:	4611      	mov	r1, r2
 800d162:	2200      	movs	r2, #0
 800d164:	602a      	str	r2, [r5, #0]
 800d166:	461a      	mov	r2, r3
 800d168:	f7f4 fd5e 	bl	8001c28 <_read>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_read_r+0x1e>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_read_r+0x1e>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	20002e78 	.word	0x20002e78
 800d17c:	00000000 	.word	0x00000000

0800d180 <nan>:
 800d180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d188 <nan+0x8>
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	00000000 	.word	0x00000000
 800d18c:	7ff80000 	.word	0x7ff80000

0800d190 <strncmp>:
 800d190:	b510      	push	{r4, lr}
 800d192:	b17a      	cbz	r2, 800d1b4 <strncmp+0x24>
 800d194:	4603      	mov	r3, r0
 800d196:	3901      	subs	r1, #1
 800d198:	1884      	adds	r4, r0, r2
 800d19a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d19e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d1a2:	4290      	cmp	r0, r2
 800d1a4:	d101      	bne.n	800d1aa <strncmp+0x1a>
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	d101      	bne.n	800d1ae <strncmp+0x1e>
 800d1aa:	1a80      	subs	r0, r0, r2
 800d1ac:	bd10      	pop	{r4, pc}
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d1f3      	bne.n	800d19a <strncmp+0xa>
 800d1b2:	e7fa      	b.n	800d1aa <strncmp+0x1a>
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	e7f9      	b.n	800d1ac <strncmp+0x1c>

0800d1b8 <__ascii_wctomb>:
 800d1b8:	b149      	cbz	r1, 800d1ce <__ascii_wctomb+0x16>
 800d1ba:	2aff      	cmp	r2, #255	; 0xff
 800d1bc:	bf85      	ittet	hi
 800d1be:	238a      	movhi	r3, #138	; 0x8a
 800d1c0:	6003      	strhi	r3, [r0, #0]
 800d1c2:	700a      	strbls	r2, [r1, #0]
 800d1c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1c8:	bf98      	it	ls
 800d1ca:	2001      	movls	r0, #1
 800d1cc:	4770      	bx	lr
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	4770      	bx	lr
	...

0800d1d4 <__assert_func>:
 800d1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1d6:	4614      	mov	r4, r2
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4b09      	ldr	r3, [pc, #36]	; (800d200 <__assert_func+0x2c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4605      	mov	r5, r0
 800d1e0:	68d8      	ldr	r0, [r3, #12]
 800d1e2:	b14c      	cbz	r4, 800d1f8 <__assert_func+0x24>
 800d1e4:	4b07      	ldr	r3, [pc, #28]	; (800d204 <__assert_func+0x30>)
 800d1e6:	9100      	str	r1, [sp, #0]
 800d1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1ec:	4906      	ldr	r1, [pc, #24]	; (800d208 <__assert_func+0x34>)
 800d1ee:	462b      	mov	r3, r5
 800d1f0:	f000 f80e 	bl	800d210 <fiprintf>
 800d1f4:	f000 fa80 	bl	800d6f8 <abort>
 800d1f8:	4b04      	ldr	r3, [pc, #16]	; (800d20c <__assert_func+0x38>)
 800d1fa:	461c      	mov	r4, r3
 800d1fc:	e7f3      	b.n	800d1e6 <__assert_func+0x12>
 800d1fe:	bf00      	nop
 800d200:	20000010 	.word	0x20000010
 800d204:	0800df1d 	.word	0x0800df1d
 800d208:	0800df2a 	.word	0x0800df2a
 800d20c:	0800df58 	.word	0x0800df58

0800d210 <fiprintf>:
 800d210:	b40e      	push	{r1, r2, r3}
 800d212:	b503      	push	{r0, r1, lr}
 800d214:	4601      	mov	r1, r0
 800d216:	ab03      	add	r3, sp, #12
 800d218:	4805      	ldr	r0, [pc, #20]	; (800d230 <fiprintf+0x20>)
 800d21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d21e:	6800      	ldr	r0, [r0, #0]
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	f000 f879 	bl	800d318 <_vfiprintf_r>
 800d226:	b002      	add	sp, #8
 800d228:	f85d eb04 	ldr.w	lr, [sp], #4
 800d22c:	b003      	add	sp, #12
 800d22e:	4770      	bx	lr
 800d230:	20000010 	.word	0x20000010

0800d234 <memmove>:
 800d234:	4288      	cmp	r0, r1
 800d236:	b510      	push	{r4, lr}
 800d238:	eb01 0402 	add.w	r4, r1, r2
 800d23c:	d902      	bls.n	800d244 <memmove+0x10>
 800d23e:	4284      	cmp	r4, r0
 800d240:	4623      	mov	r3, r4
 800d242:	d807      	bhi.n	800d254 <memmove+0x20>
 800d244:	1e43      	subs	r3, r0, #1
 800d246:	42a1      	cmp	r1, r4
 800d248:	d008      	beq.n	800d25c <memmove+0x28>
 800d24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d252:	e7f8      	b.n	800d246 <memmove+0x12>
 800d254:	4402      	add	r2, r0
 800d256:	4601      	mov	r1, r0
 800d258:	428a      	cmp	r2, r1
 800d25a:	d100      	bne.n	800d25e <memmove+0x2a>
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d266:	e7f7      	b.n	800d258 <memmove+0x24>

0800d268 <_realloc_r>:
 800d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	4680      	mov	r8, r0
 800d26e:	4614      	mov	r4, r2
 800d270:	460e      	mov	r6, r1
 800d272:	b921      	cbnz	r1, 800d27e <_realloc_r+0x16>
 800d274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	4611      	mov	r1, r2
 800d27a:	f7fb bf61 	b.w	8009140 <_malloc_r>
 800d27e:	b92a      	cbnz	r2, 800d28c <_realloc_r+0x24>
 800d280:	f7ff fdc2 	bl	800ce08 <_free_r>
 800d284:	4625      	mov	r5, r4
 800d286:	4628      	mov	r0, r5
 800d288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d28c:	f000 faa0 	bl	800d7d0 <_malloc_usable_size_r>
 800d290:	4284      	cmp	r4, r0
 800d292:	4607      	mov	r7, r0
 800d294:	d802      	bhi.n	800d29c <_realloc_r+0x34>
 800d296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d29a:	d812      	bhi.n	800d2c2 <_realloc_r+0x5a>
 800d29c:	4621      	mov	r1, r4
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7fb ff4e 	bl	8009140 <_malloc_r>
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d0ed      	beq.n	800d286 <_realloc_r+0x1e>
 800d2aa:	42bc      	cmp	r4, r7
 800d2ac:	4622      	mov	r2, r4
 800d2ae:	4631      	mov	r1, r6
 800d2b0:	bf28      	it	cs
 800d2b2:	463a      	movcs	r2, r7
 800d2b4:	f7fb ff0d 	bl	80090d2 <memcpy>
 800d2b8:	4631      	mov	r1, r6
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	f7ff fda4 	bl	800ce08 <_free_r>
 800d2c0:	e7e1      	b.n	800d286 <_realloc_r+0x1e>
 800d2c2:	4635      	mov	r5, r6
 800d2c4:	e7df      	b.n	800d286 <_realloc_r+0x1e>

0800d2c6 <__sfputc_r>:
 800d2c6:	6893      	ldr	r3, [r2, #8]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	b410      	push	{r4}
 800d2ce:	6093      	str	r3, [r2, #8]
 800d2d0:	da08      	bge.n	800d2e4 <__sfputc_r+0x1e>
 800d2d2:	6994      	ldr	r4, [r2, #24]
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	db01      	blt.n	800d2dc <__sfputc_r+0x16>
 800d2d8:	290a      	cmp	r1, #10
 800d2da:	d103      	bne.n	800d2e4 <__sfputc_r+0x1e>
 800d2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2e0:	f000 b94a 	b.w	800d578 <__swbuf_r>
 800d2e4:	6813      	ldr	r3, [r2, #0]
 800d2e6:	1c58      	adds	r0, r3, #1
 800d2e8:	6010      	str	r0, [r2, #0]
 800d2ea:	7019      	strb	r1, [r3, #0]
 800d2ec:	4608      	mov	r0, r1
 800d2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <__sfputs_r>:
 800d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	460f      	mov	r7, r1
 800d2fa:	4614      	mov	r4, r2
 800d2fc:	18d5      	adds	r5, r2, r3
 800d2fe:	42ac      	cmp	r4, r5
 800d300:	d101      	bne.n	800d306 <__sfputs_r+0x12>
 800d302:	2000      	movs	r0, #0
 800d304:	e007      	b.n	800d316 <__sfputs_r+0x22>
 800d306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30a:	463a      	mov	r2, r7
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7ff ffda 	bl	800d2c6 <__sfputc_r>
 800d312:	1c43      	adds	r3, r0, #1
 800d314:	d1f3      	bne.n	800d2fe <__sfputs_r+0xa>
 800d316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d318 <_vfiprintf_r>:
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	460d      	mov	r5, r1
 800d31e:	b09d      	sub	sp, #116	; 0x74
 800d320:	4614      	mov	r4, r2
 800d322:	4698      	mov	r8, r3
 800d324:	4606      	mov	r6, r0
 800d326:	b118      	cbz	r0, 800d330 <_vfiprintf_r+0x18>
 800d328:	6983      	ldr	r3, [r0, #24]
 800d32a:	b90b      	cbnz	r3, 800d330 <_vfiprintf_r+0x18>
 800d32c:	f7fb fe0c 	bl	8008f48 <__sinit>
 800d330:	4b89      	ldr	r3, [pc, #548]	; (800d558 <_vfiprintf_r+0x240>)
 800d332:	429d      	cmp	r5, r3
 800d334:	d11b      	bne.n	800d36e <_vfiprintf_r+0x56>
 800d336:	6875      	ldr	r5, [r6, #4]
 800d338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d33a:	07d9      	lsls	r1, r3, #31
 800d33c:	d405      	bmi.n	800d34a <_vfiprintf_r+0x32>
 800d33e:	89ab      	ldrh	r3, [r5, #12]
 800d340:	059a      	lsls	r2, r3, #22
 800d342:	d402      	bmi.n	800d34a <_vfiprintf_r+0x32>
 800d344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d346:	f7fb fec2 	bl	80090ce <__retarget_lock_acquire_recursive>
 800d34a:	89ab      	ldrh	r3, [r5, #12]
 800d34c:	071b      	lsls	r3, r3, #28
 800d34e:	d501      	bpl.n	800d354 <_vfiprintf_r+0x3c>
 800d350:	692b      	ldr	r3, [r5, #16]
 800d352:	b9eb      	cbnz	r3, 800d390 <_vfiprintf_r+0x78>
 800d354:	4629      	mov	r1, r5
 800d356:	4630      	mov	r0, r6
 800d358:	f000 f960 	bl	800d61c <__swsetup_r>
 800d35c:	b1c0      	cbz	r0, 800d390 <_vfiprintf_r+0x78>
 800d35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d360:	07dc      	lsls	r4, r3, #31
 800d362:	d50e      	bpl.n	800d382 <_vfiprintf_r+0x6a>
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	b01d      	add	sp, #116	; 0x74
 800d36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36e:	4b7b      	ldr	r3, [pc, #492]	; (800d55c <_vfiprintf_r+0x244>)
 800d370:	429d      	cmp	r5, r3
 800d372:	d101      	bne.n	800d378 <_vfiprintf_r+0x60>
 800d374:	68b5      	ldr	r5, [r6, #8]
 800d376:	e7df      	b.n	800d338 <_vfiprintf_r+0x20>
 800d378:	4b79      	ldr	r3, [pc, #484]	; (800d560 <_vfiprintf_r+0x248>)
 800d37a:	429d      	cmp	r5, r3
 800d37c:	bf08      	it	eq
 800d37e:	68f5      	ldreq	r5, [r6, #12]
 800d380:	e7da      	b.n	800d338 <_vfiprintf_r+0x20>
 800d382:	89ab      	ldrh	r3, [r5, #12]
 800d384:	0598      	lsls	r0, r3, #22
 800d386:	d4ed      	bmi.n	800d364 <_vfiprintf_r+0x4c>
 800d388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d38a:	f7fb fea1 	bl	80090d0 <__retarget_lock_release_recursive>
 800d38e:	e7e9      	b.n	800d364 <_vfiprintf_r+0x4c>
 800d390:	2300      	movs	r3, #0
 800d392:	9309      	str	r3, [sp, #36]	; 0x24
 800d394:	2320      	movs	r3, #32
 800d396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d39a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d39e:	2330      	movs	r3, #48	; 0x30
 800d3a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d564 <_vfiprintf_r+0x24c>
 800d3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3a8:	f04f 0901 	mov.w	r9, #1
 800d3ac:	4623      	mov	r3, r4
 800d3ae:	469a      	mov	sl, r3
 800d3b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3b4:	b10a      	cbz	r2, 800d3ba <_vfiprintf_r+0xa2>
 800d3b6:	2a25      	cmp	r2, #37	; 0x25
 800d3b8:	d1f9      	bne.n	800d3ae <_vfiprintf_r+0x96>
 800d3ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d3be:	d00b      	beq.n	800d3d8 <_vfiprintf_r+0xc0>
 800d3c0:	465b      	mov	r3, fp
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f7ff ff94 	bl	800d2f4 <__sfputs_r>
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	f000 80aa 	beq.w	800d526 <_vfiprintf_r+0x20e>
 800d3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3d4:	445a      	add	r2, fp
 800d3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d3d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 80a2 	beq.w	800d526 <_vfiprintf_r+0x20e>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3ec:	f10a 0a01 	add.w	sl, sl, #1
 800d3f0:	9304      	str	r3, [sp, #16]
 800d3f2:	9307      	str	r3, [sp, #28]
 800d3f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d3fa:	4654      	mov	r4, sl
 800d3fc:	2205      	movs	r2, #5
 800d3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d402:	4858      	ldr	r0, [pc, #352]	; (800d564 <_vfiprintf_r+0x24c>)
 800d404:	f7f2 ff14 	bl	8000230 <memchr>
 800d408:	9a04      	ldr	r2, [sp, #16]
 800d40a:	b9d8      	cbnz	r0, 800d444 <_vfiprintf_r+0x12c>
 800d40c:	06d1      	lsls	r1, r2, #27
 800d40e:	bf44      	itt	mi
 800d410:	2320      	movmi	r3, #32
 800d412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d416:	0713      	lsls	r3, r2, #28
 800d418:	bf44      	itt	mi
 800d41a:	232b      	movmi	r3, #43	; 0x2b
 800d41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d420:	f89a 3000 	ldrb.w	r3, [sl]
 800d424:	2b2a      	cmp	r3, #42	; 0x2a
 800d426:	d015      	beq.n	800d454 <_vfiprintf_r+0x13c>
 800d428:	9a07      	ldr	r2, [sp, #28]
 800d42a:	4654      	mov	r4, sl
 800d42c:	2000      	movs	r0, #0
 800d42e:	f04f 0c0a 	mov.w	ip, #10
 800d432:	4621      	mov	r1, r4
 800d434:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d438:	3b30      	subs	r3, #48	; 0x30
 800d43a:	2b09      	cmp	r3, #9
 800d43c:	d94e      	bls.n	800d4dc <_vfiprintf_r+0x1c4>
 800d43e:	b1b0      	cbz	r0, 800d46e <_vfiprintf_r+0x156>
 800d440:	9207      	str	r2, [sp, #28]
 800d442:	e014      	b.n	800d46e <_vfiprintf_r+0x156>
 800d444:	eba0 0308 	sub.w	r3, r0, r8
 800d448:	fa09 f303 	lsl.w	r3, r9, r3
 800d44c:	4313      	orrs	r3, r2
 800d44e:	9304      	str	r3, [sp, #16]
 800d450:	46a2      	mov	sl, r4
 800d452:	e7d2      	b.n	800d3fa <_vfiprintf_r+0xe2>
 800d454:	9b03      	ldr	r3, [sp, #12]
 800d456:	1d19      	adds	r1, r3, #4
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	9103      	str	r1, [sp, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	bfbb      	ittet	lt
 800d460:	425b      	neglt	r3, r3
 800d462:	f042 0202 	orrlt.w	r2, r2, #2
 800d466:	9307      	strge	r3, [sp, #28]
 800d468:	9307      	strlt	r3, [sp, #28]
 800d46a:	bfb8      	it	lt
 800d46c:	9204      	strlt	r2, [sp, #16]
 800d46e:	7823      	ldrb	r3, [r4, #0]
 800d470:	2b2e      	cmp	r3, #46	; 0x2e
 800d472:	d10c      	bne.n	800d48e <_vfiprintf_r+0x176>
 800d474:	7863      	ldrb	r3, [r4, #1]
 800d476:	2b2a      	cmp	r3, #42	; 0x2a
 800d478:	d135      	bne.n	800d4e6 <_vfiprintf_r+0x1ce>
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	1d1a      	adds	r2, r3, #4
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	9203      	str	r2, [sp, #12]
 800d482:	2b00      	cmp	r3, #0
 800d484:	bfb8      	it	lt
 800d486:	f04f 33ff 	movlt.w	r3, #4294967295
 800d48a:	3402      	adds	r4, #2
 800d48c:	9305      	str	r3, [sp, #20]
 800d48e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d574 <_vfiprintf_r+0x25c>
 800d492:	7821      	ldrb	r1, [r4, #0]
 800d494:	2203      	movs	r2, #3
 800d496:	4650      	mov	r0, sl
 800d498:	f7f2 feca 	bl	8000230 <memchr>
 800d49c:	b140      	cbz	r0, 800d4b0 <_vfiprintf_r+0x198>
 800d49e:	2340      	movs	r3, #64	; 0x40
 800d4a0:	eba0 000a 	sub.w	r0, r0, sl
 800d4a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d4a8:	9b04      	ldr	r3, [sp, #16]
 800d4aa:	4303      	orrs	r3, r0
 800d4ac:	3401      	adds	r4, #1
 800d4ae:	9304      	str	r3, [sp, #16]
 800d4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b4:	482c      	ldr	r0, [pc, #176]	; (800d568 <_vfiprintf_r+0x250>)
 800d4b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4ba:	2206      	movs	r2, #6
 800d4bc:	f7f2 feb8 	bl	8000230 <memchr>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d03f      	beq.n	800d544 <_vfiprintf_r+0x22c>
 800d4c4:	4b29      	ldr	r3, [pc, #164]	; (800d56c <_vfiprintf_r+0x254>)
 800d4c6:	bb1b      	cbnz	r3, 800d510 <_vfiprintf_r+0x1f8>
 800d4c8:	9b03      	ldr	r3, [sp, #12]
 800d4ca:	3307      	adds	r3, #7
 800d4cc:	f023 0307 	bic.w	r3, r3, #7
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	9303      	str	r3, [sp, #12]
 800d4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d6:	443b      	add	r3, r7
 800d4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4da:	e767      	b.n	800d3ac <_vfiprintf_r+0x94>
 800d4dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4e0:	460c      	mov	r4, r1
 800d4e2:	2001      	movs	r0, #1
 800d4e4:	e7a5      	b.n	800d432 <_vfiprintf_r+0x11a>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	3401      	adds	r4, #1
 800d4ea:	9305      	str	r3, [sp, #20]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	f04f 0c0a 	mov.w	ip, #10
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4f8:	3a30      	subs	r2, #48	; 0x30
 800d4fa:	2a09      	cmp	r2, #9
 800d4fc:	d903      	bls.n	800d506 <_vfiprintf_r+0x1ee>
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0c5      	beq.n	800d48e <_vfiprintf_r+0x176>
 800d502:	9105      	str	r1, [sp, #20]
 800d504:	e7c3      	b.n	800d48e <_vfiprintf_r+0x176>
 800d506:	fb0c 2101 	mla	r1, ip, r1, r2
 800d50a:	4604      	mov	r4, r0
 800d50c:	2301      	movs	r3, #1
 800d50e:	e7f0      	b.n	800d4f2 <_vfiprintf_r+0x1da>
 800d510:	ab03      	add	r3, sp, #12
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	462a      	mov	r2, r5
 800d516:	4b16      	ldr	r3, [pc, #88]	; (800d570 <_vfiprintf_r+0x258>)
 800d518:	a904      	add	r1, sp, #16
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7fb ff24 	bl	8009368 <_printf_float>
 800d520:	4607      	mov	r7, r0
 800d522:	1c78      	adds	r0, r7, #1
 800d524:	d1d6      	bne.n	800d4d4 <_vfiprintf_r+0x1bc>
 800d526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d528:	07d9      	lsls	r1, r3, #31
 800d52a:	d405      	bmi.n	800d538 <_vfiprintf_r+0x220>
 800d52c:	89ab      	ldrh	r3, [r5, #12]
 800d52e:	059a      	lsls	r2, r3, #22
 800d530:	d402      	bmi.n	800d538 <_vfiprintf_r+0x220>
 800d532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d534:	f7fb fdcc 	bl	80090d0 <__retarget_lock_release_recursive>
 800d538:	89ab      	ldrh	r3, [r5, #12]
 800d53a:	065b      	lsls	r3, r3, #25
 800d53c:	f53f af12 	bmi.w	800d364 <_vfiprintf_r+0x4c>
 800d540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d542:	e711      	b.n	800d368 <_vfiprintf_r+0x50>
 800d544:	ab03      	add	r3, sp, #12
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	462a      	mov	r2, r5
 800d54a:	4b09      	ldr	r3, [pc, #36]	; (800d570 <_vfiprintf_r+0x258>)
 800d54c:	a904      	add	r1, sp, #16
 800d54e:	4630      	mov	r0, r6
 800d550:	f7fc f9ae 	bl	80098b0 <_printf_i>
 800d554:	e7e4      	b.n	800d520 <_vfiprintf_r+0x208>
 800d556:	bf00      	nop
 800d558:	0800dad4 	.word	0x0800dad4
 800d55c:	0800daf4 	.word	0x0800daf4
 800d560:	0800dab4 	.word	0x0800dab4
 800d564:	0800df0c 	.word	0x0800df0c
 800d568:	0800df16 	.word	0x0800df16
 800d56c:	08009369 	.word	0x08009369
 800d570:	0800d2f5 	.word	0x0800d2f5
 800d574:	0800df12 	.word	0x0800df12

0800d578 <__swbuf_r>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	460e      	mov	r6, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	4605      	mov	r5, r0
 800d580:	b118      	cbz	r0, 800d58a <__swbuf_r+0x12>
 800d582:	6983      	ldr	r3, [r0, #24]
 800d584:	b90b      	cbnz	r3, 800d58a <__swbuf_r+0x12>
 800d586:	f7fb fcdf 	bl	8008f48 <__sinit>
 800d58a:	4b21      	ldr	r3, [pc, #132]	; (800d610 <__swbuf_r+0x98>)
 800d58c:	429c      	cmp	r4, r3
 800d58e:	d12b      	bne.n	800d5e8 <__swbuf_r+0x70>
 800d590:	686c      	ldr	r4, [r5, #4]
 800d592:	69a3      	ldr	r3, [r4, #24]
 800d594:	60a3      	str	r3, [r4, #8]
 800d596:	89a3      	ldrh	r3, [r4, #12]
 800d598:	071a      	lsls	r2, r3, #28
 800d59a:	d52f      	bpl.n	800d5fc <__swbuf_r+0x84>
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	b36b      	cbz	r3, 800d5fc <__swbuf_r+0x84>
 800d5a0:	6923      	ldr	r3, [r4, #16]
 800d5a2:	6820      	ldr	r0, [r4, #0]
 800d5a4:	1ac0      	subs	r0, r0, r3
 800d5a6:	6963      	ldr	r3, [r4, #20]
 800d5a8:	b2f6      	uxtb	r6, r6
 800d5aa:	4283      	cmp	r3, r0
 800d5ac:	4637      	mov	r7, r6
 800d5ae:	dc04      	bgt.n	800d5ba <__swbuf_r+0x42>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f7fe fb68 	bl	800bc88 <_fflush_r>
 800d5b8:	bb30      	cbnz	r0, 800d608 <__swbuf_r+0x90>
 800d5ba:	68a3      	ldr	r3, [r4, #8]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	60a3      	str	r3, [r4, #8]
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	1c5a      	adds	r2, r3, #1
 800d5c4:	6022      	str	r2, [r4, #0]
 800d5c6:	701e      	strb	r6, [r3, #0]
 800d5c8:	6963      	ldr	r3, [r4, #20]
 800d5ca:	3001      	adds	r0, #1
 800d5cc:	4283      	cmp	r3, r0
 800d5ce:	d004      	beq.n	800d5da <__swbuf_r+0x62>
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	07db      	lsls	r3, r3, #31
 800d5d4:	d506      	bpl.n	800d5e4 <__swbuf_r+0x6c>
 800d5d6:	2e0a      	cmp	r6, #10
 800d5d8:	d104      	bne.n	800d5e4 <__swbuf_r+0x6c>
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f7fe fb53 	bl	800bc88 <_fflush_r>
 800d5e2:	b988      	cbnz	r0, 800d608 <__swbuf_r+0x90>
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5e8:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <__swbuf_r+0x9c>)
 800d5ea:	429c      	cmp	r4, r3
 800d5ec:	d101      	bne.n	800d5f2 <__swbuf_r+0x7a>
 800d5ee:	68ac      	ldr	r4, [r5, #8]
 800d5f0:	e7cf      	b.n	800d592 <__swbuf_r+0x1a>
 800d5f2:	4b09      	ldr	r3, [pc, #36]	; (800d618 <__swbuf_r+0xa0>)
 800d5f4:	429c      	cmp	r4, r3
 800d5f6:	bf08      	it	eq
 800d5f8:	68ec      	ldreq	r4, [r5, #12]
 800d5fa:	e7ca      	b.n	800d592 <__swbuf_r+0x1a>
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4628      	mov	r0, r5
 800d600:	f000 f80c 	bl	800d61c <__swsetup_r>
 800d604:	2800      	cmp	r0, #0
 800d606:	d0cb      	beq.n	800d5a0 <__swbuf_r+0x28>
 800d608:	f04f 37ff 	mov.w	r7, #4294967295
 800d60c:	e7ea      	b.n	800d5e4 <__swbuf_r+0x6c>
 800d60e:	bf00      	nop
 800d610:	0800dad4 	.word	0x0800dad4
 800d614:	0800daf4 	.word	0x0800daf4
 800d618:	0800dab4 	.word	0x0800dab4

0800d61c <__swsetup_r>:
 800d61c:	4b32      	ldr	r3, [pc, #200]	; (800d6e8 <__swsetup_r+0xcc>)
 800d61e:	b570      	push	{r4, r5, r6, lr}
 800d620:	681d      	ldr	r5, [r3, #0]
 800d622:	4606      	mov	r6, r0
 800d624:	460c      	mov	r4, r1
 800d626:	b125      	cbz	r5, 800d632 <__swsetup_r+0x16>
 800d628:	69ab      	ldr	r3, [r5, #24]
 800d62a:	b913      	cbnz	r3, 800d632 <__swsetup_r+0x16>
 800d62c:	4628      	mov	r0, r5
 800d62e:	f7fb fc8b 	bl	8008f48 <__sinit>
 800d632:	4b2e      	ldr	r3, [pc, #184]	; (800d6ec <__swsetup_r+0xd0>)
 800d634:	429c      	cmp	r4, r3
 800d636:	d10f      	bne.n	800d658 <__swsetup_r+0x3c>
 800d638:	686c      	ldr	r4, [r5, #4]
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d640:	0719      	lsls	r1, r3, #28
 800d642:	d42c      	bmi.n	800d69e <__swsetup_r+0x82>
 800d644:	06dd      	lsls	r5, r3, #27
 800d646:	d411      	bmi.n	800d66c <__swsetup_r+0x50>
 800d648:	2309      	movs	r3, #9
 800d64a:	6033      	str	r3, [r6, #0]
 800d64c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d650:	81a3      	strh	r3, [r4, #12]
 800d652:	f04f 30ff 	mov.w	r0, #4294967295
 800d656:	e03e      	b.n	800d6d6 <__swsetup_r+0xba>
 800d658:	4b25      	ldr	r3, [pc, #148]	; (800d6f0 <__swsetup_r+0xd4>)
 800d65a:	429c      	cmp	r4, r3
 800d65c:	d101      	bne.n	800d662 <__swsetup_r+0x46>
 800d65e:	68ac      	ldr	r4, [r5, #8]
 800d660:	e7eb      	b.n	800d63a <__swsetup_r+0x1e>
 800d662:	4b24      	ldr	r3, [pc, #144]	; (800d6f4 <__swsetup_r+0xd8>)
 800d664:	429c      	cmp	r4, r3
 800d666:	bf08      	it	eq
 800d668:	68ec      	ldreq	r4, [r5, #12]
 800d66a:	e7e6      	b.n	800d63a <__swsetup_r+0x1e>
 800d66c:	0758      	lsls	r0, r3, #29
 800d66e:	d512      	bpl.n	800d696 <__swsetup_r+0x7a>
 800d670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d672:	b141      	cbz	r1, 800d686 <__swsetup_r+0x6a>
 800d674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d678:	4299      	cmp	r1, r3
 800d67a:	d002      	beq.n	800d682 <__swsetup_r+0x66>
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7ff fbc3 	bl	800ce08 <_free_r>
 800d682:	2300      	movs	r3, #0
 800d684:	6363      	str	r3, [r4, #52]	; 0x34
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d68c:	81a3      	strh	r3, [r4, #12]
 800d68e:	2300      	movs	r3, #0
 800d690:	6063      	str	r3, [r4, #4]
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f043 0308 	orr.w	r3, r3, #8
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	b94b      	cbnz	r3, 800d6b6 <__swsetup_r+0x9a>
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6ac:	d003      	beq.n	800d6b6 <__swsetup_r+0x9a>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f000 f84d 	bl	800d750 <__smakebuf_r>
 800d6b6:	89a0      	ldrh	r0, [r4, #12]
 800d6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6bc:	f010 0301 	ands.w	r3, r0, #1
 800d6c0:	d00a      	beq.n	800d6d8 <__swsetup_r+0xbc>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60a3      	str	r3, [r4, #8]
 800d6c6:	6963      	ldr	r3, [r4, #20]
 800d6c8:	425b      	negs	r3, r3
 800d6ca:	61a3      	str	r3, [r4, #24]
 800d6cc:	6923      	ldr	r3, [r4, #16]
 800d6ce:	b943      	cbnz	r3, 800d6e2 <__swsetup_r+0xc6>
 800d6d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d6d4:	d1ba      	bne.n	800d64c <__swsetup_r+0x30>
 800d6d6:	bd70      	pop	{r4, r5, r6, pc}
 800d6d8:	0781      	lsls	r1, r0, #30
 800d6da:	bf58      	it	pl
 800d6dc:	6963      	ldrpl	r3, [r4, #20]
 800d6de:	60a3      	str	r3, [r4, #8]
 800d6e0:	e7f4      	b.n	800d6cc <__swsetup_r+0xb0>
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	e7f7      	b.n	800d6d6 <__swsetup_r+0xba>
 800d6e6:	bf00      	nop
 800d6e8:	20000010 	.word	0x20000010
 800d6ec:	0800dad4 	.word	0x0800dad4
 800d6f0:	0800daf4 	.word	0x0800daf4
 800d6f4:	0800dab4 	.word	0x0800dab4

0800d6f8 <abort>:
 800d6f8:	b508      	push	{r3, lr}
 800d6fa:	2006      	movs	r0, #6
 800d6fc:	f000 f898 	bl	800d830 <raise>
 800d700:	2001      	movs	r0, #1
 800d702:	f7f4 fa87 	bl	8001c14 <_exit>

0800d706 <__swhatbuf_r>:
 800d706:	b570      	push	{r4, r5, r6, lr}
 800d708:	460e      	mov	r6, r1
 800d70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d70e:	2900      	cmp	r1, #0
 800d710:	b096      	sub	sp, #88	; 0x58
 800d712:	4614      	mov	r4, r2
 800d714:	461d      	mov	r5, r3
 800d716:	da08      	bge.n	800d72a <__swhatbuf_r+0x24>
 800d718:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	602a      	str	r2, [r5, #0]
 800d720:	061a      	lsls	r2, r3, #24
 800d722:	d410      	bmi.n	800d746 <__swhatbuf_r+0x40>
 800d724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d728:	e00e      	b.n	800d748 <__swhatbuf_r+0x42>
 800d72a:	466a      	mov	r2, sp
 800d72c:	f000 f89c 	bl	800d868 <_fstat_r>
 800d730:	2800      	cmp	r0, #0
 800d732:	dbf1      	blt.n	800d718 <__swhatbuf_r+0x12>
 800d734:	9a01      	ldr	r2, [sp, #4]
 800d736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d73a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d73e:	425a      	negs	r2, r3
 800d740:	415a      	adcs	r2, r3
 800d742:	602a      	str	r2, [r5, #0]
 800d744:	e7ee      	b.n	800d724 <__swhatbuf_r+0x1e>
 800d746:	2340      	movs	r3, #64	; 0x40
 800d748:	2000      	movs	r0, #0
 800d74a:	6023      	str	r3, [r4, #0]
 800d74c:	b016      	add	sp, #88	; 0x58
 800d74e:	bd70      	pop	{r4, r5, r6, pc}

0800d750 <__smakebuf_r>:
 800d750:	898b      	ldrh	r3, [r1, #12]
 800d752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d754:	079d      	lsls	r5, r3, #30
 800d756:	4606      	mov	r6, r0
 800d758:	460c      	mov	r4, r1
 800d75a:	d507      	bpl.n	800d76c <__smakebuf_r+0x1c>
 800d75c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	6123      	str	r3, [r4, #16]
 800d764:	2301      	movs	r3, #1
 800d766:	6163      	str	r3, [r4, #20]
 800d768:	b002      	add	sp, #8
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	ab01      	add	r3, sp, #4
 800d76e:	466a      	mov	r2, sp
 800d770:	f7ff ffc9 	bl	800d706 <__swhatbuf_r>
 800d774:	9900      	ldr	r1, [sp, #0]
 800d776:	4605      	mov	r5, r0
 800d778:	4630      	mov	r0, r6
 800d77a:	f7fb fce1 	bl	8009140 <_malloc_r>
 800d77e:	b948      	cbnz	r0, 800d794 <__smakebuf_r+0x44>
 800d780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d784:	059a      	lsls	r2, r3, #22
 800d786:	d4ef      	bmi.n	800d768 <__smakebuf_r+0x18>
 800d788:	f023 0303 	bic.w	r3, r3, #3
 800d78c:	f043 0302 	orr.w	r3, r3, #2
 800d790:	81a3      	strh	r3, [r4, #12]
 800d792:	e7e3      	b.n	800d75c <__smakebuf_r+0xc>
 800d794:	4b0d      	ldr	r3, [pc, #52]	; (800d7cc <__smakebuf_r+0x7c>)
 800d796:	62b3      	str	r3, [r6, #40]	; 0x28
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	6020      	str	r0, [r4, #0]
 800d79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a0:	81a3      	strh	r3, [r4, #12]
 800d7a2:	9b00      	ldr	r3, [sp, #0]
 800d7a4:	6163      	str	r3, [r4, #20]
 800d7a6:	9b01      	ldr	r3, [sp, #4]
 800d7a8:	6120      	str	r0, [r4, #16]
 800d7aa:	b15b      	cbz	r3, 800d7c4 <__smakebuf_r+0x74>
 800d7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f000 f86b 	bl	800d88c <_isatty_r>
 800d7b6:	b128      	cbz	r0, 800d7c4 <__smakebuf_r+0x74>
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	f023 0303 	bic.w	r3, r3, #3
 800d7be:	f043 0301 	orr.w	r3, r3, #1
 800d7c2:	81a3      	strh	r3, [r4, #12]
 800d7c4:	89a0      	ldrh	r0, [r4, #12]
 800d7c6:	4305      	orrs	r5, r0
 800d7c8:	81a5      	strh	r5, [r4, #12]
 800d7ca:	e7cd      	b.n	800d768 <__smakebuf_r+0x18>
 800d7cc:	08008ee1 	.word	0x08008ee1

0800d7d0 <_malloc_usable_size_r>:
 800d7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d4:	1f18      	subs	r0, r3, #4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfbc      	itt	lt
 800d7da:	580b      	ldrlt	r3, [r1, r0]
 800d7dc:	18c0      	addlt	r0, r0, r3
 800d7de:	4770      	bx	lr

0800d7e0 <_raise_r>:
 800d7e0:	291f      	cmp	r1, #31
 800d7e2:	b538      	push	{r3, r4, r5, lr}
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	d904      	bls.n	800d7f4 <_raise_r+0x14>
 800d7ea:	2316      	movs	r3, #22
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d7f6:	b112      	cbz	r2, 800d7fe <_raise_r+0x1e>
 800d7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7fc:	b94b      	cbnz	r3, 800d812 <_raise_r+0x32>
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 f830 	bl	800d864 <_getpid_r>
 800d804:	462a      	mov	r2, r5
 800d806:	4601      	mov	r1, r0
 800d808:	4620      	mov	r0, r4
 800d80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d80e:	f000 b817 	b.w	800d840 <_kill_r>
 800d812:	2b01      	cmp	r3, #1
 800d814:	d00a      	beq.n	800d82c <_raise_r+0x4c>
 800d816:	1c59      	adds	r1, r3, #1
 800d818:	d103      	bne.n	800d822 <_raise_r+0x42>
 800d81a:	2316      	movs	r3, #22
 800d81c:	6003      	str	r3, [r0, #0]
 800d81e:	2001      	movs	r0, #1
 800d820:	e7e7      	b.n	800d7f2 <_raise_r+0x12>
 800d822:	2400      	movs	r4, #0
 800d824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d828:	4628      	mov	r0, r5
 800d82a:	4798      	blx	r3
 800d82c:	2000      	movs	r0, #0
 800d82e:	e7e0      	b.n	800d7f2 <_raise_r+0x12>

0800d830 <raise>:
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <raise+0xc>)
 800d832:	4601      	mov	r1, r0
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	f7ff bfd3 	b.w	800d7e0 <_raise_r>
 800d83a:	bf00      	nop
 800d83c:	20000010 	.word	0x20000010

0800d840 <_kill_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4d07      	ldr	r5, [pc, #28]	; (800d860 <_kill_r+0x20>)
 800d844:	2300      	movs	r3, #0
 800d846:	4604      	mov	r4, r0
 800d848:	4608      	mov	r0, r1
 800d84a:	4611      	mov	r1, r2
 800d84c:	602b      	str	r3, [r5, #0]
 800d84e:	f7f4 f9d1 	bl	8001bf4 <_kill>
 800d852:	1c43      	adds	r3, r0, #1
 800d854:	d102      	bne.n	800d85c <_kill_r+0x1c>
 800d856:	682b      	ldr	r3, [r5, #0]
 800d858:	b103      	cbz	r3, 800d85c <_kill_r+0x1c>
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	bd38      	pop	{r3, r4, r5, pc}
 800d85e:	bf00      	nop
 800d860:	20002e78 	.word	0x20002e78

0800d864 <_getpid_r>:
 800d864:	f7f4 b9be 	b.w	8001be4 <_getpid>

0800d868 <_fstat_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d07      	ldr	r5, [pc, #28]	; (800d888 <_fstat_r+0x20>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	4611      	mov	r1, r2
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	f7f4 fa1c 	bl	8001cb2 <_fstat>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	d102      	bne.n	800d884 <_fstat_r+0x1c>
 800d87e:	682b      	ldr	r3, [r5, #0]
 800d880:	b103      	cbz	r3, 800d884 <_fstat_r+0x1c>
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	bd38      	pop	{r3, r4, r5, pc}
 800d886:	bf00      	nop
 800d888:	20002e78 	.word	0x20002e78

0800d88c <_isatty_r>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	4d06      	ldr	r5, [pc, #24]	; (800d8a8 <_isatty_r+0x1c>)
 800d890:	2300      	movs	r3, #0
 800d892:	4604      	mov	r4, r0
 800d894:	4608      	mov	r0, r1
 800d896:	602b      	str	r3, [r5, #0]
 800d898:	f7f4 fa1b 	bl	8001cd2 <_isatty>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	d102      	bne.n	800d8a6 <_isatty_r+0x1a>
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	b103      	cbz	r3, 800d8a6 <_isatty_r+0x1a>
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	20002e78 	.word	0x20002e78

0800d8ac <_init>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	bf00      	nop
 800d8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8b2:	bc08      	pop	{r3}
 800d8b4:	469e      	mov	lr, r3
 800d8b6:	4770      	bx	lr

0800d8b8 <_fini>:
 800d8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ba:	bf00      	nop
 800d8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8be:	bc08      	pop	{r3}
 800d8c0:	469e      	mov	lr, r3
 800d8c2:	4770      	bx	lr
