
ECU_G431KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a94  08002a94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a9c  08002a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002ab0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002ab0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bff2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d1  00000000  00000000  0002c02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c04b  00000000  00000000  0002ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b23d  00000000  00000000  0004ac13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b29af  00000000  00000000  00055e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001087ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c4  00000000  00000000  00108850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a3c 	.word	0x08002a3c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002a3c 	.word	0x08002a3c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 f9c5 	bl	80008ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f805 	bl	8000532 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f89a 	bl	8000660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f84c 	bl	80005c8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x14>

08000532 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b094      	sub	sp, #80	; 0x50
 8000536:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	2238      	movs	r2, #56	; 0x38
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f002 fa73 	bl	8002a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000554:	2000      	movs	r0, #0
 8000556:	f000 fc99 	bl	8000e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2340      	movs	r3, #64	; 0x40
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000570:	2304      	movs	r3, #4
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000574:	2355      	movs	r3, #85	; 0x55
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fd33 	bl	8000ff4 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000594:	f000 f8a4 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2104      	movs	r1, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f837 	bl	8001624 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005bc:	f000 f890 	bl	80006e0 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_USART2_UART_Init+0x94>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_USART2_UART_Init+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_USART2_UART_Init+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_USART2_UART_Init+0x90>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_USART2_UART_Init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000610:	4811      	ldr	r0, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x90>)
 8000612:	f001 fc13 	bl	8001e3c <HAL_UART_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800061c:	f000 f860 	bl	80006e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000620:	2100      	movs	r1, #0
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_USART2_UART_Init+0x90>)
 8000624:	f002 f914 	bl	8002850 <HAL_UARTEx_SetTxFifoThreshold>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800062e:	f000 f857 	bl	80006e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000632:	2100      	movs	r1, #0
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x90>)
 8000636:	f002 f949 	bl	80028cc <HAL_UARTEx_SetRxFifoThreshold>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000640:	f000 f84e 	bl	80006e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_USART2_UART_Init+0x90>)
 8000646:	f002 f8ca 	bl	80027de <HAL_UARTEx_DisableFifoMode>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000650:	f000 f846 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000028 	.word	0x20000028
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_GPIO_Init+0x78>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_GPIO_Init+0x78>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_GPIO_Init+0x78>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_GPIO_Init+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <MX_GPIO_Init+0x78>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_GPIO_Init+0x78>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <MX_GPIO_Init+0x7c>)
 80006ae:	f000 fbd5 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_GPIO_Init+0x7c>)
 80006cc:	f000 fa44 	bl	8000b58 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	; 0x60
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	; 0x58
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000722:	f000 fc57 	bl	8000fd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	; 0x68
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2244      	movs	r2, #68	; 0x44
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f969 	bl	8002a2c <memset>
  if(huart->Instance==USART2)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <HAL_UART_MspInit+0xa8>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d136      	bne.n	80007d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4618      	mov	r0, r3
 8000772:	f001 f973 	bl	8001a5c <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800077c:	f7ff ffb0 	bl	80006e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_UART_MspInit+0xac>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <HAL_UART_MspInit+0xac>)
 8000786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078a:	6593      	str	r3, [r2, #88]	; 0x58
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_UART_MspInit+0xac>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_MspInit+0xac>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_UART_MspInit+0xac>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_UART_MspInit+0xac>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80007b0:	230c      	movs	r3, #12
 80007b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c0:	2307      	movs	r3, #7
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007c8:	4619      	mov	r1, r3
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f000 f9c3 	bl	8000b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d2:	bf00      	nop
 80007d4:	3768      	adds	r7, #104	; 0x68
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f000 f890 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490e      	ldr	r1, [pc, #56]	; (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0b      	ldr	r4, [pc, #44]	; (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffd7 	bl	8000838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 f8ab 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088e:	f7ff fe45 	bl	800051c <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a0:	08002aa4 	.word	0x08002aa4
  ldr r2, =_sbss
 80008a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a8:	200000bc 	.word	0x200000bc

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>

080008ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f91b 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f80e 	bl	80008e0 <HAL_InitTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	e001      	b.n	80008d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d0:	f7ff ff0c 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d4:	79fb      	ldrb	r3, [r7, #7]

}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_InitTick+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d022      	beq.n	800093a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_InitTick+0x6c>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_InitTick+0x68>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000900:	fbb1 f3f3 	udiv	r3, r1, r3
 8000904:	fbb2 f3f3 	udiv	r3, r2, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f918 	bl	8000b3e <HAL_SYSTICK_Config>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10f      	bne.n	8000934 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d809      	bhi.n	800092e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	f04f 30ff 	mov.w	r0, #4294967295
 8000922:	f000 f8f2 	bl	8000b0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_InitTick+0x70>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e007      	b.n	800093e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e004      	b.n	800093e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e001      	b.n	800093e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000008 	.word	0x20000008
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x1c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x20>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4413      	add	r3, r2
 8000962:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_IncTick+0x1c>)
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	200000b8 	.word	0x200000b8
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200000b8 	.word	0x200000b8

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f7ff ff8e 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff47 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5e 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff90 	bl	8000a48 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5f 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb2 	bl	8000ab0 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b66:	e15a      	b.n	8000e1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 814c 	beq.w	8000e18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d130      	bne.n	8000bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	f003 0201 	and.w	r2, r3, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d017      	beq.n	8000c36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d123      	bne.n	8000c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	6939      	ldr	r1, [r7, #16]
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0203 	and.w	r2, r3, #3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80a6 	beq.w	8000e18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd0:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd8:	4b58      	ldr	r3, [pc, #352]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce4:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d0e:	d01f      	beq.n	8000d50 <HAL_GPIO_Init+0x1f8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <HAL_GPIO_Init+0x2ec>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d019      	beq.n	8000d4c <HAL_GPIO_Init+0x1f4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4b      	ldr	r2, [pc, #300]	; (8000e48 <HAL_GPIO_Init+0x2f0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x1f0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a4a      	ldr	r2, [pc, #296]	; (8000e4c <HAL_GPIO_Init+0x2f4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1ec>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <HAL_GPIO_Init+0x2f8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1e8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <HAL_GPIO_Init+0x2fc>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d38:	2305      	movs	r3, #5
 8000d3a:	e00a      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e008      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e006      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d44:	2303      	movs	r3, #3
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d50:	2300      	movs	r3, #0
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d62:	4937      	ldr	r1, [pc, #220]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d70:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f47f ae9d 	bne.w	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000800 	.word	0x48000800
 8000e4c:	48000c00 	.word	0x48000c00
 8000e50:	48001000 	.word	0x48001000
 8000e54:	48001400 	.word	0x48001400
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d141      	bne.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea6:	d131      	bne.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec0:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec8:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2232      	movs	r2, #50	; 0x32
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	0c9b      	lsrs	r3, r3, #18
 8000eda:	3301      	adds	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ede:	e002      	b.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	d102      	bne.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f2      	bne.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f06:	d158      	bne.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e057      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f1c:	e04d      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d141      	bne.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f32:	d131      	bne.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2232      	movs	r2, #50	; 0x32
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	0c9b      	lsrs	r3, r3, #18
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6a:	e002      	b.n	8000f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d102      	bne.n	8000f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f2      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f92:	d112      	bne.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e011      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fa8:	e007      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e306      	b.n	8001614 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d075      	beq.n	80010fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001012:	4b97      	ldr	r3, [pc, #604]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800101c:	4b94      	ldr	r3, [pc, #592]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x3e>
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d002      	beq.n	8001038 <HAL_RCC_OscConfig+0x44>
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b08      	cmp	r3, #8
 8001036:	d10b      	bne.n	8001050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	4b8d      	ldr	r3, [pc, #564]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d05b      	beq.n	80010fc <HAL_RCC_OscConfig+0x108>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d157      	bne.n	80010fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e2e1      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x74>
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a84      	ldr	r2, [pc, #528]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e01d      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x98>
 8001072:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 800108c:	4b78      	ldr	r3, [pc, #480]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b75      	ldr	r3, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a74      	ldr	r2, [pc, #464]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800109e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d013      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc64 	bl	8000978 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fc60 	bl	8000978 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e2a6      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c6:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0xc0>
 80010d2:	e014      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc50 	bl	8000978 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fc4c 	bl	8000978 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e292      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ee:	4b60      	ldr	r3, [pc, #384]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0xe8>
 80010fa:	e000      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d075      	beq.n	80011f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110a:	4b59      	ldr	r3, [pc, #356]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001114:	4b56      	ldr	r3, [pc, #344]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b0c      	cmp	r3, #12
 8001122:	d102      	bne.n	800112a <HAL_RCC_OscConfig+0x136>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d002      	beq.n	8001130 <HAL_RCC_OscConfig+0x13c>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d11f      	bne.n	8001170 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001130:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_OscConfig+0x154>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e265      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b49      	ldr	r3, [pc, #292]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	4946      	ldr	r1, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HAL_RCC_OscConfig+0x280>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fbbd 	bl	80008e0 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d043      	beq.n	80011f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e251      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a3c      	ldr	r2, [pc, #240]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fbf8 	bl	8000978 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fbf4 	bl	8000978 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e23a      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	061b      	lsls	r3, r3, #24
 80011b8:	492d      	ldr	r1, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
 80011be:	e01a      	b.n	80011f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80011c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fbd4 	bl	8000978 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fbd0 	bl	8000978 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e216      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1e0>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d041      	beq.n	8001286 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01c      	beq.n	8001244 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fbad 	bl	8000978 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fba9 	bl	8000978 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1ef      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0ef      	beq.n	8001222 <HAL_RCC_OscConfig+0x22e>
 8001242:	e020      	b.n	8001286 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fb90 	bl	8000978 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800125a:	e00d      	b.n	8001278 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fb8c 	bl	8000978 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d906      	bls.n	8001278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1d2      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001278:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ea      	bne.n	800125c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80a6 	beq.w	80013e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001298:	4b84      	ldr	r3, [pc, #528]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2b4>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x2b6>
 80012a8:	2300      	movs	r3, #0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a7e      	ldr	r2, [pc, #504]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b7c      	ldr	r3, [pc, #496]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <HAL_RCC_OscConfig+0x4bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d118      	bne.n	8001308 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_RCC_OscConfig+0x4bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <HAL_RCC_OscConfig+0x4bc>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fb49 	bl	8000978 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ea:	f7ff fb45 	bl	8000978 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e18b      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <HAL_RCC_OscConfig+0x4bc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_RCC_OscConfig+0x32e>
 8001310:	4b66      	ldr	r3, [pc, #408]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001316:	4a65      	ldr	r2, [pc, #404]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001320:	e024      	b.n	800136c <HAL_RCC_OscConfig+0x378>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d110      	bne.n	800134c <HAL_RCC_OscConfig+0x358>
 800132a:	4b60      	ldr	r3, [pc, #384]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001330:	4a5e      	ldr	r2, [pc, #376]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133a:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800133c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001340:	4a5a      	ldr	r2, [pc, #360]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134a:	e00f      	b.n	800136c <HAL_RCC_OscConfig+0x378>
 800134c:	4b57      	ldr	r3, [pc, #348]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	4a56      	ldr	r2, [pc, #344]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d016      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fb00 	bl	8000978 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137a:	e00a      	b.n	8001392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff fafc 	bl	8000978 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e140      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0ed      	beq.n	800137c <HAL_RCC_OscConfig+0x388>
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff fae9 	bl	8000978 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff fae5 	bl	8000978 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e129      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80013c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ed      	bne.n	80013aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	4a34      	ldr	r2, [pc, #208]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80013da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03c      	beq.n	8001466 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01c      	beq.n	800142e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80013f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fab8 	bl	8000978 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140c:	f7ff fab4 	bl	8000978 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e0fa      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ef      	beq.n	800140c <HAL_RCC_OscConfig+0x418>
 800142c:	e01b      	b.n	8001466 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fa9b 	bl	8000978 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001446:	f7ff fa97 	bl	8000978 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e0dd      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800145a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ef      	bne.n	8001446 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80d1 	beq.w	8001612 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b0c      	cmp	r3, #12
 800147a:	f000 808b 	beq.w	8001594 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d15e      	bne.n	8001544 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_RCC_OscConfig+0x4b8>)
 800148c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fa71 	bl	8000978 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001498:	e00c      	b.n	80014b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fa6d 	bl	8000978 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d905      	bls.n	80014b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0b3      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_RCC_OscConfig+0x628>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ec      	bne.n	800149a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c0:	4b56      	ldr	r3, [pc, #344]	; (800161c <HAL_RCC_OscConfig+0x628>)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_RCC_OscConfig+0x62c>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6a11      	ldr	r1, [r2, #32]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014d0:	3a01      	subs	r2, #1
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	4311      	orrs	r1, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014da:	0212      	lsls	r2, r2, #8
 80014dc:	4311      	orrs	r1, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e2:	0852      	lsrs	r2, r2, #1
 80014e4:	3a01      	subs	r2, #1
 80014e6:	0552      	lsls	r2, r2, #21
 80014e8:	4311      	orrs	r1, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014ee:	0852      	lsrs	r2, r2, #1
 80014f0:	3a01      	subs	r2, #1
 80014f2:	0652      	lsls	r2, r2, #25
 80014f4:	4311      	orrs	r1, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014fa:	06d2      	lsls	r2, r2, #27
 80014fc:	430a      	orrs	r2, r1
 80014fe:	4947      	ldr	r1, [pc, #284]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001500:	4313      	orrs	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a44      	ldr	r2, [pc, #272]	; (800161c <HAL_RCC_OscConfig+0x628>)
 800150a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001510:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a41      	ldr	r2, [pc, #260]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fa2c 	bl	8000978 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001524:	f7ff fa28 	bl	8000978 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e06e      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x530>
 8001542:	e066      	b.n	8001612 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a34      	ldr	r2, [pc, #208]	; (800161c <HAL_RCC_OscConfig+0x628>)
 800154a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a31      	ldr	r2, [pc, #196]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001556:	f023 0303 	bic.w	r3, r3, #3
 800155a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_RCC_OscConfig+0x628>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a2e      	ldr	r2, [pc, #184]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001562:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fa04 	bl	8000978 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa00 	bl	8000978 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e046      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_RCC_OscConfig+0x628>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x580>
 8001592:	e03e      	b.n	8001612 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e039      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_RCC_OscConfig+0x628>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d12c      	bne.n	800160e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	3b01      	subs	r3, #1
 80015c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d123      	bne.n	800160e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d11b      	bne.n	800160e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d113      	bne.n	800160e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	3b01      	subs	r3, #1
 80015f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d109      	bne.n	800160e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	3b01      	subs	r3, #1
 8001608:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	019f800c 	.word	0x019f800c

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e11e      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b8e      	ldr	r3, [pc, #568]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 020f 	bic.w	r2, r3, #15
 8001652:	498c      	ldr	r1, [pc, #560]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e106      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d073      	beq.n	8001760 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d129      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001680:	4b81      	ldr	r3, [pc, #516]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0f4      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001690:	f000 f99e 	bl	80019d0 <RCC_GetSysClockFreqFromPLLSource>
 8001694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_ClockConfig+0x268>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d93f      	bls.n	800171e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800169e:	4b7a      	ldr	r3, [pc, #488]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d033      	beq.n	800171e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d12f      	bne.n	800171e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c6:	4a70      	ldr	r2, [pc, #448]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e024      	b.n	800171e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d107      	bne.n	80016ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016dc:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0c6      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0be      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016fc:	f000 f8ce 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4a61      	ldr	r2, [pc, #388]	; (800188c <HAL_RCC_ClockConfig+0x268>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d909      	bls.n	800171e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001712:	4a5d      	ldr	r2, [pc, #372]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4957      	ldr	r1, [pc, #348]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001730:	f7ff f922 	bl	8000978 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f91e 	bl	8000978 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e095      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b4e      	ldr	r3, [pc, #312]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800177e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001782:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001798:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800179a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800179e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4936      	ldr	r1, [pc, #216]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b80      	cmp	r3, #128	; 0x80
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d21d      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 020f 	bic.w	r2, r3, #15
 80017dc:	4929      	ldr	r1, [pc, #164]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e4:	f7ff f8c8 	bl	8000978 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff f8c4 	bl	8000978 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e03b      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ed      	bne.n	80017ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490f      	ldr	r1, [pc, #60]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184e:	f000 f825 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490c      	ldr	r1, [pc, #48]	; (8001890 <HAL_RCC_ClockConfig+0x26c>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x270>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f834 	bl	80008e0 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000
 8001888:	40021000 	.word	0x40021000
 800188c:	04c4b400 	.word	0x04c4b400
 8001890:	08002a54 	.word	0x08002a54
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e047      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	e03e      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d136      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018fa:	68d2      	ldr	r2, [r2, #12]
 80018fc:	0a12      	lsrs	r2, r2, #8
 80018fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
      break;
 8001908:	e00c      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001914:	68d2      	ldr	r2, [r2, #12]
 8001916:	0a12      	lsrs	r2, r2, #8
 8001918:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
      break;
 8001922:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0e5b      	lsrs	r3, r3, #25
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e001      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001944:	693b      	ldr	r3, [r7, #16]
}
 8001946:	4618      	mov	r0, r3
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	00f42400 	.word	0x00f42400
 800195c:	007a1200 	.word	0x007a1200

08001960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_RCC_GetHCLKFreq+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800197c:	f7ff fff0 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	08002a64 	.word	0x08002a64

080019a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80019a8:	f7ff ffda 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0adb      	lsrs	r3, r3, #11
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4904      	ldr	r1, [pc, #16]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08002a64 	.word	0x08002a64

080019d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d10c      	bne.n	8001a0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019f4:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019fe:	68d2      	ldr	r2, [r2, #12]
 8001a00:	0a12      	lsrs	r2, r2, #8
 8001a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
    break;
 8001a0c:	e00c      	b.n	8001a28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a18:	68d2      	ldr	r2, [r2, #12]
 8001a1a:	0a12      	lsrs	r2, r2, #8
 8001a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    break;
 8001a26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0e5b      	lsrs	r3, r3, #25
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	3301      	adds	r3, #1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	00f42400 	.word	0x00f42400

08001a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a64:	2300      	movs	r3, #0
 8001a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a68:	2300      	movs	r3, #0
 8001a6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8098 	beq.w	8001baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10d      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	4a3f      	ldr	r2, [pc, #252]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a39      	ldr	r2, [pc, #228]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ab2:	f7fe ff61 	bl	8000978 <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ab8:	e009      	b.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7fe ff5d 	bl	8000978 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d902      	bls.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	74fb      	strb	r3, [r7, #19]
        break;
 8001acc:	e005      	b.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0ef      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ada:	7cfb      	ldrb	r3, [r7, #19]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d159      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01e      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d019      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d016      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7fe ff1d 	bl	8000978 <HAL_GetTick>
 8001b3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b40:	e00b      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7fe ff19 	bl	8000978 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d902      	bls.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	74fb      	strb	r3, [r7, #19]
            break;
 8001b58:	e006      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ec      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10b      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001b84:	e008      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	74bb      	strb	r3, [r7, #18]
 8001b8a:	e005      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b98:	7c7b      	ldrb	r3, [r7, #17]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d105      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4ba6      	ldr	r3, [pc, #664]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4aa5      	ldr	r2, [pc, #660]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bb6:	4ba0      	ldr	r3, [pc, #640]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	f023 0203 	bic.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	499c      	ldr	r1, [pc, #624]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bd8:	4b97      	ldr	r3, [pc, #604]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	f023 020c 	bic.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4994      	ldr	r1, [pc, #592]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bfa:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	498b      	ldr	r1, [pc, #556]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00a      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c1c:	4b86      	ldr	r3, [pc, #536]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	4983      	ldr	r1, [pc, #524]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c3e:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	497a      	ldr	r1, [pc, #488]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00a      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c60:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	4972      	ldr	r1, [pc, #456]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	4969      	ldr	r1, [pc, #420]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ca4:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4961      	ldr	r1, [pc, #388]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	4958      	ldr	r1, [pc, #352]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d015      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	4950      	ldr	r1, [pc, #320]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d06:	d105      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d08:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a4a      	ldr	r2, [pc, #296]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d015      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	4942      	ldr	r1, [pc, #264]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4934      	ldr	r1, [pc, #208]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d76:	d105      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d78:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d015      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	4926      	ldr	r1, [pc, #152]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dae:	d105      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d015      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	4918      	ldr	r1, [pc, #96]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001de6:	d105      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001e2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e042      	b.n	8001ed4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7fe fc67 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2224      	movs	r2, #36	; 0x24
 8001e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f82c 	bl	8001edc <UART_SetConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e022      	b.n	8001ed4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 faec 	bl	8002474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb73 	bl	80025b8 <UART_CheckIdleState>
 8001ed2:	4603      	mov	r3, r0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b08c      	sub	sp, #48	; 0x30
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4bab      	ldr	r3, [pc, #684]	; (80021b8 <UART_SetConfig+0x2dc>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4aa0      	ldr	r2, [pc, #640]	; (80021bc <UART_SetConfig+0x2e0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f44:	4313      	orrs	r3, r2
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8001f52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	f023 010f 	bic.w	r1, r3, #15
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a91      	ldr	r2, [pc, #580]	; (80021c0 <UART_SetConfig+0x2e4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d125      	bne.n	8001fcc <UART_SetConfig+0xf0>
 8001f80:	4b90      	ldr	r3, [pc, #576]	; (80021c4 <UART_SetConfig+0x2e8>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d81a      	bhi.n	8001fc4 <UART_SetConfig+0xe8>
 8001f8e:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <UART_SetConfig+0xb8>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fb5 	.word	0x08001fb5
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fbd 	.word	0x08001fbd
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001faa:	e0d6      	b.n	800215a <UART_SetConfig+0x27e>
 8001fac:	2302      	movs	r3, #2
 8001fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fb2:	e0d2      	b.n	800215a <UART_SetConfig+0x27e>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fba:	e0ce      	b.n	800215a <UART_SetConfig+0x27e>
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fc2:	e0ca      	b.n	800215a <UART_SetConfig+0x27e>
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fca:	e0c6      	b.n	800215a <UART_SetConfig+0x27e>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7d      	ldr	r2, [pc, #500]	; (80021c8 <UART_SetConfig+0x2ec>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d138      	bne.n	8002048 <UART_SetConfig+0x16c>
 8001fd6:	4b7b      	ldr	r3, [pc, #492]	; (80021c4 <UART_SetConfig+0x2e8>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d82d      	bhi.n	8002040 <UART_SetConfig+0x164>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <UART_SetConfig+0x110>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08002021 	.word	0x08002021
 8001ff0:	08002041 	.word	0x08002041
 8001ff4:	08002041 	.word	0x08002041
 8001ff8:	08002041 	.word	0x08002041
 8001ffc:	08002031 	.word	0x08002031
 8002000:	08002041 	.word	0x08002041
 8002004:	08002041 	.word	0x08002041
 8002008:	08002041 	.word	0x08002041
 800200c:	08002029 	.word	0x08002029
 8002010:	08002041 	.word	0x08002041
 8002014:	08002041 	.word	0x08002041
 8002018:	08002041 	.word	0x08002041
 800201c:	08002039 	.word	0x08002039
 8002020:	2300      	movs	r3, #0
 8002022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002026:	e098      	b.n	800215a <UART_SetConfig+0x27e>
 8002028:	2302      	movs	r3, #2
 800202a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800202e:	e094      	b.n	800215a <UART_SetConfig+0x27e>
 8002030:	2304      	movs	r3, #4
 8002032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002036:	e090      	b.n	800215a <UART_SetConfig+0x27e>
 8002038:	2308      	movs	r3, #8
 800203a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800203e:	e08c      	b.n	800215a <UART_SetConfig+0x27e>
 8002040:	2310      	movs	r3, #16
 8002042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002046:	e088      	b.n	800215a <UART_SetConfig+0x27e>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a5f      	ldr	r2, [pc, #380]	; (80021cc <UART_SetConfig+0x2f0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d125      	bne.n	800209e <UART_SetConfig+0x1c2>
 8002052:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <UART_SetConfig+0x2e8>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800205c:	2b30      	cmp	r3, #48	; 0x30
 800205e:	d016      	beq.n	800208e <UART_SetConfig+0x1b2>
 8002060:	2b30      	cmp	r3, #48	; 0x30
 8002062:	d818      	bhi.n	8002096 <UART_SetConfig+0x1ba>
 8002064:	2b20      	cmp	r3, #32
 8002066:	d00a      	beq.n	800207e <UART_SetConfig+0x1a2>
 8002068:	2b20      	cmp	r3, #32
 800206a:	d814      	bhi.n	8002096 <UART_SetConfig+0x1ba>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <UART_SetConfig+0x19a>
 8002070:	2b10      	cmp	r3, #16
 8002072:	d008      	beq.n	8002086 <UART_SetConfig+0x1aa>
 8002074:	e00f      	b.n	8002096 <UART_SetConfig+0x1ba>
 8002076:	2300      	movs	r3, #0
 8002078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800207c:	e06d      	b.n	800215a <UART_SetConfig+0x27e>
 800207e:	2302      	movs	r3, #2
 8002080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002084:	e069      	b.n	800215a <UART_SetConfig+0x27e>
 8002086:	2304      	movs	r3, #4
 8002088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800208c:	e065      	b.n	800215a <UART_SetConfig+0x27e>
 800208e:	2308      	movs	r3, #8
 8002090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002094:	e061      	b.n	800215a <UART_SetConfig+0x27e>
 8002096:	2310      	movs	r3, #16
 8002098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800209c:	e05d      	b.n	800215a <UART_SetConfig+0x27e>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <UART_SetConfig+0x2f4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d125      	bne.n	80020f4 <UART_SetConfig+0x218>
 80020a8:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <UART_SetConfig+0x2e8>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020b2:	2bc0      	cmp	r3, #192	; 0xc0
 80020b4:	d016      	beq.n	80020e4 <UART_SetConfig+0x208>
 80020b6:	2bc0      	cmp	r3, #192	; 0xc0
 80020b8:	d818      	bhi.n	80020ec <UART_SetConfig+0x210>
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d00a      	beq.n	80020d4 <UART_SetConfig+0x1f8>
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d814      	bhi.n	80020ec <UART_SetConfig+0x210>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <UART_SetConfig+0x1f0>
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d008      	beq.n	80020dc <UART_SetConfig+0x200>
 80020ca:	e00f      	b.n	80020ec <UART_SetConfig+0x210>
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020d2:	e042      	b.n	800215a <UART_SetConfig+0x27e>
 80020d4:	2302      	movs	r3, #2
 80020d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020da:	e03e      	b.n	800215a <UART_SetConfig+0x27e>
 80020dc:	2304      	movs	r3, #4
 80020de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020e2:	e03a      	b.n	800215a <UART_SetConfig+0x27e>
 80020e4:	2308      	movs	r3, #8
 80020e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020ea:	e036      	b.n	800215a <UART_SetConfig+0x27e>
 80020ec:	2310      	movs	r3, #16
 80020ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020f2:	e032      	b.n	800215a <UART_SetConfig+0x27e>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <UART_SetConfig+0x2e0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12a      	bne.n	8002154 <UART_SetConfig+0x278>
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <UART_SetConfig+0x2e8>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800210c:	d01a      	beq.n	8002144 <UART_SetConfig+0x268>
 800210e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002112:	d81b      	bhi.n	800214c <UART_SetConfig+0x270>
 8002114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002118:	d00c      	beq.n	8002134 <UART_SetConfig+0x258>
 800211a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800211e:	d815      	bhi.n	800214c <UART_SetConfig+0x270>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <UART_SetConfig+0x250>
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d008      	beq.n	800213c <UART_SetConfig+0x260>
 800212a:	e00f      	b.n	800214c <UART_SetConfig+0x270>
 800212c:	2300      	movs	r3, #0
 800212e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002132:	e012      	b.n	800215a <UART_SetConfig+0x27e>
 8002134:	2302      	movs	r3, #2
 8002136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800213a:	e00e      	b.n	800215a <UART_SetConfig+0x27e>
 800213c:	2304      	movs	r3, #4
 800213e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002142:	e00a      	b.n	800215a <UART_SetConfig+0x27e>
 8002144:	2308      	movs	r3, #8
 8002146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800214a:	e006      	b.n	800215a <UART_SetConfig+0x27e>
 800214c:	2310      	movs	r3, #16
 800214e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002152:	e002      	b.n	800215a <UART_SetConfig+0x27e>
 8002154:	2310      	movs	r3, #16
 8002156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <UART_SetConfig+0x2e0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	f040 80a8 	bne.w	80022b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800216a:	2b08      	cmp	r3, #8
 800216c:	d834      	bhi.n	80021d8 <UART_SetConfig+0x2fc>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <UART_SetConfig+0x298>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002199 	.word	0x08002199
 8002178:	080021d9 	.word	0x080021d9
 800217c:	080021a1 	.word	0x080021a1
 8002180:	080021d9 	.word	0x080021d9
 8002184:	080021a7 	.word	0x080021a7
 8002188:	080021d9 	.word	0x080021d9
 800218c:	080021d9 	.word	0x080021d9
 8002190:	080021d9 	.word	0x080021d9
 8002194:	080021af 	.word	0x080021af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002198:	f7ff fbee 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800219e:	e021      	b.n	80021e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <UART_SetConfig+0x2f8>)
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80021a4:	e01e      	b.n	80021e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021a6:	f7ff fb79 	bl	800189c <HAL_RCC_GetSysClockFreq>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80021ac:	e01a      	b.n	80021e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80021b4:	e016      	b.n	80021e4 <UART_SetConfig+0x308>
 80021b6:	bf00      	nop
 80021b8:	cfff69f3 	.word	0xcfff69f3
 80021bc:	40008000 	.word	0x40008000
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40004400 	.word	0x40004400
 80021cc:	40004800 	.word	0x40004800
 80021d0:	40004c00 	.word	0x40004c00
 80021d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80021e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 812a 	beq.w	8002440 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	4a9e      	ldr	r2, [pc, #632]	; (800246c <UART_SetConfig+0x590>)
 80021f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021f6:	461a      	mov	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	429a      	cmp	r2, r3
 800220e:	d305      	bcc.n	800221c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	429a      	cmp	r2, r3
 800221a:	d903      	bls.n	8002224 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002222:	e10d      	b.n	8002440 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	2200      	movs	r2, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	4a8e      	ldr	r2, [pc, #568]	; (800246c <UART_SetConfig+0x590>)
 8002232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002236:	b29b      	uxth	r3, r3
 8002238:	2200      	movs	r2, #0
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002246:	f7fd ffe7 	bl	8000218 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	020b      	lsls	r3, r1, #8
 800225c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002260:	0202      	lsls	r2, r0, #8
 8002262:	6979      	ldr	r1, [r7, #20]
 8002264:	6849      	ldr	r1, [r1, #4]
 8002266:	0849      	lsrs	r1, r1, #1
 8002268:	2000      	movs	r0, #0
 800226a:	460c      	mov	r4, r1
 800226c:	4605      	mov	r5, r0
 800226e:	eb12 0804 	adds.w	r8, r2, r4
 8002272:	eb43 0905 	adc.w	r9, r3, r5
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	469a      	mov	sl, r3
 800227e:	4693      	mov	fp, r2
 8002280:	4652      	mov	r2, sl
 8002282:	465b      	mov	r3, fp
 8002284:	4640      	mov	r0, r8
 8002286:	4649      	mov	r1, r9
 8002288:	f7fd ffc6 	bl	8000218 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229a:	d308      	bcc.n	80022ae <UART_SetConfig+0x3d2>
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a2:	d204      	bcs.n	80022ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	e0c8      	b.n	8002440 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80022b4:	e0c4      	b.n	8002440 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022be:	d167      	bne.n	8002390 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80022c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d828      	bhi.n	800231a <UART_SetConfig+0x43e>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <UART_SetConfig+0x3f4>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022f5 	.word	0x080022f5
 80022d4:	080022fd 	.word	0x080022fd
 80022d8:	08002305 	.word	0x08002305
 80022dc:	0800231b 	.word	0x0800231b
 80022e0:	0800230b 	.word	0x0800230b
 80022e4:	0800231b 	.word	0x0800231b
 80022e8:	0800231b 	.word	0x0800231b
 80022ec:	0800231b 	.word	0x0800231b
 80022f0:	08002313 	.word	0x08002313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022f4:	f7ff fb40 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80022f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80022fa:	e014      	b.n	8002326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022fc:	f7ff fb52 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8002300:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002302:	e010      	b.n	8002326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002304:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <UART_SetConfig+0x594>)
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002308:	e00d      	b.n	8002326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800230a:	f7ff fac7 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800230e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002310:	e009      	b.n	8002326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002318:	e005      	b.n	8002326 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8089 	beq.w	8002440 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	4a4e      	ldr	r2, [pc, #312]	; (800246c <UART_SetConfig+0x590>)
 8002334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002338:	461a      	mov	r2, r3
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002340:	005a      	lsls	r2, r3, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	441a      	add	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	d916      	bls.n	8002388 <UART_SetConfig+0x4ac>
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d212      	bcs.n	8002388 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f023 030f 	bic.w	r3, r3, #15
 800236a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	b29a      	uxth	r2, r3
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	4313      	orrs	r3, r2
 800237c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	8bfa      	ldrh	r2, [r7, #30]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e05b      	b.n	8002440 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800238e:	e057      	b.n	8002440 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002394:	2b08      	cmp	r3, #8
 8002396:	d828      	bhi.n	80023ea <UART_SetConfig+0x50e>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <UART_SetConfig+0x4c4>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023c5 	.word	0x080023c5
 80023a4:	080023cd 	.word	0x080023cd
 80023a8:	080023d5 	.word	0x080023d5
 80023ac:	080023eb 	.word	0x080023eb
 80023b0:	080023db 	.word	0x080023db
 80023b4:	080023eb 	.word	0x080023eb
 80023b8:	080023eb 	.word	0x080023eb
 80023bc:	080023eb 	.word	0x080023eb
 80023c0:	080023e3 	.word	0x080023e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023c4:	f7ff fad8 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80023c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80023ca:	e014      	b.n	80023f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023cc:	f7ff faea 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 80023d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80023d2:	e010      	b.n	80023f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <UART_SetConfig+0x594>)
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023d8:	e00d      	b.n	80023f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023da:	f7ff fa5f 	bl	800189c <HAL_RCC_GetSysClockFreq>
 80023de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80023e0:	e009      	b.n	80023f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023e8:	e005      	b.n	80023f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80023f4:	bf00      	nop
    }

    if (pclk != 0U)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d021      	beq.n	8002440 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <UART_SetConfig+0x590>)
 8002402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002406:	461a      	mov	r2, r3
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	fbb3 f2f2 	udiv	r2, r3, r2
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	441a      	add	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d909      	bls.n	800243a <UART_SetConfig+0x55e>
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d205      	bcs.n	800243a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	b29a      	uxth	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	e002      	b.n	8002440 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2201      	movs	r2, #1
 8002444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2201      	movs	r2, #1
 800244c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800245c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002460:	4618      	mov	r0, r3
 8002462:	3730      	adds	r7, #48	; 0x30
 8002464:	46bd      	mov	sp, r7
 8002466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800246a:	bf00      	nop
 800246c:	08002a6c 	.word	0x08002a6c
 8002470:	00f42400 	.word	0x00f42400

08002474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01a      	beq.n	800258a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d10a      	bne.n	800258a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
  }
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025c8:	f7fe f9d6 	bl	8000978 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d10e      	bne.n	80025fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f82f 	bl	800264e <UART_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e025      	b.n	8002646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d10e      	bne.n	8002626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f819 	bl	800264e <UART_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e00f      	b.n	8002646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b09c      	sub	sp, #112	; 0x70
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800265e:	e0a9      	b.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	f000 80a5 	beq.w	80027b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe f985 	bl	8000978 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <UART_WaitOnFlagUntilTimeout+0x32>
 800267a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267c:	2b00      	cmp	r3, #0
 800267e:	d140      	bne.n	8002702 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002688:	e853 3f00 	ldrex	r3, [r3]
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800268e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002694:	667b      	str	r3, [r7, #100]	; 0x64
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026a6:	e841 2300 	strex	r3, r2, [r1]
 80026aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e6      	bne.n	8002680 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3308      	adds	r3, #8
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026bc:	e853 3f00 	ldrex	r3, [r3]
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	663b      	str	r3, [r7, #96]	; 0x60
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3308      	adds	r3, #8
 80026d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026da:	e841 2300 	strex	r3, r2, [r1]
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80026e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e5      	bne.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e069      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d051      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800271e:	d149      	bne.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002728:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
 800274a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800274e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e6      	bne.n	800272a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3308      	adds	r3, #8
 8002762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	613b      	str	r3, [r7, #16]
   return(result);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	66bb      	str	r3, [r7, #104]	; 0x68
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3308      	adds	r3, #8
 800277a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800277c:	623a      	str	r2, [r7, #32]
 800277e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	69f9      	ldr	r1, [r7, #28]
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	61bb      	str	r3, [r7, #24]
   return(result);
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e010      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	f43f af46 	beq.w	8002660 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3770      	adds	r7, #112	; 0x70
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e027      	b.n	8002844 <HAL_UARTEx_DisableFifoMode+0x66>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002864:	2302      	movs	r3, #2
 8002866:	e02d      	b.n	80028c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f84f 	bl	8002948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e02d      	b.n	8002940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f811 	bl	8002948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002968:	e031      	b.n	80029ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800296a:	2308      	movs	r3, #8
 800296c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800296e:	2308      	movs	r3, #8
 8002970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	0e5b      	lsrs	r3, r3, #25
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	0f5b      	lsrs	r3, r3, #29
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002992:	7bbb      	ldrb	r3, [r7, #14]
 8002994:	7b3a      	ldrb	r2, [r7, #12]
 8002996:	4911      	ldr	r1, [pc, #68]	; (80029dc <UARTEx_SetNbDataToProcess+0x94>)
 8002998:	5c8a      	ldrb	r2, [r1, r2]
 800299a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800299e:	7b3a      	ldrb	r2, [r7, #12]
 80029a0:	490f      	ldr	r1, [pc, #60]	; (80029e0 <UARTEx_SetNbDataToProcess+0x98>)
 80029a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80029a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	7b7a      	ldrb	r2, [r7, #13]
 80029b4:	4909      	ldr	r1, [pc, #36]	; (80029dc <UARTEx_SetNbDataToProcess+0x94>)
 80029b6:	5c8a      	ldrb	r2, [r1, r2]
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80029bc:	7b7a      	ldrb	r2, [r7, #13]
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <UARTEx_SetNbDataToProcess+0x98>)
 80029c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	08002a84 	.word	0x08002a84
 80029e0:	08002a8c 	.word	0x08002a8c

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	4d0d      	ldr	r5, [pc, #52]	; (8002a1c <__libc_init_array+0x38>)
 80029e8:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ea:	1b64      	subs	r4, r4, r5
 80029ec:	10a4      	asrs	r4, r4, #2
 80029ee:	2600      	movs	r6, #0
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	4d0b      	ldr	r5, [pc, #44]	; (8002a24 <__libc_init_array+0x40>)
 80029f6:	4c0c      	ldr	r4, [pc, #48]	; (8002a28 <__libc_init_array+0x44>)
 80029f8:	f000 f820 	bl	8002a3c <_init>
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	2600      	movs	r6, #0
 8002a02:	42a6      	cmp	r6, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0c:	4798      	blx	r3
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a16:	4798      	blx	r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08002a9c 	.word	0x08002a9c
 8002a20:	08002a9c 	.word	0x08002a9c
 8002a24:	08002a9c 	.word	0x08002a9c
 8002a28:	08002aa0 	.word	0x08002aa0

08002a2c <memset>:
 8002a2c:	4402      	add	r2, r0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d100      	bne.n	8002a36 <memset+0xa>
 8002a34:	4770      	bx	lr
 8002a36:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3a:	e7f9      	b.n	8002a30 <memset+0x4>

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
