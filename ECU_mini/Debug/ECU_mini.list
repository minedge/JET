
ECU_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800736c  0800736c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007374  08007374  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800737c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002234  20000074  080073f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a8  080073f0  000222a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021af3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc5  00000000  00000000  00041b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00045960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  000473b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ab3  00000000  00000000  00048cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce19  00000000  00000000  0004c76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2177  00000000  00000000  00069584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b6fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007384  00000000  00000000  0013b74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007248 	.word	0x08007248

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007248 	.word	0x08007248

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fcb5 	bl	8000e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f82e 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f9dc 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f964 	bl	8000800 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000538:	f000 f9ae 	bl	8000898 <MX_DMA_Init>
  MX_SPI1_Init();
 800053c:	f000 f872 	bl	8000624 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000540:	f000 f8ae 	bl	80006a0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000544:	f000 f910 	bl	8000768 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f004 f808 	bl	800455c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TMTC */
  TMTCHandle = osThreadNew(StartTMTC, NULL, &TMTC_attributes);
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <main+0x50>)
 800054e:	2100      	movs	r1, #0
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0x54>)
 8000552:	f004 f84d 	bl	80045f0 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <main+0x58>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of MAG */
  MAGHandle = osThreadNew(StartMAG, NULL, &MAG_attributes);
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <main+0x5c>)
 800055e:	2100      	movs	r1, #0
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x60>)
 8000562:	f004 f845 	bl	80045f0 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <main+0x64>)
 800056a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f004 f81a 	bl	80045a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x4c>
 8000572:	bf00      	nop
 8000574:	08007284 	.word	0x08007284
 8000578:	08000999 	.word	0x08000999
 800057c:	200002c0 	.word	0x200002c0
 8000580:	080072a8 	.word	0x080072a8
 8000584:	080009a9 	.word	0x080009a9
 8000588:	20000580 	.word	0x20000580

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	2238      	movs	r2, #56	; 0x38
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 fd8a 	bl	80070b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f001 f8dc 	bl	800176c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ce:	2355      	movs	r3, #85	; 0x55
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f976 	bl	80018d4 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ee:	f000 f9f5 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2104      	movs	r1, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fc7a 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000616:	f000 f9e1 	bl	80009dc <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_SPI1_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <MX_SPI1_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_SPI1_Init+0x74>)
 8000630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_SPI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI1_Init+0x74>)
 800063e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000642:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_SPI1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_SPI1_Init+0x74>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x74>)
 8000652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000656:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI1_Init+0x74>)
 800065a:	2210      	movs	r2, #16
 800065c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_SPI1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_SPI1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x74>)
 8000672:	2207      	movs	r2, #7
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_SPI1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_SPI1_Init+0x74>)
 8000684:	f002 f87c 	bl	8002780 <HAL_SPI_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 f9a5 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000090 	.word	0x20000090
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006da:	f04f 32ff 	mov.w	r2, #4294967295
 80006de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006ec:	481d      	ldr	r0, [pc, #116]	; (8000764 <MX_TIM2_Init+0xc4>)
 80006ee:	f002 f9bd 	bl	8002a6c <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006f8:	f000 f970 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4816      	ldr	r0, [pc, #88]	; (8000764 <MX_TIM2_Init+0xc4>)
 800070c:	f003 f846 	bl	800379c <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000716:	f000 f961 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_TIM2_Init+0xc4>)
 8000732:	f002 fb71 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800073c:	f000 f94e 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	2204      	movs	r2, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_TIM2_Init+0xc4>)
 8000748:	f002 fb66 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000752:	f000 f943 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <MX_TIM2_Init+0xc4>)
 8000758:	f000 f9d0 	bl	8000afc <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000f4 	.word	0x200000f4

08000768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 800076e:	4a23      	ldr	r2, [pc, #140]	; (80007fc <MX_USART1_UART_Init+0x94>)
 8000770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b0:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007b2:	f003 f8bb 	bl	800392c <HAL_UART_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007bc:	f000 f90e 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007c4:	f003 fdbc 	bl	8004340 <HAL_UARTEx_SetTxFifoThreshold>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007ce:	f000 f905 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007d6:	f003 fdf1 	bl	80043bc <HAL_UARTEx_SetRxFifoThreshold>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007e0:	f000 f8fc 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_USART1_UART_Init+0x90>)
 80007e6:	f003 fd72 	bl	80042ce <HAL_UARTEx_DisableFifoMode>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007f0:	f000 f8f4 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000140 	.word	0x20000140
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <MX_USART2_UART_Init+0x94>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART2_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800084a:	f003 f86f 	bl	800392c <HAL_UART_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000854:	f000 f8c2 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800085c:	f003 fd70 	bl	8004340 <HAL_UARTEx_SetTxFifoThreshold>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000866:	f000 f8b9 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800086e:	f003 fda5 	bl	80043bc <HAL_UARTEx_SetRxFifoThreshold>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000878:	f000 f8b0 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_USART2_UART_Init+0x90>)
 800087e:	f003 fd26 	bl	80042ce <HAL_UARTEx_DisableFifoMode>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 f8a8 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200001d0 	.word	0x200001d0
 8000894:	40004400 	.word	0x40004400

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_DMA_Init+0x50>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <MX_DMA_Init+0x50>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6493      	str	r3, [r2, #72]	; 0x48
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_DMA_Init+0x50>)
 80008ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DMA_Init+0x50>)
 80008b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <MX_DMA_Init+0x50>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6493      	str	r3, [r2, #72]	; 0x48
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_DMA_Init+0x50>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	200b      	movs	r0, #11
 80008d4:	f000 fbce 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008d8:	200b      	movs	r0, #11
 80008da:	f000 fbe5 	bl	80010a8 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_GPIO_Init+0xa4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f000 feff 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_GPIO_Init+0xa8>)
 8000946:	f000 fef9 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800094a:	2310      	movs	r3, #16
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f000 fd68 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0xa8>)
 8000982:	f000 fd59 	bl	8001438 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	48000400 	.word	0x48000400

08000998 <StartTMTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTMTC */
void StartTMTC(void *argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f003 feb7 	bl	8004714 <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <StartTMTC+0x8>

080009a8 <StartMAG>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMAG */
void StartMAG(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMAG */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f003 feaf 	bl	8004714 <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <StartMAG+0x8>

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 fa7d 	bl	8000ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40012c00 	.word	0x40012c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x50>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_MspInit+0x50>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	; 0x60
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x50>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x50>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_MspInit+0x50>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x50>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 fb25 	bl	8001074 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a2a:	f000 ff43 	bl	80018b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_SPI_MspInit+0x7c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d128      	bne.n	8000ab0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_SPI_MspInit+0x80>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <HAL_SPI_MspInit+0x80>)
 8000a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_SPI_MspInit+0x80>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_SPI_MspInit+0x80>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_SPI_MspInit+0x80>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_SPI_MspInit+0x80>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a8e:	23e0      	movs	r3, #224	; 0xe0
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 fcc4 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d10b      	bne.n	8000aea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_TIM_PWM_MspInit+0x38>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d11c      	bne.n	8000b58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_TIM_MspPostInit+0x64>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_TIM_MspPostInit+0x64>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_TIM_MspPostInit+0x64>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = START_MOTOR_Pin|Fuel_Pump_Pin;
 8000b36:	2303      	movs	r3, #3
 8000b38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fc70 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09c      	sub	sp, #112	; 0x70
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	2244      	movs	r2, #68	; 0x44
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f006 fa95 	bl	80070b4 <memset>
  if(huart->Instance==USART1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a52      	ldr	r2, [pc, #328]	; (8000cd8 <HAL_UART_MspInit+0x174>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d161      	bne.n	8000c58 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fbfd 	bl	80023a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff ff16 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb4:	4a49      	ldr	r2, [pc, #292]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bba:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbc:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f000 fc1a 	bl	8001438 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c04:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c06:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_UART_MspInit+0x180>)
 8000c08:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c0a:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c0c:	2218      	movs	r2, #24
 8000c0e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1c:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c28:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c3a:	4829      	ldr	r0, [pc, #164]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c3c:	f000 fa42 	bl	80010c4 <HAL_DMA_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000c46:	f7ff fec9 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c4e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000c50:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <HAL_UART_MspInit+0x17c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c56:	e03b      	b.n	8000cd0 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_UART_MspInit+0x184>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d136      	bne.n	8000cd0 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fb96 	bl	80023a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8000c7a:	f7ff feaf 	bl	80009dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_UART_MspInit+0x178>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f000 fbb4 	bl	8001438 <HAL_GPIO_Init>
}
 8000cd0:	bf00      	nop
 8000cd2:	3770      	adds	r7, #112	; 0x70
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	20000260 	.word	0x20000260
 8000ce4:	40020008 	.word	0x40020008
 8000ce8:	40004400 	.word	0x40004400

08000cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_InitTick+0xcc>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a2c      	ldr	r2, [pc, #176]	; (8000db8 <HAL_InitTick+0xcc>)
 8000d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_InitTick+0xcc>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d1a:	f107 020c 	add.w	r2, r7, #12
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fac3 	bl	80022b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d2a:	f001 faab 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8000d2e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_InitTick+0xd0>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	0c9b      	lsrs	r3, r3, #18
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d40:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <HAL_InitTick+0xd8>)
 8000d42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d60:	f001 fdb9 	bl	80028d6 <HAL_TIM_Base_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d11b      	bne.n	8000daa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d72:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <HAL_InitTick+0xd4>)
 8000d74:	f001 fe10 	bl	8002998 <HAL_TIM_Base_Start_IT>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d111      	bne.n	8000daa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d86:	2019      	movs	r0, #25
 8000d88:	f000 f98e 	bl	80010a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d808      	bhi.n	8000da4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000d92:	2200      	movs	r2, #0
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	2019      	movs	r0, #25
 8000d98:	f000 f96c 	bl	8001074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0xdc>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e002      	b.n	8000daa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	20000840 	.word	0x20000840
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	20000004 	.word	0x20000004

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <DMA1_Channel1_IRQHandler+0x10>)
 8000dfe:	f000 fa09 	bl	8001214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000260 	.word	0x20000260

08000e0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e12:	f001 fe82 	bl	8002b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000840 	.word	0x20000840

08000e20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6e:	f7ff ffd7 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f006 f8eb 	bl	800704c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e76:	f7ff fb55 	bl	8000524 <main>

08000e7a <LoopForever>:

LoopForever:
    b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   r0, =_estack
 8000e7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e88:	0800737c 	.word	0x0800737c
  ldr r2, =_sbss
 8000e8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e90:	200022a8 	.word	0x200022a8

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>

08000e96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8dc 	bl	800105e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff ff20 	bl	8000cec <HAL_InitTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	e001      	b.n	8000ebc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb8:	f7ff fd96 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]

}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	2000088c 	.word	0x2000088c
 8000ee8:	20000008 	.word	0x20000008

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000088c 	.word	0x2000088c

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff4c 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001082:	f7ff ff63 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001086:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	6978      	ldr	r0, [r7, #20]
 800108e:	f7ff ffb3 	bl	8000ff8 <NVIC_EncodePriority>
 8001092:	4602      	mov	r2, r0
 8001094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff82 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff56 	bl	8000f68 <__NVIC_EnableIRQ>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e08d      	b.n	80011f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_DMA_Init+0x138>)
 80010de:	429a      	cmp	r2, r3
 80010e0:	d80f      	bhi.n	8001102 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <HAL_DMA_Init+0x13c>)
 80010ea:	4413      	add	r3, r2
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_DMA_Init+0x140>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	009a      	lsls	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a42      	ldr	r2, [pc, #264]	; (8001208 <HAL_DMA_Init+0x144>)
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	e00e      	b.n	8001120 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_DMA_Init+0x148>)
 800110a:	4413      	add	r3, r2
 800110c:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <HAL_DMA_Init+0x140>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a3c      	ldr	r2, [pc, #240]	; (8001210 <HAL_DMA_Init+0x14c>)
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800113a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f8fe 	bl	8001374 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001180:	d102      	bne.n	8001188 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800119c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <HAL_DMA_Init+0x104>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d80c      	bhi.n	80011c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f91e 	bl	80013f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	e008      	b.n	80011da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40020407 	.word	0x40020407
 8001200:	bffdfff8 	.word	0xbffdfff8
 8001204:	cccccccd 	.word	0xcccccccd
 8001208:	40020000 	.word	0x40020000
 800120c:	bffdfbf8 	.word	0xbffdfbf8
 8001210:	40020400 	.word	0x40020400

08001214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	2204      	movs	r2, #4
 8001236:	409a      	lsls	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d026      	beq.n	800128e <HAL_DMA_IRQHandler+0x7a>
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	d021      	beq.n	800128e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	2b00      	cmp	r3, #0
 8001256:	d107      	bne.n	8001268 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0204 	bic.w	r2, r2, #4
 8001266:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	2104      	movs	r1, #4
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	2b00      	cmp	r3, #0
 8001282:	d071      	beq.n	8001368 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800128c:	e06c      	b.n	8001368 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	2202      	movs	r2, #2
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02e      	beq.n	8001300 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d029      	beq.n	8001300 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10b      	bne.n	80012d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 020a 	bic.w	r2, r2, #10
 80012c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f003 021f 	and.w	r2, r3, #31
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2102      	movs	r1, #2
 80012e0:	fa01 f202 	lsl.w	r2, r1, r2
 80012e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d038      	beq.n	8001368 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012fe:	e033      	b.n	8001368 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	2208      	movs	r2, #8
 800130a:	409a      	lsls	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d02a      	beq.n	800136a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d025      	beq.n	800136a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020e 	bic.w	r2, r2, #14
 800132c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 021f 	and.w	r2, r3, #31
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001368:	bf00      	nop
 800136a:	bf00      	nop
}
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001384:	429a      	cmp	r2, r3
 8001386:	d802      	bhi.n	800138e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e001      	b.n	8001392 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001390:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3b08      	subs	r3, #8
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	009a      	lsls	r2, r3, #2
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4413      	add	r3, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80013be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2201      	movs	r2, #1
 80013c8:	409a      	lsls	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40020407 	.word	0x40020407
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020820 	.word	0x40020820
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	40020880 	.word	0x40020880

080013f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	461a      	mov	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001412:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3b01      	subs	r3, #1
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	2201      	movs	r2, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	1000823f 	.word	0x1000823f
 8001434:	40020940 	.word	0x40020940

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001446:	e15a      	b.n	80016fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 814c 	beq.w	80016f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d005      	beq.n	8001478 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001474:	2b02      	cmp	r3, #2
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d017      	beq.n	8001516 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d123      	bne.n	800156a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	6939      	ldr	r1, [r7, #16]
 8001566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0203 	and.w	r2, r3, #3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80a6 	beq.w	80016f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ac:	4b5b      	ldr	r3, [pc, #364]	; (800171c <HAL_GPIO_Init+0x2e4>)
 80015ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b0:	4a5a      	ldr	r2, [pc, #360]	; (800171c <HAL_GPIO_Init+0x2e4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6613      	str	r3, [r2, #96]	; 0x60
 80015b8:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_GPIO_Init+0x2e4>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c4:	4a56      	ldr	r2, [pc, #344]	; (8001720 <HAL_GPIO_Init+0x2e8>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ee:	d01f      	beq.n	8001630 <HAL_GPIO_Init+0x1f8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <HAL_GPIO_Init+0x2ec>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d019      	beq.n	800162c <HAL_GPIO_Init+0x1f4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4b      	ldr	r2, [pc, #300]	; (8001728 <HAL_GPIO_Init+0x2f0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x1f0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_GPIO_Init+0x2f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1ec>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x2f8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1e8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2fc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1e4>
 8001618:	2305      	movs	r3, #5
 800161a:	e00a      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 800161c:	2306      	movs	r3, #6
 800161e:	e008      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001620:	2304      	movs	r3, #4
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001624:	2303      	movs	r3, #3
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001630:	2300      	movs	r3, #0
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001642:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x2e8>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_GPIO_Init+0x300>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001674:	4a30      	ldr	r2, [pc, #192]	; (8001738 <HAL_GPIO_Init+0x300>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800167a:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_GPIO_Init+0x300>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169e:	4a26      	ldr	r2, [pc, #152]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f ae9d 	bne.w	8001448 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	48001000 	.word	0x48001000
 8001734:	48001400 	.word	0x48001400
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001758:	e002      	b.n	8001760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d141      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d131      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178e:	4a46      	ldr	r2, [pc, #280]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a0:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2232      	movs	r2, #50	; 0x32
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a3f      	ldr	r2, [pc, #252]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	3301      	adds	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017be:	e002      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d102      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f2      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d158      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e057      	b.n	800189c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017f2:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017fc:	e04d      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001804:	d141      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001812:	d131      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2232      	movs	r2, #50	; 0x32
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	3301      	adds	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184a:	e002      	b.n	8001852 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3b01      	subs	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d102      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f2      	bne.n	800184c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d112      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e011      	b.n	800189c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001888:	e007      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001898:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40007000 	.word	0x40007000
 80018ac:	20000000 	.word	0x20000000
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6093      	str	r3, [r2, #8]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e306      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d075      	beq.n	80019de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f2:	4b97      	ldr	r3, [pc, #604]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fc:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0x3e>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d002      	beq.n	8001918 <HAL_RCC_OscConfig+0x44>
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d10b      	bne.n	8001930 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b8d      	ldr	r3, [pc, #564]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05b      	beq.n	80019dc <HAL_RCC_OscConfig+0x108>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d157      	bne.n	80019dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e2e1      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x74>
 800193a:	4b85      	ldr	r3, [pc, #532]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a84      	ldr	r2, [pc, #528]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xb0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x98>
 8001952:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a7e      	ldr	r2, [pc, #504]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7b      	ldr	r2, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xb0>
 800196c:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b75      	ldr	r3, [pc, #468]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a74      	ldr	r2, [pc, #464]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff faae 	bl	8000eec <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff faaa 	bl	8000eec <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e2a6      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xc0>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fa9a 	bl	8000eec <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fa96 	bl	8000eec <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e292      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b60      	ldr	r3, [pc, #384]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0xe8>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ea:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x136>
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_OscConfig+0x13c>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11f      	bne.n	8001a50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x154>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e265      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4946      	ldr	r1, [pc, #280]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a3c:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f953 	bl	8000cec <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e251      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fa42 	bl	8000eec <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fa3e 	bl	8000eec <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e23a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	492d      	ldr	r1, [pc, #180]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e01a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2a      	ldr	r2, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fa1e 	bl	8000eec <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fa1a 	bl	8000eec <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e216      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e0>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d041      	beq.n	8001b66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f9f7 	bl	8000eec <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff f9f3 	bl	8000eec <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1ef      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0ef      	beq.n	8001b02 <HAL_RCC_OscConfig+0x22e>
 8001b22:	e020      	b.n	8001b66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff f9da 	bl	8000eec <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b3a:	e00d      	b.n	8001b58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f9d6 	bl	8000eec <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d906      	bls.n	8001b58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1d2      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b58:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ea      	bne.n	8001b3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a6 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b78:	4b84      	ldr	r3, [pc, #528]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2b4>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x2b6>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	4a7e      	ldr	r2, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9a:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001baa:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <HAL_RCC_OscConfig+0x4bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x4bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x4bc>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f993 	bl	8000eec <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff f98f 	bl	8000eec <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e18b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x4bc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_RCC_OscConfig+0x32e>
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	e024      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d110      	bne.n	8001c2c <HAL_RCC_OscConfig+0x358>
 8001c0a:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	4a5e      	ldr	r2, [pc, #376]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	4a5a      	ldr	r2, [pc, #360]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
 8001c2c:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d016      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f94a 	bl	8000eec <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f946 	bl	8000eec <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e140      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ed      	beq.n	8001c5c <HAL_RCC_OscConfig+0x388>
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f933 	bl	8000eec <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f92f 	bl	8000eec <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e129      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ed      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d03c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cda:	4a2c      	ldr	r2, [pc, #176]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f902 	bl	8000eec <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cec:	f7ff f8fe 	bl	8000eec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0fa      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ef      	beq.n	8001cec <HAL_RCC_OscConfig+0x418>
 8001d0c:	e01b      	b.n	8001d46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f8e5 	bl	8000eec <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d26:	f7ff f8e1 	bl	8000eec <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0dd      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ef      	bne.n	8001d26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80d1 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	f000 808b 	beq.w	8001e74 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d15e      	bne.n	8001e24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_RCC_OscConfig+0x4b8>)
 8001d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f8bb 	bl	8000eec <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	e00c      	b.n	8001d94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7ff f8b7 	bl	8000eec <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d905      	bls.n	8001d94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0b3      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ec      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b56      	ldr	r3, [pc, #344]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6a11      	ldr	r1, [r2, #32]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db0:	3a01      	subs	r2, #1
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dba:	0212      	lsls	r2, r2, #8
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dc2:	0852      	lsrs	r2, r2, #1
 8001dc4:	3a01      	subs	r2, #1
 8001dc6:	0552      	lsls	r2, r2, #21
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dce:	0852      	lsrs	r2, r2, #1
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	0652      	lsls	r2, r2, #25
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dda:	06d2      	lsls	r2, r2, #27
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	4947      	ldr	r1, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b45      	ldr	r3, [pc, #276]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a44      	ldr	r2, [pc, #272]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b42      	ldr	r3, [pc, #264]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a41      	ldr	r2, [pc, #260]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f876 	bl	8000eec <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff f872 	bl	8000eec <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e06e      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x530>
 8001e22:	e066      	b.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a34      	ldr	r2, [pc, #208]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a31      	ldr	r2, [pc, #196]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f84e 	bl	8000eec <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff f84a 	bl	8000eec <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e046      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x580>
 8001e72:	e03e      	b.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e039      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d12c      	bne.n	8001eee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d123      	bne.n	8001eee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11b      	bne.n	8001eee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d113      	bne.n	8001eee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	019f800c 	.word	0x019f800c

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e11e      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b91      	ldr	r3, [pc, #580]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 020f 	bic.w	r2, r3, #15
 8001f32:	498c      	ldr	r1, [pc, #560]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e106      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d073      	beq.n	8002040 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d129      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0f4      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f70:	f000 f9d0 	bl	8002314 <RCC_GetSysClockFreqFromPLLSource>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_ClockConfig+0x268>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d93f      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d033      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12f      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9e:	4b72      	ldr	r3, [pc, #456]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa6:	4a70      	ldr	r2, [pc, #448]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e024      	b.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c6      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0be      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fdc:	f000 f8ce 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	; (800216c <HAL_RCC_ClockConfig+0x268>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d909      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4957      	ldr	r1, [pc, #348]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7fe ff6c 	bl	8000eec <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7fe ff68 	bl	8000eec <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e095      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a42      	ldr	r2, [pc, #264]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002062:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4936      	ldr	r1, [pc, #216]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
 8002092:	e008      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d21d      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 020f 	bic.w	r2, r3, #15
 80020bc:	4929      	ldr	r1, [pc, #164]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020c4:	f7fe ff12 	bl	8000eec <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe ff0e 	bl	8000eec <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e03b      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1ed      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4917      	ldr	r1, [pc, #92]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490f      	ldr	r1, [pc, #60]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212e:	f000 f825 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <HAL_RCC_ClockConfig+0x26c>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x270>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fdca 	bl	8000cec <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	04c4b400 	.word	0x04c4b400
 8002170:	080072cc 	.word	0x080072cc
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d102      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e047      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e03e      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d136      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3301      	adds	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	68d2      	ldr	r2, [r2, #12]
 80021dc:	0a12      	lsrs	r2, r2, #8
 80021de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
      break;
 80021e8:	e00c      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	0a12      	lsrs	r2, r2, #8
 80021f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0e5b      	lsrs	r3, r3, #25
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e001      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002224:	693b      	ldr	r3, [r7, #16]
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	080072dc 	.word	0x080072dc

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002288:	f7ff ffda 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080072dc 	.word	0x080072dc

080022b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	220f      	movs	r2, #15
 80022be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCC_GetClockConfig+0x60>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 020f 	and.w	r2, r3, #15
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40022000 	.word	0x40022000

08002314 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d10c      	bne.n	8002352 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002342:	68d2      	ldr	r2, [r2, #12]
 8002344:	0a12      	lsrs	r2, r2, #8
 8002346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
    break;
 8002350:	e00c      	b.n	800236c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800235c:	68d2      	ldr	r2, [r2, #12]
 800235e:	0a12      	lsrs	r2, r2, #8
 8002360:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    break;
 800236a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0e5b      	lsrs	r3, r3, #25
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40021000 	.word	0x40021000
 8002398:	007a1200 	.word	0x007a1200
 800239c:	00f42400 	.word	0x00f42400

080023a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a8:	2300      	movs	r3, #0
 80023aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ac:	2300      	movs	r3, #0
 80023ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8098 	beq.w	80024ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a39      	ldr	r2, [pc, #228]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023f6:	f7fe fd79 	bl	8000eec <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023fc:	e009      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe fd75 	bl	8000eec <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d902      	bls.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	74fb      	strb	r3, [r7, #19]
        break;
 8002410:	e005      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ef      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d159      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01e      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	d019      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800246c:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fd35 	bl	8000eec <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002484:	e00b      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fd31 	bl	8000eec <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	; 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d902      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	74fb      	strb	r3, [r7, #19]
            break;
 800249c:	e006      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ec      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10b      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024c8:	e008      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	74bb      	strb	r3, [r7, #18]
 80024ce:	e005      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024dc:	7c7b      	ldrb	r3, [r7, #17]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d105      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e2:	4ba6      	ldr	r3, [pc, #664]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	4aa5      	ldr	r2, [pc, #660]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f023 0203 	bic.w	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	499c      	ldr	r1, [pc, #624]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800251c:	4b97      	ldr	r3, [pc, #604]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f023 020c 	bic.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4994      	ldr	r1, [pc, #592]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253e:	4b8f      	ldr	r3, [pc, #572]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	498b      	ldr	r1, [pc, #556]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002560:	4b86      	ldr	r3, [pc, #536]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	4983      	ldr	r1, [pc, #524]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002582:	4b7e      	ldr	r3, [pc, #504]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002588:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	497a      	ldr	r1, [pc, #488]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a4:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4972      	ldr	r1, [pc, #456]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4969      	ldr	r1, [pc, #420]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4961      	ldr	r1, [pc, #388]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	4958      	ldr	r1, [pc, #352]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	4950      	ldr	r1, [pc, #320]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264a:	d105      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a4a      	ldr	r2, [pc, #296]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002664:	4b45      	ldr	r3, [pc, #276]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	4942      	ldr	r1, [pc, #264]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002682:	d105      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002684:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a3c      	ldr	r2, [pc, #240]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4934      	ldr	r1, [pc, #208]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ba:	d105      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	4926      	ldr	r1, [pc, #152]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f2:	d105      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a20      	ldr	r2, [pc, #128]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4918      	ldr	r1, [pc, #96]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d105      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002762:	d105      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002770:	7cbb      	ldrb	r3, [r7, #18]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e09d      	b.n	80028ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a2:	d009      	beq.n	80027b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
 80027aa:	e005      	b.n	80027b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f932 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027f8:	d902      	bls.n	8002800 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e002      	b.n	8002806 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800280e:	d007      	beq.n	8002820 <HAL_SPI_Init+0xa0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002818:	d002      	beq.n	8002820 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 0204 	and.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800289c:	ea42 0103 	orr.w	r1, r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e049      	b.n	800297c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f841 	bl	8002984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f000 fbbb 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04a      	b.n	8002a46 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <HAL_TIM_Base_Start_IT+0xbc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d013      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_TIM_Base_Start_IT+0xc0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d115      	bne.n	8002a30 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d015      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xaa>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d011      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2e:	e008      	b.n	8002a42 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e000      	b.n	8002a44 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40013400 	.word	0x40013400
 8002a64:	40014000 	.word	0x40014000
 8002a68:	00010007 	.word	0x00010007

08002a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e049      	b.n	8002b12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe f814 	bl	8000ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 faf0 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d122      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0202 	mvn.w	r2, #2
 8002b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fa79 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fa6b 	bl	8003040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa7c 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d122      	bne.n	8002bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d11b      	bne.n	8002bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0204 	mvn.w	r2, #4
 8002b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fa4f 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002bb6:	e005      	b.n	8002bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa41 	bl	8003040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa52 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d122      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11b      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0208 	mvn.w	r2, #8
 8002bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fa25 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa17 	bl	8003040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa28 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d122      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d11b      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0210 	mvn.w	r2, #16
 8002c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2208      	movs	r2, #8
 8002c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f9fb 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e005      	b.n	8002c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9ed 	bl	8003040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9fe 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10e      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0201 	mvn.w	r2, #1
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd fe8d 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d10e      	bne.n	8002cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b80      	cmp	r3, #128	; 0x80
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fdf5 	bl	80038b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fde8 	bl	80038c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9ac 	bl	800307c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0220 	mvn.w	r2, #32
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fda8 	bl	80038a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5e:	d10f      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fdae 	bl	80038dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d8e:	d10f      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fda0 	bl	80038f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbe:	d10f      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fd92 	bl	8003904 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dee:	d10f      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dfe:	d107      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fd84 	bl	8003918 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0ff      	b.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b14      	cmp	r3, #20
 8002e42:	f200 80f0 	bhi.w	8003026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002ea1 	.word	0x08002ea1
 8002e50:	08003027 	.word	0x08003027
 8002e54:	08003027 	.word	0x08003027
 8002e58:	08003027 	.word	0x08003027
 8002e5c:	08002ee1 	.word	0x08002ee1
 8002e60:	08003027 	.word	0x08003027
 8002e64:	08003027 	.word	0x08003027
 8002e68:	08003027 	.word	0x08003027
 8002e6c:	08002f23 	.word	0x08002f23
 8002e70:	08003027 	.word	0x08003027
 8002e74:	08003027 	.word	0x08003027
 8002e78:	08003027 	.word	0x08003027
 8002e7c:	08002f63 	.word	0x08002f63
 8002e80:	08003027 	.word	0x08003027
 8002e84:	08003027 	.word	0x08003027
 8002e88:	08003027 	.word	0x08003027
 8002e8c:	08002fa5 	.word	0x08002fa5
 8002e90:	08003027 	.word	0x08003027
 8002e94:	08003027 	.word	0x08003027
 8002e98:	08003027 	.word	0x08003027
 8002e9c:	08002fe5 	.word	0x08002fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f982 	bl	80031b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0208 	orr.w	r2, r2, #8
 8002eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6999      	ldr	r1, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	619a      	str	r2, [r3, #24]
      break;
 8002ede:	e0a5      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f9f2 	bl	80032d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]
      break;
 8002f20:	e084      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fa5b 	bl	80033e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0208 	orr.w	r2, r2, #8
 8002f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0204 	bic.w	r2, r2, #4
 8002f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	61da      	str	r2, [r3, #28]
      break;
 8002f60:	e064      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fac3 	bl	80034f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	61da      	str	r2, [r3, #28]
      break;
 8002fa2:	e043      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb2c 	bl	8003608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002fe2:	e023      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fb70 	bl	80036d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003024:	e002      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
      break;
 800302a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop

08003040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <TIM_Base_SetConfig+0x104>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00f      	beq.n	80030c8 <TIM_Base_SetConfig+0x38>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d00b      	beq.n	80030c8 <TIM_Base_SetConfig+0x38>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a39      	ldr	r2, [pc, #228]	; (8003198 <TIM_Base_SetConfig+0x108>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <TIM_Base_SetConfig+0x38>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a38      	ldr	r2, [pc, #224]	; (800319c <TIM_Base_SetConfig+0x10c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <TIM_Base_SetConfig+0x38>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <TIM_Base_SetConfig+0x110>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d108      	bne.n	80030da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <TIM_Base_SetConfig+0x104>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01b      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d017      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <TIM_Base_SetConfig+0x108>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <TIM_Base_SetConfig+0x10c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00f      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <TIM_Base_SetConfig+0x110>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <TIM_Base_SetConfig+0x114>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <TIM_Base_SetConfig+0x118>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_Base_SetConfig+0x8a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <TIM_Base_SetConfig+0x11c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d108      	bne.n	800312c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <TIM_Base_SetConfig+0x104>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00f      	beq.n	8003178 <TIM_Base_SetConfig+0xe8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <TIM_Base_SetConfig+0x110>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <TIM_Base_SetConfig+0xe8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <TIM_Base_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0xe8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <TIM_Base_SetConfig+0x118>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0xe8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <TIM_Base_SetConfig+0x11c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40013400 	.word	0x40013400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0201 	bic.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 0302 	bic.w	r3, r3, #2
 80031fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <TIM_OC1_SetConfig+0x10c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00f      	beq.n	8003230 <TIM_OC1_SetConfig+0x80>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <TIM_OC1_SetConfig+0x110>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_OC1_SetConfig+0x80>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <TIM_OC1_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_OC1_SetConfig+0x80>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <TIM_OC1_SetConfig+0x118>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_OC1_SetConfig+0x80>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a28      	ldr	r2, [pc, #160]	; (80032cc <TIM_OC1_SetConfig+0x11c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d10c      	bne.n	800324a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0308 	bic.w	r3, r3, #8
 8003236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <TIM_OC1_SetConfig+0x10c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_OC1_SetConfig+0xc2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <TIM_OC1_SetConfig+0x110>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_OC1_SetConfig+0xc2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <TIM_OC1_SetConfig+0x114>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_OC1_SetConfig+0xc2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <TIM_OC1_SetConfig+0x118>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_OC1_SetConfig+0xc2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <TIM_OC1_SetConfig+0x11c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	621a      	str	r2, [r3, #32]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40013400 	.word	0x40013400
 80032c4:	40014000 	.word	0x40014000
 80032c8:	40014400 	.word	0x40014400
 80032cc:	40014800 	.word	0x40014800

080032d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f023 0210 	bic.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0320 	bic.w	r3, r3, #32
 800331e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <TIM_OC2_SetConfig+0x100>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_OC2_SetConfig+0x6c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <TIM_OC2_SetConfig+0x104>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10d      	bne.n	8003358 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <TIM_OC2_SetConfig+0x100>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00f      	beq.n	8003380 <TIM_OC2_SetConfig+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <TIM_OC2_SetConfig+0x104>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_OC2_SetConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <TIM_OC2_SetConfig+0x108>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_OC2_SetConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <TIM_OC2_SetConfig+0x10c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC2_SetConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <TIM_OC2_SetConfig+0x110>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d113      	bne.n	80033a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40013400 	.word	0x40013400
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800

080033e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <TIM_OC3_SetConfig+0xfc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_OC3_SetConfig+0x6a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <TIM_OC3_SetConfig+0x100>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <TIM_OC3_SetConfig+0xfc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_OC3_SetConfig+0xae>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <TIM_OC3_SetConfig+0x100>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_OC3_SetConfig+0xae>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <TIM_OC3_SetConfig+0x104>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_OC3_SetConfig+0xae>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <TIM_OC3_SetConfig+0x108>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_OC3_SetConfig+0xae>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <TIM_OC3_SetConfig+0x10c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d113      	bne.n	80034ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40013400 	.word	0x40013400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800

080034f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <TIM_OC4_SetConfig+0x100>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC4_SetConfig+0x6c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <TIM_OC4_SetConfig+0x104>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10d      	bne.n	800357c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	031b      	lsls	r3, r3, #12
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <TIM_OC4_SetConfig+0x100>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00f      	beq.n	80035a4 <TIM_OC4_SetConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <TIM_OC4_SetConfig+0x104>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_OC4_SetConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <TIM_OC4_SetConfig+0x108>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_OC4_SetConfig+0xb0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <TIM_OC4_SetConfig+0x10c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_OC4_SetConfig+0xb0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <TIM_OC4_SetConfig+0x110>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d113      	bne.n	80035cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40013400 	.word	0x40013400
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800364c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <TIM_OC5_SetConfig+0xb4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_OC5_SetConfig+0x7a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <TIM_OC5_SetConfig+0xb8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_OC5_SetConfig+0x7a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <TIM_OC5_SetConfig+0xbc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_OC5_SetConfig+0x7a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <TIM_OC5_SetConfig+0xc0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_OC5_SetConfig+0x7a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <TIM_OC5_SetConfig+0xc4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d109      	bne.n	8003696 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40013400 	.word	0x40013400
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800

080036d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	051b      	lsls	r3, r3, #20
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a18      	ldr	r2, [pc, #96]	; (8003788 <TIM_OC6_SetConfig+0xb8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00f      	beq.n	800374c <TIM_OC6_SetConfig+0x7c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <TIM_OC6_SetConfig+0xbc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_OC6_SetConfig+0x7c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <TIM_OC6_SetConfig+0xc0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_OC6_SetConfig+0x7c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <TIM_OC6_SetConfig+0xc4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_OC6_SetConfig+0x7c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a14      	ldr	r2, [pc, #80]	; (8003798 <TIM_OC6_SetConfig+0xc8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d109      	bne.n	8003760 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	029b      	lsls	r3, r3, #10
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800

0800379c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e065      	b.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2c      	ldr	r2, [pc, #176]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d013      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d10c      	bne.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40014000 	.word	0x40014000

080038a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e042      	b.n	80039c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fd f907 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2224      	movs	r2, #36	; 0x24
 800395a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f82c 	bl	80039cc <UART_SetConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e022      	b.n	80039c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 faec 	bl	8003f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fb73 	bl	80040a8 <UART_CheckIdleState>
 80039c2:	4603      	mov	r3, r0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b08c      	sub	sp, #48	; 0x30
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4bab      	ldr	r3, [pc, #684]	; (8003ca8 <UART_SetConfig+0x2dc>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4aa0      	ldr	r2, [pc, #640]	; (8003cac <UART_SetConfig+0x2e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	4313      	orrs	r3, r2
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f023 010f 	bic.w	r1, r3, #15
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a91      	ldr	r2, [pc, #580]	; (8003cb0 <UART_SetConfig+0x2e4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d125      	bne.n	8003abc <UART_SetConfig+0xf0>
 8003a70:	4b90      	ldr	r3, [pc, #576]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d81a      	bhi.n	8003ab4 <UART_SetConfig+0xe8>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <UART_SetConfig+0xb8>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003aa5 	.word	0x08003aa5
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aad 	.word	0x08003aad
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9a:	e0d6      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa2:	e0d2      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aaa:	e0ce      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003aac:	2308      	movs	r3, #8
 8003aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab2:	e0ca      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aba:	e0c6      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7d      	ldr	r2, [pc, #500]	; (8003cb8 <UART_SetConfig+0x2ec>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d138      	bne.n	8003b38 <UART_SetConfig+0x16c>
 8003ac6:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d82d      	bhi.n	8003b30 <UART_SetConfig+0x164>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0x110>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003b21 	.word	0x08003b21
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b31 	.word	0x08003b31
 8003af8:	08003b31 	.word	0x08003b31
 8003afc:	08003b19 	.word	0x08003b19
 8003b00:	08003b31 	.word	0x08003b31
 8003b04:	08003b31 	.word	0x08003b31
 8003b08:	08003b31 	.word	0x08003b31
 8003b0c:	08003b29 	.word	0x08003b29
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b16:	e098      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b1e:	e094      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b26:	e090      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2e:	e08c      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b36:	e088      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5f      	ldr	r2, [pc, #380]	; (8003cbc <UART_SetConfig+0x2f0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d125      	bne.n	8003b8e <UART_SetConfig+0x1c2>
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b4c:	2b30      	cmp	r3, #48	; 0x30
 8003b4e:	d016      	beq.n	8003b7e <UART_SetConfig+0x1b2>
 8003b50:	2b30      	cmp	r3, #48	; 0x30
 8003b52:	d818      	bhi.n	8003b86 <UART_SetConfig+0x1ba>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d00a      	beq.n	8003b6e <UART_SetConfig+0x1a2>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d814      	bhi.n	8003b86 <UART_SetConfig+0x1ba>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <UART_SetConfig+0x19a>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d008      	beq.n	8003b76 <UART_SetConfig+0x1aa>
 8003b64:	e00f      	b.n	8003b86 <UART_SetConfig+0x1ba>
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6c:	e06d      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b74:	e069      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b76:	2304      	movs	r3, #4
 8003b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7c:	e065      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b84:	e061      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b86:	2310      	movs	r3, #16
 8003b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8c:	e05d      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4b      	ldr	r2, [pc, #300]	; (8003cc0 <UART_SetConfig+0x2f4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d125      	bne.n	8003be4 <UART_SetConfig+0x218>
 8003b98:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba4:	d016      	beq.n	8003bd4 <UART_SetConfig+0x208>
 8003ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba8:	d818      	bhi.n	8003bdc <UART_SetConfig+0x210>
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d00a      	beq.n	8003bc4 <UART_SetConfig+0x1f8>
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d814      	bhi.n	8003bdc <UART_SetConfig+0x210>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <UART_SetConfig+0x1f0>
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d008      	beq.n	8003bcc <UART_SetConfig+0x200>
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc2:	e042      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bca:	e03e      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd2:	e03a      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bda:	e036      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be2:	e032      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a30      	ldr	r2, [pc, #192]	; (8003cac <UART_SetConfig+0x2e0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d12a      	bne.n	8003c44 <UART_SetConfig+0x278>
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <UART_SetConfig+0x2e8>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bfc:	d01a      	beq.n	8003c34 <UART_SetConfig+0x268>
 8003bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c02:	d81b      	bhi.n	8003c3c <UART_SetConfig+0x270>
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c08:	d00c      	beq.n	8003c24 <UART_SetConfig+0x258>
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0e:	d815      	bhi.n	8003c3c <UART_SetConfig+0x270>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <UART_SetConfig+0x250>
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c18:	d008      	beq.n	8003c2c <UART_SetConfig+0x260>
 8003c1a:	e00f      	b.n	8003c3c <UART_SetConfig+0x270>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c22:	e012      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2a:	e00e      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c32:	e00a      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003c34:	2308      	movs	r3, #8
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3a:	e006      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c42:	e002      	b.n	8003c4a <UART_SetConfig+0x27e>
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <UART_SetConfig+0x2e0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	f040 80a8 	bne.w	8003da6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d834      	bhi.n	8003cc8 <UART_SetConfig+0x2fc>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x298>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003cc9 	.word	0x08003cc9
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003cc9 	.word	0x08003cc9
 8003c74:	08003c97 	.word	0x08003c97
 8003c78:	08003cc9 	.word	0x08003cc9
 8003c7c:	08003cc9 	.word	0x08003cc9
 8003c80:	08003cc9 	.word	0x08003cc9
 8003c84:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe fae6 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8e:	e021      	b.n	8003cd4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <UART_SetConfig+0x2f8>)
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c94:	e01e      	b.n	8003cd4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe fa71 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c9c:	e01a      	b.n	8003cd4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca4:	e016      	b.n	8003cd4 <UART_SetConfig+0x308>
 8003ca6:	bf00      	nop
 8003ca8:	cfff69f3 	.word	0xcfff69f3
 8003cac:	40008000 	.word	0x40008000
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40004400 	.word	0x40004400
 8003cbc:	40004800 	.word	0x40004800
 8003cc0:	40004c00 	.word	0x40004c00
 8003cc4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cd2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 812a 	beq.w	8003f30 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	4a9e      	ldr	r2, [pc, #632]	; (8003f5c <UART_SetConfig+0x590>)
 8003ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d305      	bcc.n	8003d0c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d903      	bls.n	8003d14 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d12:	e10d      	b.n	8003f30 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	2200      	movs	r2, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	4a8e      	ldr	r2, [pc, #568]	; (8003f5c <UART_SetConfig+0x590>)
 8003d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d36:	f7fc fa73 	bl	8000220 <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	020b      	lsls	r3, r1, #8
 8003d4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d50:	0202      	lsls	r2, r0, #8
 8003d52:	6979      	ldr	r1, [r7, #20]
 8003d54:	6849      	ldr	r1, [r1, #4]
 8003d56:	0849      	lsrs	r1, r1, #1
 8003d58:	2000      	movs	r0, #0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	eb12 0804 	adds.w	r8, r2, r4
 8003d62:	eb43 0905 	adc.w	r9, r3, r5
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	469a      	mov	sl, r3
 8003d6e:	4693      	mov	fp, r2
 8003d70:	4652      	mov	r2, sl
 8003d72:	465b      	mov	r3, fp
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	f7fc fa52 	bl	8000220 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8a:	d308      	bcc.n	8003d9e <UART_SetConfig+0x3d2>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d92:	d204      	bcs.n	8003d9e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e0c8      	b.n	8003f30 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003da4:	e0c4      	b.n	8003f30 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dae:	d167      	bne.n	8003e80 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003db0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d828      	bhi.n	8003e0a <UART_SetConfig+0x43e>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <UART_SetConfig+0x3f4>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	08003e0b 	.word	0x08003e0b
 8003dd0:	08003dfb 	.word	0x08003dfb
 8003dd4:	08003e0b 	.word	0x08003e0b
 8003dd8:	08003e0b 	.word	0x08003e0b
 8003ddc:	08003e0b 	.word	0x08003e0b
 8003de0:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe fa38 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8003de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dea:	e014      	b.n	8003e16 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7fe fa4a 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8003df0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003df2:	e010      	b.n	8003e16 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b5a      	ldr	r3, [pc, #360]	; (8003f60 <UART_SetConfig+0x594>)
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003df8:	e00d      	b.n	8003e16 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7fe f9bf 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003dfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e00:	e009      	b.n	8003e16 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e08:	e005      	b.n	8003e16 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8089 	beq.w	8003f30 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	4a4e      	ldr	r2, [pc, #312]	; (8003f5c <UART_SetConfig+0x590>)
 8003e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e30:	005a      	lsls	r2, r3, #1
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	441a      	add	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b0f      	cmp	r3, #15
 8003e48:	d916      	bls.n	8003e78 <UART_SetConfig+0x4ac>
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d212      	bcs.n	8003e78 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f023 030f 	bic.w	r3, r3, #15
 8003e5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	8bfb      	ldrh	r3, [r7, #30]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	8bfa      	ldrh	r2, [r7, #30]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	e05b      	b.n	8003f30 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e7e:	e057      	b.n	8003f30 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d828      	bhi.n	8003eda <UART_SetConfig+0x50e>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <UART_SetConfig+0x4c4>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	08003edb 	.word	0x08003edb
 8003ea0:	08003ecb 	.word	0x08003ecb
 8003ea4:	08003edb 	.word	0x08003edb
 8003ea8:	08003edb 	.word	0x08003edb
 8003eac:	08003edb 	.word	0x08003edb
 8003eb0:	08003ed3 	.word	0x08003ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7fe f9d0 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eba:	e014      	b.n	8003ee6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ebc:	f7fe f9e2 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ec2:	e010      	b.n	8003ee6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <UART_SetConfig+0x594>)
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ec8:	e00d      	b.n	8003ee6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eca:	f7fe f957 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ed0:	e009      	b.n	8003ee6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ed8:	e005      	b.n	8003ee6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ee4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d021      	beq.n	8003f30 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <UART_SetConfig+0x590>)
 8003ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	441a      	add	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	d909      	bls.n	8003f2a <UART_SetConfig+0x55e>
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d205      	bcs.n	8003f2a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e002      	b.n	8003f30 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2200      	movs	r2, #0
 8003f44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3730      	adds	r7, #48	; 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	080072e4 	.word	0x080072e4
 8003f60:	00f42400 	.word	0x00f42400

08003f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01a      	beq.n	800407a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004062:	d10a      	bne.n	800407a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b8:	f7fc ff18 	bl	8000eec <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d10e      	bne.n	80040ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f82f 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e025      	b.n	8004136 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d10e      	bne.n	8004116 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f819 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e00f      	b.n	8004136 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b09c      	sub	sp, #112	; 0x70
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414e:	e0a9      	b.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	f000 80a5 	beq.w	80042a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fc fec7 	bl	8000eec <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <UART_WaitOnFlagUntilTimeout+0x32>
 800416a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416c:	2b00      	cmp	r3, #0
 800416e:	d140      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800417e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004184:	667b      	str	r3, [r7, #100]	; 0x64
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004190:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e6      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e069      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d051      	beq.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420e:	d149      	bne.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004218:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800422e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
 800423a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800423e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e6      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	613b      	str	r3, [r7, #16]
   return(result);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	66bb      	str	r3, [r7, #104]	; 0x68
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800426c:	623a      	str	r2, [r7, #32]
 800426e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	69f9      	ldr	r1, [r7, #28]
 8004272:	6a3a      	ldr	r2, [r7, #32]
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	61bb      	str	r3, [r7, #24]
   return(result);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e010      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	429a      	cmp	r2, r3
 80042c0:	f43f af46 	beq.w	8004150 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3770      	adds	r7, #112	; 0x70
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e027      	b.n	8004334 <HAL_UARTEx_DisableFifoMode+0x66>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004312:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004354:	2302      	movs	r3, #2
 8004356:	e02d      	b.n	80043b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f84f 	bl	8004438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e02d      	b.n	8004430 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f811 	bl	8004438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004444:	2b00      	cmp	r3, #0
 8004446:	d108      	bne.n	800445a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004458:	e031      	b.n	80044be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800445a:	2308      	movs	r3, #8
 800445c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800445e:	2308      	movs	r3, #8
 8004460:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	0e5b      	lsrs	r3, r3, #25
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	0f5b      	lsrs	r3, r3, #29
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004482:	7bbb      	ldrb	r3, [r7, #14]
 8004484:	7b3a      	ldrb	r2, [r7, #12]
 8004486:	4911      	ldr	r1, [pc, #68]	; (80044cc <UARTEx_SetNbDataToProcess+0x94>)
 8004488:	5c8a      	ldrb	r2, [r1, r2]
 800448a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800448e:	7b3a      	ldrb	r2, [r7, #12]
 8004490:	490f      	ldr	r1, [pc, #60]	; (80044d0 <UARTEx_SetNbDataToProcess+0x98>)
 8004492:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004494:	fb93 f3f2 	sdiv	r3, r3, r2
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	7b7a      	ldrb	r2, [r7, #13]
 80044a4:	4909      	ldr	r1, [pc, #36]	; (80044cc <UARTEx_SetNbDataToProcess+0x94>)
 80044a6:	5c8a      	ldrb	r2, [r1, r2]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044ac:	7b7a      	ldrb	r2, [r7, #13]
 80044ae:	4908      	ldr	r1, [pc, #32]	; (80044d0 <UARTEx_SetNbDataToProcess+0x98>)
 80044b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	080072fc 	.word	0x080072fc
 80044d0:	08007304 	.word	0x08007304

080044d4 <__NVIC_SetPriority>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db0a      	blt.n	80044fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	490c      	ldr	r1, [pc, #48]	; (8004520 <__NVIC_SetPriority+0x4c>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	0112      	lsls	r2, r2, #4
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	440b      	add	r3, r1
 80044f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044fc:	e00a      	b.n	8004514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4908      	ldr	r1, [pc, #32]	; (8004524 <__NVIC_SetPriority+0x50>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3b04      	subs	r3, #4
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	440b      	add	r3, r1
 8004512:	761a      	strb	r2, [r3, #24]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000e100 	.word	0xe000e100
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <SysTick_Handler+0x1c>)
 800452e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004530:	f001 fd28 	bl	8005f84 <xTaskGetSchedulerState>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800453a:	f002 fb0d 	bl	8006b58 <xPortSysTickHandler>
  }
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800454c:	2100      	movs	r1, #0
 800454e:	f06f 0004 	mvn.w	r0, #4
 8004552:	f7ff ffbf 	bl	80044d4 <__NVIC_SetPriority>
#endif
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004562:	f3ef 8305 	mrs	r3, IPSR
 8004566:	603b      	str	r3, [r7, #0]
  return(result);
 8004568:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800456e:	f06f 0305 	mvn.w	r3, #5
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e00c      	b.n	8004590 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <osKernelInitialize+0x44>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <osKernelInitialize+0x44>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e002      	b.n	8004590 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000890 	.word	0x20000890

080045a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045aa:	f3ef 8305 	mrs	r3, IPSR
 80045ae:	603b      	str	r3, [r7, #0]
  return(result);
 80045b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <osKernelStart+0x1a>
    stat = osErrorISR;
 80045b6:	f06f 0305 	mvn.w	r3, #5
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	e010      	b.n	80045e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <osKernelStart+0x48>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d109      	bne.n	80045da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045c6:	f7ff ffbf 	bl	8004548 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <osKernelStart+0x48>)
 80045cc:	2202      	movs	r2, #2
 80045ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045d0:	f001 f87c 	bl	80056cc <vTaskStartScheduler>
      stat = osOK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	e002      	b.n	80045e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045e0:	687b      	ldr	r3, [r7, #4]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000890 	.word	0x20000890

080045f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08e      	sub	sp, #56	; 0x38
 80045f4:	af04      	add	r7, sp, #16
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004600:	f3ef 8305 	mrs	r3, IPSR
 8004604:	617b      	str	r3, [r7, #20]
  return(result);
 8004606:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004608:	2b00      	cmp	r3, #0
 800460a:	d17e      	bne.n	800470a <osThreadNew+0x11a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d07b      	beq.n	800470a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004616:	2318      	movs	r3, #24
 8004618:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d045      	beq.n	80046b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <osThreadNew+0x48>
        name = attr->name;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <osThreadNew+0x6e>
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b38      	cmp	r3, #56	; 0x38
 8004650:	d805      	bhi.n	800465e <osThreadNew+0x6e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <osThreadNew+0x72>
        return (NULL);
 800465e:	2300      	movs	r3, #0
 8004660:	e054      	b.n	800470c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <osThreadNew+0xa8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2bbb      	cmp	r3, #187	; 0xbb
 8004680:	d90a      	bls.n	8004698 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <osThreadNew+0xa8>
        mem = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e010      	b.n	80046ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10c      	bne.n	80046ba <osThreadNew+0xca>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <osThreadNew+0xca>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <osThreadNew+0xca>
          mem = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e001      	b.n	80046ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d110      	bne.n	80046e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046c8:	9202      	str	r2, [sp, #8]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fe0c 	bl	80052f4 <xTaskCreateStatic>
 80046dc:	4603      	mov	r3, r0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e013      	b.n	800470a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d110      	bne.n	800470a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fe57 	bl	80053ae <xTaskCreate>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d001      	beq.n	800470a <osThreadNew+0x11a>
            hTask = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800470a:	693b      	ldr	r3, [r7, #16]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471c:	f3ef 8305 	mrs	r3, IPSR
 8004720:	60bb      	str	r3, [r7, #8]
  return(result);
 8004722:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <osDelay+0x1c>
    stat = osErrorISR;
 8004728:	f06f 0305 	mvn.w	r3, #5
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e007      	b.n	8004740 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <osDelay+0x2c>
      vTaskDelay(ticks);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 ff92 	bl	8005664 <vTaskDelay>
    }
  }

  return (stat);
 8004740:	68fb      	ldr	r3, [r7, #12]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a07      	ldr	r2, [pc, #28]	; (8004778 <vApplicationGetIdleTaskMemory+0x2c>)
 800475c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a06      	ldr	r2, [pc, #24]	; (800477c <vApplicationGetIdleTaskMemory+0x30>)
 8004762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2280      	movs	r2, #128	; 0x80
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000894 	.word	0x20000894
 800477c:	20000950 	.word	0x20000950

08004780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a07      	ldr	r2, [pc, #28]	; (80047ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800479e:	601a      	str	r2, [r3, #0]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20000b50 	.word	0x20000b50
 80047b0:	20000c0c 	.word	0x20000c0c

080047b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f103 0208 	add.w	r2, r3, #8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295
 80047cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f103 0208 	add.w	r2, r3, #8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0208 	add.w	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d103      	bne.n	8004876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e00c      	b.n	8004890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3308      	adds	r3, #8
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e002      	b.n	8004884 <vListInsert+0x2e>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d2f6      	bcs.n	800487e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6892      	ldr	r2, [r2, #8]
 80048de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d103      	bne.n	80048fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004946:	f002 f875 	bl	8006a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	441a      	add	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	3b01      	subs	r3, #1
 8004978:	68f9      	ldr	r1, [r7, #12]
 800497a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	22ff      	movs	r2, #255	; 0xff
 800498a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	22ff      	movs	r2, #255	; 0xff
 8004992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d114      	bne.n	80049c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01a      	beq.n	80049da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3310      	adds	r3, #16
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 f929 	bl	8005c00 <xTaskRemoveFromEventList>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <xQueueGenericReset+0xcc>)
 80049b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	e009      	b.n	80049da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3310      	adds	r3, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fef2 	bl	80047b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff feed 	bl	80047b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049da:	f002 f85b 	bl	8006a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049de:	2301      	movs	r3, #1
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	; 0x38
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <xQueueGenericCreateStatic+0x52>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <xQueueGenericCreateStatic+0x56>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <xQueueGenericCreateStatic+0x58>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	623b      	str	r3, [r7, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <xQueueGenericCreateStatic+0x7e>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericCreateStatic+0x82>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericCreateStatic+0x84>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	61fb      	str	r3, [r7, #28]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a8a:	2350      	movs	r3, #80	; 0x50
 8004a8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b50      	cmp	r3, #80	; 0x50
 8004a92:	d00a      	beq.n	8004aaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	61bb      	str	r3, [r7, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004aaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004abe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f805 	bl	8004adc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e002      	b.n	8004afe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	69b8      	ldr	r0, [r7, #24]
 8004b0e:	f7ff ff05 	bl	800491c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGenericSend+0x32>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <xQueueGenericSend+0x40>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <xQueueGenericSend+0x44>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <xQueueGenericSend+0x46>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <xQueueGenericSend+0x60>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d103      	bne.n	8004b92 <xQueueGenericSend+0x6e>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <xQueueGenericSend+0x72>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <xQueueGenericSend+0x74>
 8004b96:	2300      	movs	r3, #0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	623b      	str	r3, [r7, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bb2:	f001 f9e7 	bl	8005f84 <xTaskGetSchedulerState>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <xQueueGenericSend+0x9e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <xQueueGenericSend+0xa2>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <xQueueGenericSend+0xa4>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	61fb      	str	r3, [r7, #28]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004be2:	f001 ff27 	bl	8006a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <xQueueGenericSend+0xd4>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d129      	bne.n	8004c4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 fa0b 	bl	8005018 <prvCopyDataToQueue>
 8004c02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fff5 	bl	8005c00 <xTaskRemoveFromEventList>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <xQueueGenericSend+0x1f8>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	e00a      	b.n	8004c44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <xQueueGenericSend+0x1f8>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c44:	f001 ff26 	bl	8006a94 <vPortExitCritical>
				return pdPASS;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e063      	b.n	8004d14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c52:	f001 ff1f 	bl	8006a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e05c      	b.n	8004d14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f82f 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c6e:	f001 ff11 	bl	8006a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c72:	f000 fd9b 	bl	80057ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c76:	f001 fedd 	bl	8006a34 <vPortEnterCritical>
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c80:	b25b      	sxtb	r3, r3
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d103      	bne.n	8004c90 <xQueueGenericSend+0x16c>
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d103      	bne.n	8004ca6 <xQueueGenericSend+0x182>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca6:	f001 fef5 	bl	8006a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004caa:	1d3a      	adds	r2, r7, #4
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 f81e 	bl	8005cf4 <xTaskCheckForTimeOut>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d124      	bne.n	8004d08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc0:	f000 faa2 	bl	8005208 <prvIsQueueFull>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	3310      	adds	r3, #16
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 ff44 	bl	8005b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cda:	f000 fa2d 	bl	8005138 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cde:	f000 fd73 	bl	80057c8 <xTaskResumeAll>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f af7c 	bne.w	8004be2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <xQueueGenericSend+0x1f8>)
 8004cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	e772      	b.n	8004be2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cfe:	f000 fa1b 	bl	8005138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d02:	f000 fd61 	bl	80057c8 <xTaskResumeAll>
 8004d06:	e76c      	b.n	8004be2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fa15 	bl	8005138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d0e:	f000 fd5b 	bl	80057c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3738      	adds	r7, #56	; 0x38
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b090      	sub	sp, #64	; 0x40
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <xQueueGenericSendFromISR+0x3c>
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <xQueueGenericSendFromISR+0x40>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <xQueueGenericSendFromISR+0x42>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSendFromISR+0x6a>
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <xQueueGenericSendFromISR+0x6e>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <xQueueGenericSendFromISR+0x70>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	623b      	str	r3, [r7, #32]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004daa:	f001 ff25 	bl	8006bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dae:	f3ef 8211 	mrs	r2, BASEPRI
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	61fa      	str	r2, [r7, #28]
 8004dc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <xQueueGenericSendFromISR+0xbc>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d12f      	bne.n	8004e3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004df2:	f000 f911 	bl	8005018 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004df6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d112      	bne.n	8004e26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d016      	beq.n	8004e36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	3324      	adds	r3, #36	; 0x24
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fef7 	bl	8005c00 <xTaskRemoveFromEventList>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e007      	b.n	8004e36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	b25a      	sxtb	r2, r3
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e36:	2301      	movs	r3, #1
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e3a:	e001      	b.n	8004e40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3740      	adds	r7, #64	; 0x40
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <xQueueReceive+0x30>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	623b      	str	r3, [r7, #32]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <xQueueReceive+0x3e>
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <xQueueReceive+0x42>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <xQueueReceive+0x44>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xQueueReceive+0x5e>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	61fb      	str	r3, [r7, #28]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eb6:	f001 f865 	bl	8005f84 <xTaskGetSchedulerState>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <xQueueReceive+0x6e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueReceive+0x72>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueReceive+0x74>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xQueueReceive+0x8e>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61bb      	str	r3, [r7, #24]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee6:	f001 fda5 	bl	8006a34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01f      	beq.n	8004f36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efa:	f000 f8f7 	bl	80050ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00f      	beq.n	8004f2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	3310      	adds	r3, #16
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fe74 	bl	8005c00 <xTaskRemoveFromEventList>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <xQueueReceive+0x1bc>)
 8004f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f2e:	f001 fdb1 	bl	8006a94 <vPortExitCritical>
				return pdPASS;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e069      	b.n	800500a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f3c:	f001 fdaa 	bl	8006a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e062      	b.n	800500a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f4a:	f107 0310 	add.w	r3, r7, #16
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 feba 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f58:	f001 fd9c 	bl	8006a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f5c:	f000 fc26 	bl	80057ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f60:	f001 fd68 	bl	8006a34 <vPortEnterCritical>
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f6a:	b25b      	sxtb	r3, r3
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d103      	bne.n	8004f7a <xQueueReceive+0x122>
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f80:	b25b      	sxtb	r3, r3
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d103      	bne.n	8004f90 <xQueueReceive+0x138>
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f90:	f001 fd80 	bl	8006a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f94:	1d3a      	adds	r2, r7, #4
 8004f96:	f107 0310 	add.w	r3, r7, #16
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fea9 	bl	8005cf4 <xTaskCheckForTimeOut>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d123      	bne.n	8004ff0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004faa:	f000 f917 	bl	80051dc <prvIsQueueEmpty>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d017      	beq.n	8004fe4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fdcf 	bl	8005b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc4:	f000 f8b8 	bl	8005138 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fc8:	f000 fbfe 	bl	80057c8 <xTaskResumeAll>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d189      	bne.n	8004ee6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <xQueueReceive+0x1bc>)
 8004fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	e780      	b.n	8004ee6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f000 f8a7 	bl	8005138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fea:	f000 fbed 	bl	80057c8 <xTaskResumeAll>
 8004fee:	e77a      	b.n	8004ee6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff2:	f000 f8a1 	bl	8005138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff6:	f000 fbe7 	bl	80057c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffc:	f000 f8ee 	bl	80051dc <prvIsQueueEmpty>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	f43f af6f 	beq.w	8004ee6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800500a:	4618      	mov	r0, r3
 800500c:	3730      	adds	r7, #48	; 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10d      	bne.n	8005052 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d14d      	bne.n	80050da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 ffbc 	bl	8005fc0 <xTaskPriorityDisinherit>
 8005048:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	e043      	b.n	80050da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d119      	bne.n	800508c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6858      	ldr	r0, [r3, #4]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	461a      	mov	r2, r3
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	f002 f818 	bl	8007098 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	d32b      	bcc.n	80050da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	e026      	b.n	80050da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68d8      	ldr	r0, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	461a      	mov	r2, r3
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	f001 fffe 	bl	8007098 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	425b      	negs	r3, r3
 80050a6:	441a      	add	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d207      	bcs.n	80050c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	425b      	negs	r3, r3
 80050c2:	441a      	add	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d105      	bne.n	80050da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050e2:	697b      	ldr	r3, [r7, #20]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	441a      	add	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d303      	bcc.n	8005120 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68d9      	ldr	r1, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	461a      	mov	r2, r3
 800512a:	6838      	ldr	r0, [r7, #0]
 800512c:	f001 ffb4 	bl	8007098 <memcpy>
	}
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005140:	f001 fc78 	bl	8006a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800514a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800514c:	e011      	b.n	8005172 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d012      	beq.n	800517c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3324      	adds	r3, #36	; 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fd50 	bl	8005c00 <xTaskRemoveFromEventList>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005166:	f000 fe27 	bl	8005db8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3b01      	subs	r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	dce9      	bgt.n	800514e <prvUnlockQueue+0x16>
 800517a:	e000      	b.n	800517e <prvUnlockQueue+0x46>
					break;
 800517c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005186:	f001 fc85 	bl	8006a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800518a:	f001 fc53 	bl	8006a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005194:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005196:	e011      	b.n	80051bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3310      	adds	r3, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fd2b 	bl	8005c00 <xTaskRemoveFromEventList>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051b0:	f000 fe02 	bl	8005db8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dce9      	bgt.n	8005198 <prvUnlockQueue+0x60>
 80051c4:	e000      	b.n	80051c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	22ff      	movs	r2, #255	; 0xff
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051d0:	f001 fc60 	bl	8006a94 <vPortExitCritical>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051e4:	f001 fc26 	bl	8006a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e001      	b.n	80051fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051fa:	f001 fc4b 	bl	8006a94 <vPortExitCritical>

	return xReturn;
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005210:	f001 fc10 	bl	8006a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	429a      	cmp	r2, r3
 800521e:	d102      	bne.n	8005226 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e001      	b.n	800522a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f001 fc33 	bl	8006a94 <vPortExitCritical>

	return xReturn;
 800522e:	68fb      	ldr	r3, [r7, #12]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e014      	b.n	8005272 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005248:	4a0f      	ldr	r2, [pc, #60]	; (8005288 <vQueueAddToRegistry+0x50>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005254:	490c      	ldr	r1, [pc, #48]	; (8005288 <vQueueAddToRegistry+0x50>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <vQueueAddToRegistry+0x50>)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800526a:	e006      	b.n	800527a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b07      	cmp	r3, #7
 8005276:	d9e7      	bls.n	8005248 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	2000100c 	.word	0x2000100c

0800528c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800529c:	f001 fbca 	bl	8006a34 <vPortEnterCritical>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d103      	bne.n	80052b6 <vQueueWaitForMessageRestricted+0x2a>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d103      	bne.n	80052cc <vQueueWaitForMessageRestricted+0x40>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052cc:	f001 fbe2 	bl	8006a94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fc61 	bl	8005ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052e6:	6978      	ldr	r0, [r7, #20]
 80052e8:	f7ff ff26 	bl	8005138 <prvUnlockQueue>
	}
 80052ec:	bf00      	nop
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08e      	sub	sp, #56	; 0x38
 80052f8:	af04      	add	r7, sp, #16
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	623b      	str	r3, [r7, #32]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xTaskCreateStatic+0x46>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	61fb      	str	r3, [r7, #28]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800533a:	23bc      	movs	r3, #188	; 0xbc
 800533c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2bbc      	cmp	r3, #188	; 0xbc
 8005342:	d00a      	beq.n	800535a <xTaskCreateStatic+0x66>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	61bb      	str	r3, [r7, #24]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800535a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01e      	beq.n	80053a0 <xTaskCreateStatic+0xac>
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005370:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	2202      	movs	r2, #2
 8005376:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800537a:	2300      	movs	r3, #0
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f850 	bl	8005438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800539a:	f000 f8f3 	bl	8005584 <prvAddNewTaskToReadyList>
 800539e:	e001      	b.n	80053a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053a4:	697b      	ldr	r3, [r7, #20]
	}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3728      	adds	r7, #40	; 0x28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b08c      	sub	sp, #48	; 0x30
 80053b2:	af04      	add	r7, sp, #16
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fc58 	bl	8006c78 <pvPortMalloc>
 80053c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00e      	beq.n	80053ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053d0:	20bc      	movs	r0, #188	; 0xbc
 80053d2:	f001 fc51 	bl	8006c78 <pvPortMalloc>
 80053d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
 80053e4:	e005      	b.n	80053f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053e6:	6978      	ldr	r0, [r7, #20]
 80053e8:	f001 fd12 	bl	8006e10 <vPortFree>
 80053ec:	e001      	b.n	80053f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d017      	beq.n	8005428 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	2300      	movs	r3, #0
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f80e 	bl	8005438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800541c:	69f8      	ldr	r0, [r7, #28]
 800541e:	f000 f8b1 	bl	8005584 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e002      	b.n	800542e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800542e:	69bb      	ldr	r3, [r7, #24]
	}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	461a      	mov	r2, r3
 8005450:	21a5      	movs	r1, #165	; 0xa5
 8005452:	f001 fe2f 	bl	80070b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005460:	3b01      	subs	r3, #1
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <prvInitialiseNewTask+0x58>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	617b      	str	r3, [r7, #20]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01f      	beq.n	80054d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e012      	b.n	80054c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	7819      	ldrb	r1, [r3, #0]
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	3334      	adds	r3, #52	; 0x34
 80054ac:	460a      	mov	r2, r1
 80054ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d9e9      	bls.n	800549c <prvInitialiseNewTask+0x64>
 80054c8:	e000      	b.n	80054cc <prvInitialiseNewTask+0x94>
			{
				break;
 80054ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d4:	e003      	b.n	80054de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	2b37      	cmp	r3, #55	; 0x37
 80054e2:	d901      	bls.n	80054e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054e4:	2337      	movs	r3, #55	; 0x37
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	3304      	adds	r3, #4
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff f978 	bl	80047f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	3318      	adds	r3, #24
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff f973 	bl	80047f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005512:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005522:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	3354      	adds	r3, #84	; 0x54
 8005538:	2260      	movs	r2, #96	; 0x60
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f001 fdb9 	bl	80070b4 <memset>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	4a0c      	ldr	r2, [pc, #48]	; (8005578 <prvInitialiseNewTask+0x140>)
 8005546:	659a      	str	r2, [r3, #88]	; 0x58
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	4a0c      	ldr	r2, [pc, #48]	; (800557c <prvInitialiseNewTask+0x144>)
 800554c:	65da      	str	r2, [r3, #92]	; 0x5c
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	4a0b      	ldr	r2, [pc, #44]	; (8005580 <prvInitialiseNewTask+0x148>)
 8005552:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	69b8      	ldr	r0, [r7, #24]
 800555a:	f001 f941 	bl	80067e0 <pxPortInitialiseStack>
 800555e:	4602      	mov	r2, r0
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	0800732c 	.word	0x0800732c
 800557c:	0800734c 	.word	0x0800734c
 8005580:	0800730c 	.word	0x0800730c

08005584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800558c:	f001 fa52 	bl	8006a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005590:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <prvAddNewTaskToReadyList+0xc4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <prvAddNewTaskToReadyList+0xc4>)
 8005598:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800559a:	4b2c      	ldr	r3, [pc, #176]	; (800564c <prvAddNewTaskToReadyList+0xc8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <prvAddNewTaskToReadyList+0xc8>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055a8:	4b27      	ldr	r3, [pc, #156]	; (8005648 <prvAddNewTaskToReadyList+0xc4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d110      	bne.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055b0:	f000 fc26 	bl	8005e00 <prvInitialiseTaskLists>
 80055b4:	e00d      	b.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <prvAddNewTaskToReadyList+0xcc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <prvAddNewTaskToReadyList+0xc8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d802      	bhi.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055cc:	4a1f      	ldr	r2, [pc, #124]	; (800564c <prvAddNewTaskToReadyList+0xc8>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <prvAddNewTaskToReadyList+0xd0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <prvAddNewTaskToReadyList+0xd0>)
 80055da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055dc:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <prvAddNewTaskToReadyList+0xd0>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <prvAddNewTaskToReadyList+0xd4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <prvAddNewTaskToReadyList+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <prvAddNewTaskToReadyList+0xd4>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <prvAddNewTaskToReadyList+0xd8>)
 8005606:	441a      	add	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7ff f8fd 	bl	800480e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005614:	f001 fa3e 	bl	8006a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <prvAddNewTaskToReadyList+0xcc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00e      	beq.n	800563e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <prvAddNewTaskToReadyList+0xc8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	429a      	cmp	r2, r3
 800562c:	d207      	bcs.n	800563e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <prvAddNewTaskToReadyList+0xdc>)
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20001520 	.word	0x20001520
 800564c:	2000104c 	.word	0x2000104c
 8005650:	2000152c 	.word	0x2000152c
 8005654:	2000153c 	.word	0x2000153c
 8005658:	20001528 	.word	0x20001528
 800565c:	20001050 	.word	0x20001050
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <vTaskDelay+0x60>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <vTaskDelay+0x30>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	60bb      	str	r3, [r7, #8]
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005694:	f000 f88a 	bl	80057ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005698:	2100      	movs	r1, #0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fcfe 	bl	800609c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056a0:	f000 f892 	bl	80057c8 <xTaskResumeAll>
 80056a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <vTaskDelay+0x64>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20001548 	.word	0x20001548
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056da:	463a      	mov	r2, r7
 80056dc:	1d39      	adds	r1, r7, #4
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f832 	bl	800474c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	9202      	str	r2, [sp, #8]
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2300      	movs	r3, #0
 80056f8:	460a      	mov	r2, r1
 80056fa:	4924      	ldr	r1, [pc, #144]	; (800578c <vTaskStartScheduler+0xc0>)
 80056fc:	4824      	ldr	r0, [pc, #144]	; (8005790 <vTaskStartScheduler+0xc4>)
 80056fe:	f7ff fdf9 	bl	80052f4 <xTaskCreateStatic>
 8005702:	4603      	mov	r3, r0
 8005704:	4a23      	ldr	r2, [pc, #140]	; (8005794 <vTaskStartScheduler+0xc8>)
 8005706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <vTaskStartScheduler+0xc8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e001      	b.n	800571a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005720:	f000 fd10 	bl	8006144 <xTimerCreateTimerTask>
 8005724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d11b      	bne.n	8005764 <vTaskStartScheduler+0x98>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	613b      	str	r3, [r7, #16]
}
 800573e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <vTaskStartScheduler+0xcc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3354      	adds	r3, #84	; 0x54
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <vTaskStartScheduler+0xd0>)
 8005748:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <vTaskStartScheduler+0xd4>)
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <vTaskStartScheduler+0xd8>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <vTaskStartScheduler+0xdc>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800575e:	f001 f8c7 	bl	80068f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005762:	e00e      	b.n	8005782 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d10a      	bne.n	8005782 <vTaskStartScheduler+0xb6>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60fb      	str	r3, [r7, #12]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <vTaskStartScheduler+0xb4>
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	0800726c 	.word	0x0800726c
 8005790:	08005dd1 	.word	0x08005dd1
 8005794:	20001544 	.word	0x20001544
 8005798:	2000104c 	.word	0x2000104c
 800579c:	20000010 	.word	0x20000010
 80057a0:	20001540 	.word	0x20001540
 80057a4:	2000152c 	.word	0x2000152c
 80057a8:	20001524 	.word	0x20001524

080057ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <vTaskSuspendAll+0x18>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	4a03      	ldr	r2, [pc, #12]	; (80057c4 <vTaskSuspendAll+0x18>)
 80057b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057ba:	bf00      	nop
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	20001548 	.word	0x20001548

080057c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057d6:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <xTaskResumeAll+0x118>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	603b      	str	r3, [r7, #0]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057f4:	f001 f91e 	bl	8006a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057f8:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <xTaskResumeAll+0x118>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	4a38      	ldr	r2, [pc, #224]	; (80058e0 <xTaskResumeAll+0x118>)
 8005800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005802:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <xTaskResumeAll+0x118>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d162      	bne.n	80058d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800580a:	4b36      	ldr	r3, [pc, #216]	; (80058e4 <xTaskResumeAll+0x11c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d05e      	beq.n	80058d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005812:	e02f      	b.n	8005874 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <xTaskResumeAll+0x120>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3318      	adds	r3, #24
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff f851 	bl	80048c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff f84c 	bl	80048c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <xTaskResumeAll+0x124>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d903      	bls.n	8005844 <xTaskResumeAll+0x7c>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <xTaskResumeAll+0x124>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <xTaskResumeAll+0x128>)
 8005852:	441a      	add	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe ffd7 	bl	800480e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <xTaskResumeAll+0x12c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800586e:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <xTaskResumeAll+0x130>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005874:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <xTaskResumeAll+0x120>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1cb      	bne.n	8005814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005882:	f000 fb5f 	bl	8005f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <xTaskResumeAll+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d010      	beq.n	80058b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005892:	f000 f847 	bl	8005924 <xTaskIncrementTick>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <xTaskResumeAll+0x130>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f1      	bne.n	8005892 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <xTaskResumeAll+0x134>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058b4:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <xTaskResumeAll+0x130>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <xTaskResumeAll+0x138>)
 80058c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058d0:	f001 f8e0 	bl	8006a94 <vPortExitCritical>

	return xAlreadyYielded;
 80058d4:	68bb      	ldr	r3, [r7, #8]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20001548 	.word	0x20001548
 80058e4:	20001520 	.word	0x20001520
 80058e8:	200014e0 	.word	0x200014e0
 80058ec:	20001528 	.word	0x20001528
 80058f0:	20001050 	.word	0x20001050
 80058f4:	2000104c 	.word	0x2000104c
 80058f8:	20001534 	.word	0x20001534
 80058fc:	20001530 	.word	0x20001530
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <xTaskGetTickCount+0x1c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005910:	687b      	ldr	r3, [r7, #4]
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20001524 	.word	0x20001524

08005924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592e:	4b4f      	ldr	r3, [pc, #316]	; (8005a6c <xTaskIncrementTick+0x148>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 808f 	bne.w	8005a56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005938:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <xTaskIncrementTick+0x14c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005940:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <xTaskIncrementTick+0x14c>)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d120      	bne.n	800598e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800594c:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <xTaskIncrementTick+0x150>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <xTaskIncrementTick+0x48>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	603b      	str	r3, [r7, #0]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xTaskIncrementTick+0x46>
 800596c:	4b41      	ldr	r3, [pc, #260]	; (8005a74 <xTaskIncrementTick+0x150>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <xTaskIncrementTick+0x154>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a3f      	ldr	r2, [pc, #252]	; (8005a74 <xTaskIncrementTick+0x150>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4a3f      	ldr	r2, [pc, #252]	; (8005a78 <xTaskIncrementTick+0x154>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <xTaskIncrementTick+0x158>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a3d      	ldr	r2, [pc, #244]	; (8005a7c <xTaskIncrementTick+0x158>)
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	f000 fadb 	bl	8005f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800598e:	4b3c      	ldr	r3, [pc, #240]	; (8005a80 <xTaskIncrementTick+0x15c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d349      	bcc.n	8005a2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005998:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <xTaskIncrementTick+0x150>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a2:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <xTaskIncrementTick+0x15c>)
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295
 80059a8:	601a      	str	r2, [r3, #0]
					break;
 80059aa:	e03f      	b.n	8005a2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ac:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <xTaskIncrementTick+0x150>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d203      	bcs.n	80059cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059c4:	4a2e      	ldr	r2, [pc, #184]	; (8005a80 <xTaskIncrementTick+0x15c>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059ca:	e02f      	b.n	8005a2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe ff79 	bl	80048c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	3318      	adds	r3, #24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe ff70 	bl	80048c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <xTaskIncrementTick+0x160>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d903      	bls.n	80059fc <xTaskIncrementTick+0xd8>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <xTaskIncrementTick+0x160>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <xTaskIncrementTick+0x164>)
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fefb 	bl	800480e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <xTaskIncrementTick+0x168>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d3b8      	bcc.n	8005998 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a2a:	e7b5      	b.n	8005998 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <xTaskIncrementTick+0x168>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4915      	ldr	r1, [pc, #84]	; (8005a88 <xTaskIncrementTick+0x164>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d901      	bls.n	8005a48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a48:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <xTaskIncrementTick+0x16c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e004      	b.n	8005a60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a56:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <xTaskIncrementTick+0x170>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <xTaskIncrementTick+0x170>)
 8005a5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a60:	697b      	ldr	r3, [r7, #20]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20001548 	.word	0x20001548
 8005a70:	20001524 	.word	0x20001524
 8005a74:	200014d8 	.word	0x200014d8
 8005a78:	200014dc 	.word	0x200014dc
 8005a7c:	20001538 	.word	0x20001538
 8005a80:	20001540 	.word	0x20001540
 8005a84:	20001528 	.word	0x20001528
 8005a88:	20001050 	.word	0x20001050
 8005a8c:	2000104c 	.word	0x2000104c
 8005a90:	20001534 	.word	0x20001534
 8005a94:	20001530 	.word	0x20001530

08005a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a9e:	4b2a      	ldr	r3, [pc, #168]	; (8005b48 <vTaskSwitchContext+0xb0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aa6:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <vTaskSwitchContext+0xb4>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aac:	e046      	b.n	8005b3c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005aae:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <vTaskSwitchContext+0xb4>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab4:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <vTaskSwitchContext+0xb8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e010      	b.n	8005ade <vTaskSwitchContext+0x46>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	607b      	str	r3, [r7, #4]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <vTaskSwitchContext+0x3e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	491d      	ldr	r1, [pc, #116]	; (8005b54 <vTaskSwitchContext+0xbc>)
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0e4      	beq.n	8005abc <vTaskSwitchContext+0x24>
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <vTaskSwitchContext+0xbc>)
 8005afe:	4413      	add	r3, r2
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	3308      	adds	r3, #8
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d104      	bne.n	8005b22 <vTaskSwitchContext+0x8a>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <vTaskSwitchContext+0xc0>)
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <vTaskSwitchContext+0xb8>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <vTaskSwitchContext+0xc0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3354      	adds	r3, #84	; 0x54
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <vTaskSwitchContext+0xc4>)
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20001548 	.word	0x20001548
 8005b4c:	20001534 	.word	0x20001534
 8005b50:	20001528 	.word	0x20001528
 8005b54:	20001050 	.word	0x20001050
 8005b58:	2000104c 	.word	0x2000104c
 8005b5c:	20000010 	.word	0x20000010

08005b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <vTaskPlaceOnEventList+0x44>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fe fe61 	bl	8004856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b94:	2101      	movs	r1, #1
 8005b96:	6838      	ldr	r0, [r7, #0]
 8005b98:	f000 fa80 	bl	800609c <prvAddCurrentTaskToDelayedList>
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	2000104c 	.word	0x2000104c

08005ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	617b      	str	r3, [r7, #20]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <vTaskPlaceOnEventListRestricted+0x54>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7fe fe18 	bl	800480e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f000 fa55 	bl	800609c <prvAddCurrentTaskToDelayedList>
	}
 8005bf2:	bf00      	nop
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000104c 	.word	0x2000104c

08005c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3318      	adds	r3, #24
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fe49 	bl	80048c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c36:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <xTaskRemoveFromEventList+0xb0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11d      	bne.n	8005c7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fe40 	bl	80048c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <xTaskRemoveFromEventList+0xb4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d903      	bls.n	8005c5c <xTaskRemoveFromEventList+0x5c>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <xTaskRemoveFromEventList+0xb4>)
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <xTaskRemoveFromEventList+0xb8>)
 8005c6a:	441a      	add	r2, r3
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f7fe fdcb 	bl	800480e <vListInsertEnd>
 8005c78:	e005      	b.n	8005c86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	4619      	mov	r1, r3
 8005c80:	480e      	ldr	r0, [pc, #56]	; (8005cbc <xTaskRemoveFromEventList+0xbc>)
 8005c82:	f7fe fdc4 	bl	800480e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <xTaskRemoveFromEventList+0xc0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d905      	bls.n	8005ca0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <xTaskRemoveFromEventList+0xc4>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e001      	b.n	8005ca4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ca4:	697b      	ldr	r3, [r7, #20]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20001548 	.word	0x20001548
 8005cb4:	20001528 	.word	0x20001528
 8005cb8:	20001050 	.word	0x20001050
 8005cbc:	200014e0 	.word	0x200014e0
 8005cc0:	2000104c 	.word	0x2000104c
 8005cc4:	20001534 	.word	0x20001534

08005cc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <vTaskInternalSetTimeOutState+0x24>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <vTaskInternalSetTimeOutState+0x28>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	605a      	str	r2, [r3, #4]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20001538 	.word	0x20001538
 8005cf0:	20001524 	.word	0x20001524

08005cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	613b      	str	r3, [r7, #16]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	60fb      	str	r3, [r7, #12]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d36:	f000 fe7d 	bl	8006a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <xTaskCheckForTimeOut+0xbc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d102      	bne.n	8005d5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e023      	b.n	8005da2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <xTaskCheckForTimeOut+0xc0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d007      	beq.n	8005d76 <xTaskCheckForTimeOut+0x82>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d302      	bcc.n	8005d76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d70:	2301      	movs	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
 8005d74:	e015      	b.n	8005da2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d20b      	bcs.n	8005d98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff9b 	bl	8005cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e004      	b.n	8005da2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005da2:	f000 fe77 	bl	8006a94 <vPortExitCritical>

	return xReturn;
 8005da6:	69fb      	ldr	r3, [r7, #28]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20001524 	.word	0x20001524
 8005db4:	20001538 	.word	0x20001538

08005db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <vTaskMissedYield+0x14>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	20001534 	.word	0x20001534

08005dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dd8:	f000 f852 	bl	8005e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <prvIdleTask+0x28>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d9f9      	bls.n	8005dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <prvIdleTask+0x2c>)
 8005de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005df4:	e7f0      	b.n	8005dd8 <prvIdleTask+0x8>
 8005df6:	bf00      	nop
 8005df8:	20001050 	.word	0x20001050
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	e00c      	b.n	8005e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <prvInitialiseTaskLists+0x60>)
 8005e18:	4413      	add	r3, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fcca 	bl	80047b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3301      	adds	r3, #1
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b37      	cmp	r3, #55	; 0x37
 8005e2a:	d9ef      	bls.n	8005e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e2c:	480d      	ldr	r0, [pc, #52]	; (8005e64 <prvInitialiseTaskLists+0x64>)
 8005e2e:	f7fe fcc1 	bl	80047b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e32:	480d      	ldr	r0, [pc, #52]	; (8005e68 <prvInitialiseTaskLists+0x68>)
 8005e34:	f7fe fcbe 	bl	80047b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e38:	480c      	ldr	r0, [pc, #48]	; (8005e6c <prvInitialiseTaskLists+0x6c>)
 8005e3a:	f7fe fcbb 	bl	80047b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e3e:	480c      	ldr	r0, [pc, #48]	; (8005e70 <prvInitialiseTaskLists+0x70>)
 8005e40:	f7fe fcb8 	bl	80047b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e44:	480b      	ldr	r0, [pc, #44]	; (8005e74 <prvInitialiseTaskLists+0x74>)
 8005e46:	f7fe fcb5 	bl	80047b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <prvInitialiseTaskLists+0x78>)
 8005e4c:	4a05      	ldr	r2, [pc, #20]	; (8005e64 <prvInitialiseTaskLists+0x64>)
 8005e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <prvInitialiseTaskLists+0x7c>)
 8005e52:	4a05      	ldr	r2, [pc, #20]	; (8005e68 <prvInitialiseTaskLists+0x68>)
 8005e54:	601a      	str	r2, [r3, #0]
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20001050 	.word	0x20001050
 8005e64:	200014b0 	.word	0x200014b0
 8005e68:	200014c4 	.word	0x200014c4
 8005e6c:	200014e0 	.word	0x200014e0
 8005e70:	200014f4 	.word	0x200014f4
 8005e74:	2000150c 	.word	0x2000150c
 8005e78:	200014d8 	.word	0x200014d8
 8005e7c:	200014dc 	.word	0x200014dc

08005e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e86:	e019      	b.n	8005ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e88:	f000 fdd4 	bl	8006a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <prvCheckTasksWaitingTermination+0x50>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe fd15 	bl	80048c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <prvCheckTasksWaitingTermination+0x54>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	4a0b      	ldr	r2, [pc, #44]	; (8005ed4 <prvCheckTasksWaitingTermination+0x54>)
 8005ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <prvCheckTasksWaitingTermination+0x58>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <prvCheckTasksWaitingTermination+0x58>)
 8005eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eb2:	f000 fdef 	bl	8006a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f810 	bl	8005edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <prvCheckTasksWaitingTermination+0x58>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e1      	bne.n	8005e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	200014f4 	.word	0x200014f4
 8005ed4:	20001520 	.word	0x20001520
 8005ed8:	20001508 	.word	0x20001508

08005edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3354      	adds	r3, #84	; 0x54
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 f8f9 	bl	80070e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d108      	bne.n	8005f0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 ff87 	bl	8006e10 <vPortFree>
				vPortFree( pxTCB );
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 ff84 	bl	8006e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f08:	e018      	b.n	8005f3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d103      	bne.n	8005f1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 ff7b 	bl	8006e10 <vPortFree>
	}
 8005f1a:	e00f      	b.n	8005f3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d00a      	beq.n	8005f3c <prvDeleteTCB+0x60>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <prvDeleteTCB+0x5e>
	}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <prvResetNextTaskUnblockTime+0x38>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvResetNextTaskUnblockTime+0x3c>)
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f5c:	e008      	b.n	8005f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <prvResetNextTaskUnblockTime+0x38>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <prvResetNextTaskUnblockTime+0x3c>)
 8005f6e:	6013      	str	r3, [r2, #0]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	200014d8 	.word	0x200014d8
 8005f80:	20001540 	.word	0x20001540

08005f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <xTaskGetSchedulerState+0x34>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f92:	2301      	movs	r3, #1
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	e008      	b.n	8005faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <xTaskGetSchedulerState+0x38>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	607b      	str	r3, [r7, #4]
 8005fa4:	e001      	b.n	8005faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005faa:	687b      	ldr	r3, [r7, #4]
	}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	2000152c 	.word	0x2000152c
 8005fbc:	20001548 	.word	0x20001548

08005fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d056      	beq.n	8006084 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <xTaskPriorityDisinherit+0xd0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d00a      	beq.n	8005ff6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	60bb      	str	r3, [r7, #8]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006018:	1e5a      	subs	r2, r3, #1
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006026:	429a      	cmp	r2, r3
 8006028:	d02c      	beq.n	8006084 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602e:	2b00      	cmp	r3, #0
 8006030:	d128      	bne.n	8006084 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3304      	adds	r3, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fc46 	bl	80048c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <xTaskPriorityDisinherit+0xd4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d903      	bls.n	8006064 <xTaskPriorityDisinherit+0xa4>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <xTaskPriorityDisinherit+0xd4>)
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4a09      	ldr	r2, [pc, #36]	; (8006098 <xTaskPriorityDisinherit+0xd8>)
 8006072:	441a      	add	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f7fe fbc7 	bl	800480e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006084:	697b      	ldr	r3, [r7, #20]
	}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	2000104c 	.word	0x2000104c
 8006094:	20001528 	.word	0x20001528
 8006098:	20001050 	.word	0x20001050

0800609c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060a6:	4b21      	ldr	r3, [pc, #132]	; (800612c <prvAddCurrentTaskToDelayedList+0x90>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ac:	4b20      	ldr	r3, [pc, #128]	; (8006130 <prvAddCurrentTaskToDelayedList+0x94>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fc08 	bl	80048c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d10a      	bne.n	80060d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4819      	ldr	r0, [pc, #100]	; (8006134 <prvAddCurrentTaskToDelayedList+0x98>)
 80060d0:	f7fe fb9d 	bl	800480e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060d4:	e026      	b.n	8006124 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4413      	add	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <prvAddCurrentTaskToDelayedList+0x94>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d209      	bcs.n	8006102 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <prvAddCurrentTaskToDelayedList+0x94>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f7fe fbab 	bl	8004856 <vListInsert>
}
 8006100:	e010      	b.n	8006124 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006102:	4b0e      	ldr	r3, [pc, #56]	; (800613c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvAddCurrentTaskToDelayedList+0x94>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f7fe fba1 	bl	8004856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	d202      	bcs.n	8006124 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800611e:	4a08      	ldr	r2, [pc, #32]	; (8006140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6013      	str	r3, [r2, #0]
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20001524 	.word	0x20001524
 8006130:	2000104c 	.word	0x2000104c
 8006134:	2000150c 	.word	0x2000150c
 8006138:	200014dc 	.word	0x200014dc
 800613c:	200014d8 	.word	0x200014d8
 8006140:	20001540 	.word	0x20001540

08006144 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800614e:	f000 fb07 	bl	8006760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <xTimerCreateTimerTask+0x80>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d021      	beq.n	800619e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006162:	1d3a      	adds	r2, r7, #4
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	f107 030c 	add.w	r3, r7, #12
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fb07 	bl	8004780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	9202      	str	r2, [sp, #8]
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	2302      	movs	r3, #2
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	460a      	mov	r2, r1
 8006184:	4910      	ldr	r1, [pc, #64]	; (80061c8 <xTimerCreateTimerTask+0x84>)
 8006186:	4811      	ldr	r0, [pc, #68]	; (80061cc <xTimerCreateTimerTask+0x88>)
 8006188:	f7ff f8b4 	bl	80052f4 <xTaskCreateStatic>
 800618c:	4603      	mov	r3, r0
 800618e:	4a10      	ldr	r2, [pc, #64]	; (80061d0 <xTimerCreateTimerTask+0x8c>)
 8006190:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <xTimerCreateTimerTask+0x8c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800619a:	2301      	movs	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061ba:	697b      	ldr	r3, [r7, #20]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	2000157c 	.word	0x2000157c
 80061c8:	08007274 	.word	0x08007274
 80061cc:	08006309 	.word	0x08006309
 80061d0:	20001580 	.word	0x20001580

080061d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	; 0x28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xTimerGenericCommand+0x2e>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	623b      	str	r3, [r7, #32]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006202:	4b1a      	ldr	r3, [pc, #104]	; (800626c <xTimerGenericCommand+0x98>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d02a      	beq.n	8006260 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b05      	cmp	r3, #5
 800621a:	dc18      	bgt.n	800624e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800621c:	f7ff feb2 	bl	8005f84 <xTaskGetSchedulerState>
 8006220:	4603      	mov	r3, r0
 8006222:	2b02      	cmp	r3, #2
 8006224:	d109      	bne.n	800623a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006226:	4b11      	ldr	r3, [pc, #68]	; (800626c <xTimerGenericCommand+0x98>)
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f107 0110 	add.w	r1, r7, #16
 800622e:	2300      	movs	r3, #0
 8006230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006232:	f7fe fc77 	bl	8004b24 <xQueueGenericSend>
 8006236:	6278      	str	r0, [r7, #36]	; 0x24
 8006238:	e012      	b.n	8006260 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <xTimerGenericCommand+0x98>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f107 0110 	add.w	r1, r7, #16
 8006242:	2300      	movs	r3, #0
 8006244:	2200      	movs	r2, #0
 8006246:	f7fe fc6d 	bl	8004b24 <xQueueGenericSend>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
 800624c:	e008      	b.n	8006260 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800624e:	4b07      	ldr	r3, [pc, #28]	; (800626c <xTimerGenericCommand+0x98>)
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f107 0110 	add.w	r1, r7, #16
 8006256:	2300      	movs	r3, #0
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	f7fe fd61 	bl	8004d20 <xQueueGenericSendFromISR>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006262:	4618      	mov	r0, r3
 8006264:	3728      	adds	r7, #40	; 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000157c 	.word	0x2000157c

08006270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627a:	4b22      	ldr	r3, [pc, #136]	; (8006304 <prvProcessExpiredTimer+0x94>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3304      	adds	r3, #4
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fb1d 	bl	80048c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d022      	beq.n	80062e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	18d1      	adds	r1, r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	6978      	ldr	r0, [r7, #20]
 80062aa:	f000 f8d1 	bl	8006450 <prvInsertTimerInActiveList>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01f      	beq.n	80062f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062b4:	2300      	movs	r3, #0
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	2100      	movs	r1, #0
 80062be:	6978      	ldr	r0, [r7, #20]
 80062c0:	f7ff ff88 	bl	80061d4 <xTimerGenericCommand>
 80062c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d113      	bne.n	80062f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	60fb      	str	r3, [r7, #12]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	6978      	ldr	r0, [r7, #20]
 80062fa:	4798      	blx	r3
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20001574 	.word	0x20001574

08006308 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006310:	f107 0308 	add.w	r3, r7, #8
 8006314:	4618      	mov	r0, r3
 8006316:	f000 f857 	bl	80063c8 <prvGetNextExpireTime>
 800631a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4619      	mov	r1, r3
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f803 	bl	800632c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006326:	f000 f8d5 	bl	80064d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800632a:	e7f1      	b.n	8006310 <prvTimerTask+0x8>

0800632c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006336:	f7ff fa39 	bl	80057ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800633a:	f107 0308 	add.w	r3, r7, #8
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f866 	bl	8006410 <prvSampleTimeNow>
 8006344:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d130      	bne.n	80063ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <prvProcessTimerOrBlockTask+0x3c>
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	429a      	cmp	r2, r3
 8006358:	d806      	bhi.n	8006368 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800635a:	f7ff fa35 	bl	80057c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff85 	bl	8006270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006366:	e024      	b.n	80063b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <prvProcessTimerOrBlockTask+0x90>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <prvProcessTimerOrBlockTask+0x50>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <prvProcessTimerOrBlockTask+0x52>
 800637c:	2300      	movs	r3, #0
 800637e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <prvProcessTimerOrBlockTask+0x94>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	4619      	mov	r1, r3
 800638e:	f7fe ff7d 	bl	800528c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006392:	f7ff fa19 	bl	80057c8 <xTaskResumeAll>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <prvProcessTimerOrBlockTask+0x98>)
 800639e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	f3bf 8f6f 	isb	sy
}
 80063ac:	e001      	b.n	80063b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063ae:	f7ff fa0b 	bl	80057c8 <xTaskResumeAll>
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20001578 	.word	0x20001578
 80063c0:	2000157c 	.word	0x2000157c
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <prvGetNextExpireTime+0x44>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <prvGetNextExpireTime+0x16>
 80063da:	2201      	movs	r2, #1
 80063dc:	e000      	b.n	80063e0 <prvGetNextExpireTime+0x18>
 80063de:	2200      	movs	r2, #0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063ec:	4b07      	ldr	r3, [pc, #28]	; (800640c <prvGetNextExpireTime+0x44>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e001      	b.n	80063fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20001574 	.word	0x20001574

08006410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006418:	f7ff fa74 	bl	8005904 <xTaskGetTickCount>
 800641c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <prvSampleTimeNow+0x3c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	429a      	cmp	r2, r3
 8006426:	d205      	bcs.n	8006434 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006428:	f000 f936 	bl	8006698 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e002      	b.n	800643a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800643a:	4a04      	ldr	r2, [pc, #16]	; (800644c <prvSampleTimeNow+0x3c>)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006440:	68fb      	ldr	r3, [r7, #12]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20001584 	.word	0x20001584

08006450 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d812      	bhi.n	800649c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	1ad2      	subs	r2, r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e01b      	b.n	80064c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <prvInsertTimerInActiveList+0x7c>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3304      	adds	r3, #4
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f7fe f9de 	bl	8004856 <vListInsert>
 800649a:	e012      	b.n	80064c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d206      	bcs.n	80064b2 <prvInsertTimerInActiveList+0x62>
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d302      	bcc.n	80064b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e007      	b.n	80064c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <prvInsertTimerInActiveList+0x80>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fe f9ca 	bl	8004856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064c2:	697b      	ldr	r3, [r7, #20]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20001578 	.word	0x20001578
 80064d0:	20001574 	.word	0x20001574

080064d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064da:	e0ca      	b.n	8006672 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da18      	bge.n	8006514 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	3304      	adds	r3, #4
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	61fb      	str	r3, [r7, #28]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650a:	6850      	ldr	r0, [r2, #4]
 800650c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650e:	6892      	ldr	r2, [r2, #8]
 8006510:	4611      	mov	r1, r2
 8006512:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f2c0 80aa 	blt.w	8006670 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	3304      	adds	r3, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe f9cb 	bl	80048c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006532:	463b      	mov	r3, r7
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff6b 	bl	8006410 <prvSampleTimeNow>
 800653a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b09      	cmp	r3, #9
 8006540:	f200 8097 	bhi.w	8006672 <prvProcessReceivedCommands+0x19e>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <prvProcessReceivedCommands+0x78>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	08006575 	.word	0x08006575
 8006550:	08006575 	.word	0x08006575
 8006554:	08006575 	.word	0x08006575
 8006558:	080065e9 	.word	0x080065e9
 800655c:	080065fd 	.word	0x080065fd
 8006560:	08006647 	.word	0x08006647
 8006564:	08006575 	.word	0x08006575
 8006568:	08006575 	.word	0x08006575
 800656c:	080065e9 	.word	0x080065e9
 8006570:	080065fd 	.word	0x080065fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	18d1      	adds	r1, r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006594:	f7ff ff5c 	bl	8006450 <prvInsertTimerInActiveList>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d069      	beq.n	8006672 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d05e      	beq.n	8006672 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	441a      	add	r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c6:	f7ff fe05 	bl	80061d4 <xTimerGenericCommand>
 80065ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d14f      	bne.n	8006672 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	61bb      	str	r3, [r7, #24]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065fa:	e03a      	b.n	8006672 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	617b      	str	r3, [r7, #20]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	18d1      	adds	r1, r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006640:	f7ff ff06 	bl	8006450 <prvInsertTimerInActiveList>
					break;
 8006644:	e015      	b.n	8006672 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 fbdb 	bl	8006e10 <vPortFree>
 800665a:	e00a      	b.n	8006672 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800666e:	e000      	b.n	8006672 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006670:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006672:	4b08      	ldr	r3, [pc, #32]	; (8006694 <prvProcessReceivedCommands+0x1c0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1d39      	adds	r1, r7, #4
 8006678:	2200      	movs	r2, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fbec 	bl	8004e58 <xQueueReceive>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	f47f af2a 	bne.w	80064dc <prvProcessReceivedCommands+0x8>
	}
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	3730      	adds	r7, #48	; 0x30
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2000157c 	.word	0x2000157c

08006698 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800669e:	e048      	b.n	8006732 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066a0:	4b2d      	ldr	r3, [pc, #180]	; (8006758 <prvSwitchTimerLists+0xc0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066aa:	4b2b      	ldr	r3, [pc, #172]	; (8006758 <prvSwitchTimerLists+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe f905 	bl	80048c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02e      	beq.n	8006732 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d90e      	bls.n	8006704 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066f2:	4b19      	ldr	r3, [pc, #100]	; (8006758 <prvSwitchTimerLists+0xc0>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f7fe f8aa 	bl	8004856 <vListInsert>
 8006702:	e016      	b.n	8006732 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006704:	2300      	movs	r3, #0
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2300      	movs	r3, #0
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	2100      	movs	r1, #0
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff fd60 	bl	80061d4 <xTimerGenericCommand>
 8006714:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	603b      	str	r3, [r7, #0]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <prvSwitchTimerLists+0xc0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1b1      	bne.n	80066a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <prvSwitchTimerLists+0xc0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <prvSwitchTimerLists+0xc4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a04      	ldr	r2, [pc, #16]	; (8006758 <prvSwitchTimerLists+0xc0>)
 8006748:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800674a:	4a04      	ldr	r2, [pc, #16]	; (800675c <prvSwitchTimerLists+0xc4>)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6013      	str	r3, [r2, #0]
}
 8006750:	bf00      	nop
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20001574 	.word	0x20001574
 800675c:	20001578 	.word	0x20001578

08006760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006766:	f000 f965 	bl	8006a34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800676a:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <prvCheckForValidListAndQueue+0x60>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d120      	bne.n	80067b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006772:	4814      	ldr	r0, [pc, #80]	; (80067c4 <prvCheckForValidListAndQueue+0x64>)
 8006774:	f7fe f81e 	bl	80047b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006778:	4813      	ldr	r0, [pc, #76]	; (80067c8 <prvCheckForValidListAndQueue+0x68>)
 800677a:	f7fe f81b 	bl	80047b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <prvCheckForValidListAndQueue+0x6c>)
 8006780:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <prvCheckForValidListAndQueue+0x64>)
 8006782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006784:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <prvCheckForValidListAndQueue+0x70>)
 8006786:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <prvCheckForValidListAndQueue+0x68>)
 8006788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800678a:	2300      	movs	r3, #0
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <prvCheckForValidListAndQueue+0x74>)
 8006790:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <prvCheckForValidListAndQueue+0x78>)
 8006792:	2110      	movs	r1, #16
 8006794:	200a      	movs	r0, #10
 8006796:	f7fe f929 	bl	80049ec <xQueueGenericCreateStatic>
 800679a:	4603      	mov	r3, r0
 800679c:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <prvCheckForValidListAndQueue+0x60>)
 800679e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <prvCheckForValidListAndQueue+0x60>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <prvCheckForValidListAndQueue+0x60>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	490b      	ldr	r1, [pc, #44]	; (80067dc <prvCheckForValidListAndQueue+0x7c>)
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fd42 	bl	8005238 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067b4:	f000 f96e 	bl	8006a94 <vPortExitCritical>
}
 80067b8:	bf00      	nop
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2000157c 	.word	0x2000157c
 80067c4:	2000154c 	.word	0x2000154c
 80067c8:	20001560 	.word	0x20001560
 80067cc:	20001574 	.word	0x20001574
 80067d0:	20001578 	.word	0x20001578
 80067d4:	20001628 	.word	0x20001628
 80067d8:	20001588 	.word	0x20001588
 80067dc:	0800727c 	.word	0x0800727c

080067e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3b04      	subs	r3, #4
 80067f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3b04      	subs	r3, #4
 80067fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f023 0201 	bic.w	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3b04      	subs	r3, #4
 800680e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006810:	4a0c      	ldr	r2, [pc, #48]	; (8006844 <pxPortInitialiseStack+0x64>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3b14      	subs	r3, #20
 800681a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3b04      	subs	r3, #4
 8006826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f06f 0202 	mvn.w	r2, #2
 800682e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3b20      	subs	r3, #32
 8006834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006836:	68fb      	ldr	r3, [r7, #12]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	08006849 	.word	0x08006849

08006848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <prvTaskExitError+0x54>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d00a      	beq.n	8006872 <prvTaskExitError+0x2a>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	60fb      	str	r3, [r7, #12]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <prvTaskExitError+0x28>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60bb      	str	r3, [r7, #8]
}
 8006884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006886:	bf00      	nop
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0fc      	beq.n	8006888 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	2000000c 	.word	0x2000000c

080068a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <pxCurrentTCBConst2>)
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	6808      	ldr	r0, [r1, #0]
 80068a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	f380 8809 	msr	PSP, r0
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	4770      	bx	lr
 80068bc:	f3af 8000 	nop.w

080068c0 <pxCurrentTCBConst2>:
 80068c0:	2000104c 	.word	0x2000104c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <prvPortStartFirstTask+0x24>)
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	6800      	ldr	r0, [r0, #0]
 80068ce:	f380 8808 	msr	MSP, r0
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8814 	msr	CONTROL, r0
 80068da:	b662      	cpsie	i
 80068dc:	b661      	cpsie	f
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	df00      	svc	0
 80068e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ea:	bf00      	nop
 80068ec:	e000ed08 	.word	0xe000ed08

080068f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068f6:	4b46      	ldr	r3, [pc, #280]	; (8006a10 <xPortStartScheduler+0x120>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a46      	ldr	r2, [pc, #280]	; (8006a14 <xPortStartScheduler+0x124>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10a      	bne.n	8006916 <xPortStartScheduler+0x26>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	613b      	str	r3, [r7, #16]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006916:	4b3e      	ldr	r3, [pc, #248]	; (8006a10 <xPortStartScheduler+0x120>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a3f      	ldr	r2, [pc, #252]	; (8006a18 <xPortStartScheduler+0x128>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10a      	bne.n	8006936 <xPortStartScheduler+0x46>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006936:	4b39      	ldr	r3, [pc, #228]	; (8006a1c <xPortStartScheduler+0x12c>)
 8006938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006958:	b2da      	uxtb	r2, r3
 800695a:	4b31      	ldr	r3, [pc, #196]	; (8006a20 <xPortStartScheduler+0x130>)
 800695c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800695e:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <xPortStartScheduler+0x134>)
 8006960:	2207      	movs	r2, #7
 8006962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006964:	e009      	b.n	800697a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006966:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <xPortStartScheduler+0x134>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3b01      	subs	r3, #1
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <xPortStartScheduler+0x134>)
 800696e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	b2db      	uxtb	r3, r3
 8006978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d0ef      	beq.n	8006966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <xPortStartScheduler+0x134>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f1c3 0307 	rsb	r3, r3, #7
 800698e:	2b04      	cmp	r3, #4
 8006990:	d00a      	beq.n	80069a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60bb      	str	r3, [r7, #8]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069a8:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <xPortStartScheduler+0x134>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <xPortStartScheduler+0x134>)
 80069b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <xPortStartScheduler+0x134>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ba:	4a1a      	ldr	r2, [pc, #104]	; (8006a24 <xPortStartScheduler+0x134>)
 80069bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069c6:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <xPortStartScheduler+0x138>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <xPortStartScheduler+0x138>)
 80069cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <xPortStartScheduler+0x138>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a14      	ldr	r2, [pc, #80]	; (8006a28 <xPortStartScheduler+0x138>)
 80069d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069de:	f000 f8dd 	bl	8006b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069e2:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <xPortStartScheduler+0x13c>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069e8:	f000 f8fc 	bl	8006be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069ec:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <xPortStartScheduler+0x140>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0f      	ldr	r2, [pc, #60]	; (8006a30 <xPortStartScheduler+0x140>)
 80069f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069f8:	f7ff ff66 	bl	80068c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069fc:	f7ff f84c 	bl	8005a98 <vTaskSwitchContext>
	prvTaskExitError();
 8006a00:	f7ff ff22 	bl	8006848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	e000ed00 	.word	0xe000ed00
 8006a14:	410fc271 	.word	0x410fc271
 8006a18:	410fc270 	.word	0x410fc270
 8006a1c:	e000e400 	.word	0xe000e400
 8006a20:	20001678 	.word	0x20001678
 8006a24:	2000167c 	.word	0x2000167c
 8006a28:	e000ed20 	.word	0xe000ed20
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	e000ef34 	.word	0xe000ef34

08006a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	607b      	str	r3, [r7, #4]
}
 8006a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <vPortEnterCritical+0x58>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <vPortEnterCritical+0x58>)
 8006a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <vPortEnterCritical+0x58>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10f      	bne.n	8006a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <vPortEnterCritical+0x5c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	603b      	str	r3, [r7, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <vPortEnterCritical+0x4a>
	}
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	2000000c 	.word	0x2000000c
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <vPortExitCritical+0x50>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <vPortExitCritical+0x24>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	607b      	str	r3, [r7, #4]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <vPortExitCritical+0x50>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <vPortExitCritical+0x50>)
 8006ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <vPortExitCritical+0x50>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d105      	bne.n	8006ad6 <vPortExitCritical+0x42>
 8006aca:	2300      	movs	r3, #0
 8006acc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	f383 8811 	msr	BASEPRI, r3
}
 8006ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c
	...

08006af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006af0:	f3ef 8009 	mrs	r0, PSP
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <pxCurrentTCBConst>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	f01e 0f10 	tst.w	lr, #16
 8006b00:	bf08      	it	eq
 8006b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0a:	6010      	str	r0, [r2, #0]
 8006b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b14:	f380 8811 	msr	BASEPRI, r0
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f7fe ffba 	bl	8005a98 <vTaskSwitchContext>
 8006b24:	f04f 0000 	mov.w	r0, #0
 8006b28:	f380 8811 	msr	BASEPRI, r0
 8006b2c:	bc09      	pop	{r0, r3}
 8006b2e:	6819      	ldr	r1, [r3, #0]
 8006b30:	6808      	ldr	r0, [r1, #0]
 8006b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b36:	f01e 0f10 	tst.w	lr, #16
 8006b3a:	bf08      	it	eq
 8006b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b40:	f380 8809 	msr	PSP, r0
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	f3af 8000 	nop.w

08006b50 <pxCurrentTCBConst>:
 8006b50:	2000104c 	.word	0x2000104c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop

08006b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	607b      	str	r3, [r7, #4]
}
 8006b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b72:	f7fe fed7 	bl	8005924 <xTaskIncrementTick>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <xPortSysTickHandler+0x40>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f383 8811 	msr	BASEPRI, r3
}
 8006b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <vPortSetupTimerInterrupt+0x34>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <vPortSetupTimerInterrupt+0x38>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bac:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <vPortSetupTimerInterrupt+0x3c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <vPortSetupTimerInterrupt+0x40>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <vPortSetupTimerInterrupt+0x44>)
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bbe:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <vPortSetupTimerInterrupt+0x34>)
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	601a      	str	r2, [r3, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	e000e010 	.word	0xe000e010
 8006bd4:	e000e018 	.word	0xe000e018
 8006bd8:	20000000 	.word	0x20000000
 8006bdc:	10624dd3 	.word	0x10624dd3
 8006be0:	e000e014 	.word	0xe000e014

08006be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bf4 <vPortEnableVFP+0x10>
 8006be8:	6801      	ldr	r1, [r0, #0]
 8006bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bee:	6001      	str	r1, [r0, #0]
 8006bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bf2:	bf00      	nop
 8006bf4:	e000ed88 	.word	0xe000ed88

08006bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bfe:	f3ef 8305 	mrs	r3, IPSR
 8006c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	d914      	bls.n	8006c34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <vPortValidateInterruptPriority+0x70>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c14:	4b15      	ldr	r3, [pc, #84]	; (8006c6c <vPortValidateInterruptPriority+0x74>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	7afa      	ldrb	r2, [r7, #11]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d20a      	bcs.n	8006c34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	607b      	str	r3, [r7, #4]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c34:	4b0e      	ldr	r3, [pc, #56]	; (8006c70 <vPortValidateInterruptPriority+0x78>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <vPortValidateInterruptPriority+0x7c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d90a      	bls.n	8006c5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	603b      	str	r3, [r7, #0]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <vPortValidateInterruptPriority+0x60>
	}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	e000e3f0 	.word	0xe000e3f0
 8006c6c:	20001678 	.word	0x20001678
 8006c70:	e000ed0c 	.word	0xe000ed0c
 8006c74:	2000167c 	.word	0x2000167c

08006c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c84:	f7fe fd92 	bl	80057ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c88:	4b5b      	ldr	r3, [pc, #364]	; (8006df8 <pvPortMalloc+0x180>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c90:	f000 f920 	bl	8006ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c94:	4b59      	ldr	r3, [pc, #356]	; (8006dfc <pvPortMalloc+0x184>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 8093 	bne.w	8006dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01d      	beq.n	8006ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ca8:	2208      	movs	r2, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d014      	beq.n	8006ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f023 0307 	bic.w	r3, r3, #7
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	617b      	str	r3, [r7, #20]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d06e      	beq.n	8006dc8 <pvPortMalloc+0x150>
 8006cea:	4b45      	ldr	r3, [pc, #276]	; (8006e00 <pvPortMalloc+0x188>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d869      	bhi.n	8006dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cf4:	4b43      	ldr	r3, [pc, #268]	; (8006e04 <pvPortMalloc+0x18c>)
 8006cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cf8:	4b42      	ldr	r3, [pc, #264]	; (8006e04 <pvPortMalloc+0x18c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cfe:	e004      	b.n	8006d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <pvPortMalloc+0xa4>
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f1      	bne.n	8006d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d1c:	4b36      	ldr	r3, [pc, #216]	; (8006df8 <pvPortMalloc+0x180>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d050      	beq.n	8006dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	2308      	movs	r3, #8
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d91f      	bls.n	8006d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <pvPortMalloc+0xf8>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	613b      	str	r3, [r7, #16]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d82:	69b8      	ldr	r0, [r7, #24]
 8006d84:	f000 f908 	bl	8006f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d88:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <pvPortMalloc+0x188>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <pvPortMalloc+0x188>)
 8006d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d96:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <pvPortMalloc+0x188>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <pvPortMalloc+0x190>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d203      	bcs.n	8006daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006da2:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <pvPortMalloc+0x188>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <pvPortMalloc+0x190>)
 8006da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <pvPortMalloc+0x184>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <pvPortMalloc+0x194>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <pvPortMalloc+0x194>)
 8006dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dc8:	f7fe fcfe 	bl	80057c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <pvPortMalloc+0x174>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60fb      	str	r3, [r7, #12]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <pvPortMalloc+0x172>
	return pvReturn;
 8006dec:	69fb      	ldr	r3, [r7, #28]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20002288 	.word	0x20002288
 8006dfc:	2000229c 	.word	0x2000229c
 8006e00:	2000228c 	.word	0x2000228c
 8006e04:	20002280 	.word	0x20002280
 8006e08:	20002290 	.word	0x20002290
 8006e0c:	20002294 	.word	0x20002294

08006e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d04d      	beq.n	8006ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e22:	2308      	movs	r3, #8
 8006e24:	425b      	negs	r3, r3
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4413      	add	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	4b24      	ldr	r3, [pc, #144]	; (8006ec8 <vPortFree+0xb8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <vPortFree+0x44>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60fb      	str	r3, [r7, #12]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <vPortFree+0x62>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60bb      	str	r3, [r7, #8]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <vPortFree+0xb8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01e      	beq.n	8006ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11a      	bne.n	8006ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <vPortFree+0xb8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	401a      	ands	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e98:	f7fe fc88 	bl	80057ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <vPortFree+0xbc>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <vPortFree+0xbc>)
 8006ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f000 f874 	bl	8006f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <vPortFree+0xc0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	4a06      	ldr	r2, [pc, #24]	; (8006ed0 <vPortFree+0xc0>)
 8006eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eba:	f7fe fc85 	bl	80057c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ebe:	bf00      	nop
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	2000229c 	.word	0x2000229c
 8006ecc:	2000228c 	.word	0x2000228c
 8006ed0:	20002298 	.word	0x20002298

08006ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ee0:	4b27      	ldr	r3, [pc, #156]	; (8006f80 <prvHeapInit+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00c      	beq.n	8006f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3307      	adds	r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0307 	bic.w	r3, r3, #7
 8006efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	4a1f      	ldr	r2, [pc, #124]	; (8006f80 <prvHeapInit+0xac>)
 8006f04:	4413      	add	r3, r2
 8006f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <prvHeapInit+0xb0>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f12:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <prvHeapInit+0xb0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f20:	2208      	movs	r2, #8
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0307 	bic.w	r3, r3, #7
 8006f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <prvHeapInit+0xb4>)
 8006f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f36:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <prvHeapInit+0xb4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvHeapInit+0xb4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	1ad2      	subs	r2, r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvHeapInit+0xb4>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <prvHeapInit+0xb8>)
 8006f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <prvHeapInit+0xbc>)
 8006f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <prvHeapInit+0xc0>)
 8006f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f72:	601a      	str	r2, [r3, #0]
}
 8006f74:	bf00      	nop
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	20001680 	.word	0x20001680
 8006f84:	20002280 	.word	0x20002280
 8006f88:	20002288 	.word	0x20002288
 8006f8c:	20002290 	.word	0x20002290
 8006f90:	2000228c 	.word	0x2000228c
 8006f94:	2000229c 	.word	0x2000229c

08006f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <prvInsertBlockIntoFreeList+0xac>)
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	e002      	b.n	8006fac <prvInsertBlockIntoFreeList+0x14>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d8f7      	bhi.n	8006fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d108      	bne.n	8006fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	441a      	add	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	441a      	add	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d118      	bne.n	8007020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <prvInsertBlockIntoFreeList+0xb0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d00d      	beq.n	8007016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	441a      	add	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e008      	b.n	8007028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <prvInsertBlockIntoFreeList+0xb0>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e003      	b.n	8007028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d002      	beq.n	8007036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20002280 	.word	0x20002280
 8007048:	20002288 	.word	0x20002288

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4d0d      	ldr	r5, [pc, #52]	; (8007084 <__libc_init_array+0x38>)
 8007050:	4c0d      	ldr	r4, [pc, #52]	; (8007088 <__libc_init_array+0x3c>)
 8007052:	1b64      	subs	r4, r4, r5
 8007054:	10a4      	asrs	r4, r4, #2
 8007056:	2600      	movs	r6, #0
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	4d0b      	ldr	r5, [pc, #44]	; (800708c <__libc_init_array+0x40>)
 800705e:	4c0c      	ldr	r4, [pc, #48]	; (8007090 <__libc_init_array+0x44>)
 8007060:	f000 f8f2 	bl	8007248 <_init>
 8007064:	1b64      	subs	r4, r4, r5
 8007066:	10a4      	asrs	r4, r4, #2
 8007068:	2600      	movs	r6, #0
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	f855 3b04 	ldr.w	r3, [r5], #4
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	08007374 	.word	0x08007374
 8007088:	08007374 	.word	0x08007374
 800708c:	08007374 	.word	0x08007374
 8007090:	08007378 	.word	0x08007378

08007094 <__retarget_lock_acquire_recursive>:
 8007094:	4770      	bx	lr

08007096 <__retarget_lock_release_recursive>:
 8007096:	4770      	bx	lr

08007098 <memcpy>:
 8007098:	440a      	add	r2, r1
 800709a:	4291      	cmp	r1, r2
 800709c:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	4770      	bx	lr
 80070a4:	b510      	push	{r4, lr}
 80070a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ae:	4291      	cmp	r1, r2
 80070b0:	d1f9      	bne.n	80070a6 <memcpy+0xe>
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <memset>:
 80070b4:	4402      	add	r2, r0
 80070b6:	4603      	mov	r3, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d100      	bne.n	80070be <memset+0xa>
 80070bc:	4770      	bx	lr
 80070be:	f803 1b01 	strb.w	r1, [r3], #1
 80070c2:	e7f9      	b.n	80070b8 <memset+0x4>

080070c4 <cleanup_glue>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	6809      	ldr	r1, [r1, #0]
 80070ca:	4605      	mov	r5, r0
 80070cc:	b109      	cbz	r1, 80070d2 <cleanup_glue+0xe>
 80070ce:	f7ff fff9 	bl	80070c4 <cleanup_glue>
 80070d2:	4621      	mov	r1, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070da:	f000 b869 	b.w	80071b0 <_free_r>
	...

080070e0 <_reclaim_reent>:
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <_reclaim_reent+0xb4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4283      	cmp	r3, r0
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	d051      	beq.n	8007190 <_reclaim_reent+0xb0>
 80070ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070ee:	b143      	cbz	r3, 8007102 <_reclaim_reent+0x22>
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d14a      	bne.n	800718c <_reclaim_reent+0xac>
 80070f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f8:	6819      	ldr	r1, [r3, #0]
 80070fa:	b111      	cbz	r1, 8007102 <_reclaim_reent+0x22>
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 f857 	bl	80071b0 <_free_r>
 8007102:	6961      	ldr	r1, [r4, #20]
 8007104:	b111      	cbz	r1, 800710c <_reclaim_reent+0x2c>
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f852 	bl	80071b0 <_free_r>
 800710c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800710e:	b111      	cbz	r1, 8007116 <_reclaim_reent+0x36>
 8007110:	4620      	mov	r0, r4
 8007112:	f000 f84d 	bl	80071b0 <_free_r>
 8007116:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007118:	b111      	cbz	r1, 8007120 <_reclaim_reent+0x40>
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f848 	bl	80071b0 <_free_r>
 8007120:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007122:	b111      	cbz	r1, 800712a <_reclaim_reent+0x4a>
 8007124:	4620      	mov	r0, r4
 8007126:	f000 f843 	bl	80071b0 <_free_r>
 800712a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800712c:	b111      	cbz	r1, 8007134 <_reclaim_reent+0x54>
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f83e 	bl	80071b0 <_free_r>
 8007134:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007136:	b111      	cbz	r1, 800713e <_reclaim_reent+0x5e>
 8007138:	4620      	mov	r0, r4
 800713a:	f000 f839 	bl	80071b0 <_free_r>
 800713e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007140:	b111      	cbz	r1, 8007148 <_reclaim_reent+0x68>
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f834 	bl	80071b0 <_free_r>
 8007148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800714a:	b111      	cbz	r1, 8007152 <_reclaim_reent+0x72>
 800714c:	4620      	mov	r0, r4
 800714e:	f000 f82f 	bl	80071b0 <_free_r>
 8007152:	69a3      	ldr	r3, [r4, #24]
 8007154:	b1e3      	cbz	r3, 8007190 <_reclaim_reent+0xb0>
 8007156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007158:	4620      	mov	r0, r4
 800715a:	4798      	blx	r3
 800715c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800715e:	b1b9      	cbz	r1, 8007190 <_reclaim_reent+0xb0>
 8007160:	4620      	mov	r0, r4
 8007162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007166:	f7ff bfad 	b.w	80070c4 <cleanup_glue>
 800716a:	5949      	ldr	r1, [r1, r5]
 800716c:	b941      	cbnz	r1, 8007180 <_reclaim_reent+0xa0>
 800716e:	3504      	adds	r5, #4
 8007170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007172:	2d80      	cmp	r5, #128	; 0x80
 8007174:	68d9      	ldr	r1, [r3, #12]
 8007176:	d1f8      	bne.n	800716a <_reclaim_reent+0x8a>
 8007178:	4620      	mov	r0, r4
 800717a:	f000 f819 	bl	80071b0 <_free_r>
 800717e:	e7ba      	b.n	80070f6 <_reclaim_reent+0x16>
 8007180:	680e      	ldr	r6, [r1, #0]
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f814 	bl	80071b0 <_free_r>
 8007188:	4631      	mov	r1, r6
 800718a:	e7ef      	b.n	800716c <_reclaim_reent+0x8c>
 800718c:	2500      	movs	r5, #0
 800718e:	e7ef      	b.n	8007170 <_reclaim_reent+0x90>
 8007190:	bd70      	pop	{r4, r5, r6, pc}
 8007192:	bf00      	nop
 8007194:	20000010 	.word	0x20000010

08007198 <__malloc_lock>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__malloc_lock+0x8>)
 800719a:	f7ff bf7b 	b.w	8007094 <__retarget_lock_acquire_recursive>
 800719e:	bf00      	nop
 80071a0:	200022a0 	.word	0x200022a0

080071a4 <__malloc_unlock>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__malloc_unlock+0x8>)
 80071a6:	f7ff bf76 	b.w	8007096 <__retarget_lock_release_recursive>
 80071aa:	bf00      	nop
 80071ac:	200022a0 	.word	0x200022a0

080071b0 <_free_r>:
 80071b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071b2:	2900      	cmp	r1, #0
 80071b4:	d044      	beq.n	8007240 <_free_r+0x90>
 80071b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ba:	9001      	str	r0, [sp, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f1a1 0404 	sub.w	r4, r1, #4
 80071c2:	bfb8      	it	lt
 80071c4:	18e4      	addlt	r4, r4, r3
 80071c6:	f7ff ffe7 	bl	8007198 <__malloc_lock>
 80071ca:	4a1e      	ldr	r2, [pc, #120]	; (8007244 <_free_r+0x94>)
 80071cc:	9801      	ldr	r0, [sp, #4]
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	b933      	cbnz	r3, 80071e0 <_free_r+0x30>
 80071d2:	6063      	str	r3, [r4, #4]
 80071d4:	6014      	str	r4, [r2, #0]
 80071d6:	b003      	add	sp, #12
 80071d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071dc:	f7ff bfe2 	b.w	80071a4 <__malloc_unlock>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d908      	bls.n	80071f6 <_free_r+0x46>
 80071e4:	6825      	ldr	r5, [r4, #0]
 80071e6:	1961      	adds	r1, r4, r5
 80071e8:	428b      	cmp	r3, r1
 80071ea:	bf01      	itttt	eq
 80071ec:	6819      	ldreq	r1, [r3, #0]
 80071ee:	685b      	ldreq	r3, [r3, #4]
 80071f0:	1949      	addeq	r1, r1, r5
 80071f2:	6021      	streq	r1, [r4, #0]
 80071f4:	e7ed      	b.n	80071d2 <_free_r+0x22>
 80071f6:	461a      	mov	r2, r3
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	b10b      	cbz	r3, 8007200 <_free_r+0x50>
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d9fa      	bls.n	80071f6 <_free_r+0x46>
 8007200:	6811      	ldr	r1, [r2, #0]
 8007202:	1855      	adds	r5, r2, r1
 8007204:	42a5      	cmp	r5, r4
 8007206:	d10b      	bne.n	8007220 <_free_r+0x70>
 8007208:	6824      	ldr	r4, [r4, #0]
 800720a:	4421      	add	r1, r4
 800720c:	1854      	adds	r4, r2, r1
 800720e:	42a3      	cmp	r3, r4
 8007210:	6011      	str	r1, [r2, #0]
 8007212:	d1e0      	bne.n	80071d6 <_free_r+0x26>
 8007214:	681c      	ldr	r4, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	6053      	str	r3, [r2, #4]
 800721a:	4421      	add	r1, r4
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	e7da      	b.n	80071d6 <_free_r+0x26>
 8007220:	d902      	bls.n	8007228 <_free_r+0x78>
 8007222:	230c      	movs	r3, #12
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	e7d6      	b.n	80071d6 <_free_r+0x26>
 8007228:	6825      	ldr	r5, [r4, #0]
 800722a:	1961      	adds	r1, r4, r5
 800722c:	428b      	cmp	r3, r1
 800722e:	bf04      	itt	eq
 8007230:	6819      	ldreq	r1, [r3, #0]
 8007232:	685b      	ldreq	r3, [r3, #4]
 8007234:	6063      	str	r3, [r4, #4]
 8007236:	bf04      	itt	eq
 8007238:	1949      	addeq	r1, r1, r5
 800723a:	6021      	streq	r1, [r4, #0]
 800723c:	6054      	str	r4, [r2, #4]
 800723e:	e7ca      	b.n	80071d6 <_free_r+0x26>
 8007240:	b003      	add	sp, #12
 8007242:	bd30      	pop	{r4, r5, pc}
 8007244:	200022a4 	.word	0x200022a4

08007248 <_init>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr

08007254 <_fini>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr
